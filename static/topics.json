{"angular":[{"title":"Why Angular?","content":"\nJavaScript is the most commonly used client-side scripting language. It is written into HTML documents to enable interactions with web pages in many unique ways. As a relatively easy-to-learn language with pervasive support, it is well-suited to develop modern applications. But is JavaScript ideal for developing single-page applications that require modularity, testability, and developer productivity? Perhaps not. These days, we have a variety of frameworks and libraries designed to provide alternative solutions. With respect to front-end web development, Angular addresses many, if not all, of the issues developers face when using JavaScript on its own.\n\nAngular Provide a collection of integrated libraries that cover a wide variety of features, including: routing forms management client server communication and more. Angular is designed to make updating as straightforward as possible so take advantage of the latest features development tools and libraries.\n","section":"angular","source":"https://www.simplilearn.com/"},{"title":"What are the directives ?","content":"\nDirectives are classes that add new behavior or modify the existing behavior to the elements in the template. Basically directives are used to manipulate the DOM, for example adding/removing the element from DOM or changing the appearance of the DOM elements.\n\n**Example of Angular directive**\n\n```ts\n@Component({\n\tselector: 'my-app',\n\ttemplate: `\n\t\t<ul>\n\t\t\t<li *ngFor=\"let name of names\">\n\t\t\t\t{{ name }}\n\t\t\t</li>\n\t\t</ul>\n\t`,\n})\nexport class AppComponent {\n\tnames: string[]\n\tconstructor() {\n\t\tthis.names = ['John', 'Mary', 'Mike']\n\t}\n}\n```\n\nIn this above code, the `*ngFor` directive is used to iterate over the names array and display the names in the template.\n","section":"angular","source":"https://angular.io"},{"title":"What are the order of angular lifecycle hooks execution ?","content":"\nAngular gives us 8 hooks to allow us to tap into the lifecycle of our components and trigger actions at specific points in the lifecycle.\n\nHere are the lifecycle hooks available , in the order which they are invoked:\n\n1. ngOnChanges\n2. ngOnInit\n3. ngDoCheck\n4. ngAfterContentInit\n5. ngAfterContentChecked\n6. ngAfterViewInit\n7. ngAfterViewChecked\n8. ngOnDestroy\n\n**ngOnChanges** Called every time a data-bound input property changes. It’s called a first time before the ngOnInit hook. The hook receives a SimpleChanges object that contains the previous and current values for the data-bound inputs properties. This hook gets called often, so it’s a good idea to limit the amount of processing it does.\n\n**ngOnInit** Called once upon initialization of the component.\n\n**ngDoCheck** Use this hook instead of ngOnChanges for changes that Angular doesn’t detect. It gets called at every change detection cycle, so keeping what it does to a minimum is important for performance.\n\n**ngAfterContentInit** Called after content is projected in the component.\n\n**ngAfterContentChecked** Called after the projected content is checked.\n\n**ngAfterViewInit** Called after a component’s view or child view is initialized.\n\n**ngAfterViewChecked** Called after a component’s view or child view is checked.\n\n**ngOnDestroy** Called once when the component is destroyed and a good hook to use to cleanup and unsubscribe from observables.\n","section":"angular","source":"https://angular.io"},{"title":"What is lifecycle hooks ?","content":"\nThe lifecycle of a component/directive is managed by Angular as it creates, checks, updates, renders, and destroys. To have a view of all these occurrences and respond to these moments, Angular provides lifecycle hooks that give us visibility into these. These lifecycle hooks can be implemented by the interfaces provided in the Angular Core Library. This is the same with components and directives. Every interface contains different lifecycle hook methods, named with the interface name prefixed with ng. Like the very commonly used lifecycle hook ngOnInit() is named as ng(prefix) and OnInit (interface name).\n","section":"angular","source":"https://www.dotnettricks.com"},{"title":"What is change detection ?","content":"\nChange detection is the process through which angular checks to see whether your applications state has changed, and if any DOM needs to be update.\n","section":"angular","source":"https://angular.io"},{"title":"What is the use of ngOnChanges?","content":"\n`ngOnChanges` triggers following the modification of @Input bound class members. Data bound by the @Input() decorator come from an external source. When the external source alters that data in a detectable manner, it passes through the @Input property again.\n\nThe ngOnChanges hook, with it’s SimpleChanges object, is a little different. Here’s how you would implement it. Let’s say we have a component used like this:\n\n```html\n<my-todo [title]=\"title\" [content]=\"content\"></my-todo>\n```\n\nNow say that we want to do something when the title property changes:\n\n```ts\n@Component({\n\tselector: 'my-todo',\n\ttemplateUrl: './my-todo.component.html',\n\tstyleUrls: ['./my-todo.component.css'],\n})\nexport class MyTodoComponent implements OnChanges {\n\t@Input() title: string\n\t@Input() content: string\n\tconstructor() {}\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"Difference between Constructor and ngOnInit ?","content":"\nThe Constructor is a default method of the class that is executed when the class is instantiated and ensures proper initialisation of fields in the class and its subclasses. Angular, or better Dependency Injector (DI), analyses the constructor parameters and when it creates a new instance by calling new MyClass() it tries to find providers that match the types of the constructor parameters, resolves them and passes them to the constructor.\n\nngOnInit is a life cycle hook called by Angular to indicate that Angular is done creating the component.\n","section":"angular","source":"https://angular.io"},{"title":"What is the use of app root in Angular?","content":"\nThe root app module is just the beginning. It is a necessary part of any Angular app, but it is also just the entry point to the rest of your app's feature modules.\n","section":"angular","source":"https://angular.io"},{"title":"What is Ahead of Time (AOT) compiler ?","content":"\nwhen you serve/build your angular application, the Ahead of Time compiler converts your code during the build time before your browser downloads and runs that code. From Angular 9, by default compiling option is set to true for ahead of time compiler.\n","section":"angular","source":"https://angular.io"},{"title":"What is the Just in Time (JIT) compiler ?","content":"\nJust in time compiler provides compilation during the execution of the program at a run time before execution. In simple words, code get compiles when it’s needed, not at the build time. Initially, compiler was responsible for converting a high-level language into machine language, which would then be converted into executable code.\nJust in time compiler, compiles code at runtime which means instead of interpreting byte code at build time, it will compile byte code when that component is called\n","section":"angular","source":"https://angular.io"},{"title":"What is the entry point of Angular application?","content":"\nA bootstrapped component is an entry component that Angular loads into the DOM during the bootstrap process (application launch). Other entry components are loaded dynamically by other means, such as with the router. Angular loads a root AppComponent dynamically because it's listed by type in @NgModule. bootstrap .\n","section":"angular","source":"https://angular.io"},{"title":"What is TypeScript and why it is used?","content":"\nTypeScript is a programming language first developed by Microsoft in 2012. Its main ambition is to improve the productivity of developing complex applications.\nIt is an open-source language developed as a superset of JavaScript. What this means in simple terms is that any code valid in JavaScript is also valuable for TypeScript.\n\n### Example\n\n**Without typescript**\n\n```js\nvar x = 1\nvar y = 2\n```\n\n**With typescript**\n\n```ts\nvar x: number = 1\nvar y: number = 2\n```\n","section":"angular","source":"https://www.codemotion.com/"},{"title":"What is destroy in Angular?","content":"\nA lifecycle hook that is called when a directive, pipe, or component is destroyed. The ngOnDestroy or OnDestroy hook is called just before the Component/Directive instance is destroyed by Angular. Use this hook to Perform any cleanup logic for the Component. This is the correct place where you would like to Unsubscribe Observables and detach event handlers to avoid memory leaks.\n","section":"angular","source":"https://angular.io"},{"title":"What does bootstrapping in Angular mean?","content":"\nAngular bootstrapping is the process of initializing the Angular application. It is the first step in the application's lifecycle. Angular application are mainly bootstrapped from `main.ts` file. This file is the entry point for the application and is responsible for bootstrapping the application.\n","section":"angular","source":"https://angular.io"},{"title":"What is NgModule ?","content":"\nNgModule is kind of a manager for the application. It is responsible for registering all the components, directives, pipes, etc. that are part of this module context. A application can have multiple modules. Each module is responsible for registering its own components, directives, pipes, etc. The core module imports all the other modules.\n\n**Example:**\n\n```typescript\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    BrowserModule,\n    ...\n  ],\n  providers: [\n    ...\n  ],\n})\nexport class ExampleModule { }\n```\n\n**Note:** NgModule is a class that can be used to group components, directives, and pipes into an application and provide additional configuration options to those components.\n","section":"angular","source":"https://angular.io"},{"title":"What are exports in NgModule?","content":"\nWhen we went to share some feature with another module, we declare it in the exports array of the NgModule. This can be used in the other module to import the feature.\n\n**Parent module:**\n\n```typescript\n@NgModule({\n  declarations: [\n    ButtonComponent\n  ],\n  exports: [\n    ButtonComponent\n  ]\n})\n\nexport class ParentModule { }\n```\n\nWe export the button component from the parent module. So now other modules can use this button component if they import the parent module.\n\n**Child module:**\n\n```typescript\n@NgModule({\n  imports: [\n    ParentModule,\n  ],\n})\nexport class ChildModule { }\n```\n","section":"angular","source":"https://angular.io"},{"title":"What are imports in NgModule?","content":"\nWhen we need some feature from another module, We declare it in the imports array of the NgModule. Importing a module is a two-step process. First, we have to export the feature from the module we want to import. Second, we have to import the feature from the module we want to import.\n\n**Parent module:**\n\n```typescript\n@NgModule({\n  declarations: [\n    ButtonComponent\n  ],\n  exports: [\n    ButtonComponent\n  ]\n})\nexport class ParentModule { }\n```\n\n**Child module:**\n\n```typescript\n@NgModule({\n  imports: [\n    ParentModule,\n  ],\n})\nexport class ChildModule { }\n```\n\nThe above example first we export the ButtonComponent from the ParentModule and then we import it in the ChildModule. Now we can use the ButtonComponent in the ChildModules anywhere.\n","section":"angular","source":"https://angular.io"},{"title":"What is  declaration in Angular Module ?","content":"\nIn Angular module, Declaration is a list that contains all the components, directives, pipes, and services that belong to the module.\n\n**Component:**  Component is a UI building block. A component is a self-contained piece of UI that only needs to be built once, and can be used multiple times in other parts of an application.\n\n```typescript\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n```\n\n**Directive:**  Directive are classes that contain a custom behavior. A directive is a behavior that can be attached to elements in the DOM.\n\n```typescript\n@Directive({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  constructor(el: ElementRef) {\n    el.nativeElement.style.backgroundColor = 'yellow';\n  }\n}\n```\n\n**Pipe:**  Pipes are a simple way to transform the values in an angular template.\n\n```typescript\n@Pipe({\n    name: 'reverse'\n})\nexport class ReversePipe implements PipeTransform {\n    transform(value: string) {\n    return value.split('').reverse().join('');\n    }\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is angular markup ?","content":"\nAngular markup is a way to write HTML in angular. It is a superset of HTML where we can modify HTML elements before the are displayed. For example, we can add custom attributes `loop` over an array of items and display them in a list `if else` condition etc.\n\n**Example:**\n\n```html\n<ul>\n  <li *ngFor=\"let item of items\">\n    {{item}}\n  </li>\n</ul>\n<p *ngIf=\"items.length == 0\">\n  There are no items in the list.\n</p>\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is providers in angular ?","content":"\nAngular has an concept of services and services are used to share data between components and do external works like http requests and database connections. Providers has the all the services listed in the array.\n\n**Note:** Providers are contain only services blueprint not the services instance.\n\n**Example:**\n\n```typescript\n@NgModule({\n  providers: [\n    AuthService,\n    UserService,\n    AuthGuard\n  ]\n})\nexport class AppModule { }\n```\n","section":"angular","source":"https://youtube.com"},{"title":"What is injector in angular ?","content":"\nInjector is a container that holds all the instances of the services. Mainly Responsible for creating the instances of the services and injecting them into the components or services.\n","section":"angular","source":"https://angular.io"},{"title":"How angular injector works ?","content":"\nThe Injector looks for the dependency in the Angular Providers using the Injection token. The Angular Providers array returns the Provider, which contains the information about how to create the instance of the dependency. The Injector creates the instance and injects it into the Component or service.\n","section":"angular","source":"https://www.tektutorialshub.com/angular/angular-injector-injectable-inject/#what-is-angular-injector"},{"title":"What is Components?","content":"\nIn Angular, Components are the most basic UI building block of an Angular app. An Angular app contains a tree of Angular components. Angular components are a subset of directives, always associated with a template. Unlike other directives, only one component can be instantiated for a given element in a template.\n\n- Components are typically custom HTML elements, and each of these elements can instantiate only one component.\n- A TypeScript class is used to create a component. This class is then decorated with the `@Component` decorator. The decorator accepts a metadata object that gives information about the component.\n- A component must belong to the NgModule in order for it to be usable by another component or application.\n- Components control their runtime behavior by implementing Life-Cycle hooks.\n\n**Example of an Component**\n\n```TypeScript\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Angular';\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"When is Angular Injector is created ?","content":"The angular injector is created when the application is bootstrapped.\n","section":"angular","source":"https://www.tektutorialshub.com/angular/angular-injector-injectable-inject/#what-is-angular-injector"},{"title":"What is BrowserModule used for?","content":"\nBrowserModule provides services that are essential to launch and run a browser app. BrowserModule also re-exports CommonModule from @angular/common, which means that components in the AppModule module also have access to the Angular directives every app needs, such as NgIf and NgFor.\n","section":"angular","source":"https://angular.io"},{"title":"How do you define a component styles?","content":"\nAngular applications are styles with standard CSS syntax. Here we can use global styles, component styles, and inline styles.\n\n**Global styles**: Global styles are defined in the `<head>` of the HTML document. In angular global styles are `styles.css`. in root directory. Angular automatically injects the global styles into the `<head>` of the HTML document.\n\n```css\nh1 {\n  color: red;\n}\n```\n\n**Component styles**: Component styles are defined in the `styles` property of the component metadata.\n\n```ts\n@Component({\n  selector: 'my-app',\n  template: `\n    <h1>Hello {{name}}</h1>\n  `,\n  styles: [`h1 { color: red; }`]\n})\nexport class AppComponent {\n  name = 'Angular';\n}\n```\n\n**Inline styles**: Inline styles are defined HTML attributes.\n\n```html\n<div [style.background-color]=\"'yellow'\">\n  <h1>Hello {{name}}</h1>\n</div>\n```\n","section":"angular","source":"https://angular.io"},{"title":"How do you define a component template?","content":"\nTo define a component template, you must use the `template` property in the component metadata. there are two ways to define a template: inline and external.\n\n**Inline template**\n\n```ts\n@Component({\n  selector: 'my-app',\n  template: `\n    <h1>Hello {{name}}</h1>\n  `\n})\nexport class AppComponent {\n  name = 'Angular';\n}\n```\n\n**External template**\n\n```ts\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  name = 'Angular';\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"Why Use Property Binding?","content":"Property binding helps us bind the values to a target property of an element enclosed within the square brackets. Property binding is the technique that will help us bind values to HTML elements’ properties.\n\n<details>\n  <summary>Example</summary>\n\n  ```ts\n@Component({\n    selector: 'my-app',\n    template: `\n    <input type=\"text\" [(ngModel)]=\"name\" />\n    `\n})\nclass AppComponent {\n    name = 'Angular';\n}\n```\n\n</details>\n","section":"angular","source":"https://angular.io"},{"title":"What is Interpolation in angular ?","content":"\n\nInterpolation in Angular is getting the data displayed inside the view. Interpolation allows us to combine calculated strings into the text between the HTML element tags and within the attribute assignments. Interpolation refers to embedding expressions into marked-up text. By default, interpolation uses its delimiter, the double curly braces, {{ and }}.\n\n<details>\n  <summary>Example</summary>\n  \n  ```ts\n@Component({\n    selector: 'my-app',\n    template: `\n    <h1>Hello {{name}}</h1>\n    `\n    })\nclass AppComponent {\n    name = 'Angular';\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"Why we need attribute binding in angular ?","content":"\nIf an attribute does't have corresponding DOM property then attribute binding are helpful to bind the attribute value to the DOM property.\n\n```html\n<table>\n\t<tr>\n\t\t<td [attr.colspan]=\"2\">\n\t\t\t<span>Hello</span>\n\t\t</td>\n\t</tr>\n</table>\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is event bind?","content":"\nEvent binding lets you listen for and respond to user actions such as keystrokes, mouse movements, clicks, and touches.\n\n**Example:**\n\n```typescript\n@Component({\n\tselector: 'my-app',\n\ttemplate: ` <button (click)=\"onClick()\">Click me</button> `,\n})\nexport class AppComponent {\n\tonClick() {\n\t\talert('Hello World!')\n\t}\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"Difference between One-way & Two-way Binding","content":"\nIn one-way binding, the flow is one-directional. In a two-way binding, the flow is two-directional. This means that the flow of code is from ts file to Html file. This means that the flow of code is from ts file to Html file as well as from Html file to ts file.\n\n**One-way binding**\n\n```ts\n@Component({\n\tselector: 'my-app',\n\ttemplate: `\n\t\t<input type=\"text\" (keyup)=\"onKeyUp($event)\" />\n\t\t<p>{{ values }}</p>\n\t`,\n})\nexport class AppComponent {\n\tvalues = ''\n\tonKeyUp(e) {\n\t\tthis.values += e.target.value\n\t}\n}\n```\n\n**Two-way binding**\n\n```ts\n@Component({\n\tselector: 'my-app',\n\ttemplate: `\n\t\t<input type=\"text\" [(ngModel)]=\"name\" />\n\t\t<p>Hello {{ name }}</p>\n\t`,\n})\nexport class AppComponent {\n\tname = 'Angular'\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is a pipe","content":"\nPipes are a way to transform data in templates expressions before it is displayed. It's accepts data as input and returns transformed data as output.\n\n**Example**\n\n```ts\n@Pipe({ name: 'reverse' })\nexport class ReversePipe implements PipeTransform {\n\ttransform(value: any) {\n\t\treturn value.split('').reverse().join('')\n\t}\n}\n```\n\n```html\n<p>{{ 'Hello' | reverse }}</p>\n```\n","section":"angular","source":"https://angular.io"},{"title":"What Is Angular?","content":"\nAngular is an open-source, JavaScript framework written in TypeScript. Google maintains it, and its primary purpose is to develop single-page applications. As a framework, Angular has clear advantages while also providing a standard structure for developers to work with. It enables users to create large applications in a maintainable manner.\n","section":"angular","source":"https://www.simplilearn.com/"},{"title":"What is structural directive and attribute directive in Angular?","content":"\nAttribute directives. Change the appearance or behavior of an element, component, or another directive. Structural directives. Change the DOM layout by adding and removing DOM elements.\n","section":"angular","source":"https://angular.io"},{"title":"What is injector in angular ?","content":"\nInjector are objects that are used to resolve dependencies. In angular a component when request a service it will be resolved by the injector. An injector is a kind of container that create service instance and provides them to the component.\n\n_Note:_ A injector has an cache mechanism that prevent to create service instance multiple times. This is useful when a service is used in multiple components and provides the same instance to all of them (Singleton).\n\n[Read more](https://angular.io/guide/dependency-injection)\n","section":"angular","source":"https://angular.io"},{"title":"What does @injectable decorator do?","content":"\nInjectable decorator is used to mark a class as available to be injected as a dependency. It's help to use other classes as a dependency in services. With injectable decorator we can tell Angular to inject other classes as a dependency.\n","section":"angular","source":"https://angular.io"},{"title":"What is useClass in Angular?","content":"\n`useClass` - this option is used to specify a class to be used for the service. The class must implement the `useClass` method.\n\n```typescript\nexport class NewLogger {\n\tconstructor() {\n\t\tconsole.log('NewLogger created')\n\t}\n}\n\n@Injectable()\nexport class Logger {\n\tconstructor() {\n\t\tconsole.log('Logger created')\n\t}\n}\n\n@NgModule({\n    providers: [\n        { provide: Logger, useClass: NewLogger }\n    ]\n})\n// Output:\n// NewLogger created\n```\n\nThe above example will create a new logger class instead of the default logger class. and provide it to the application through the DI.\n","section":"angular","source":"https://angular.io"},{"title":"What is useExisting in Angular?","content":"\nThe useExisting provider key lets you map one token to another. In effect, the first token is an alias for the service associated with the second token, creating two ways to access the same service object.\n\n## Example\n\n```typescript\n;[\n\tNewLogger,\n\t// Alias OldLogger w/ reference to NewLogger\n\t{ provide: OldLogger, useExisting: NewLogger },\n]\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is root in provider in Angular?","content":"\n`@Injectable()` decorator provideIn root is used to define a service to be a part of root moduleInjector.\n","section":"angular","source":"https://angular.io"},{"title":"How we define a wildcard route in angular","content":"\nWe can define a wildcard route in our application by using the \\*\\* syntax. This is a special syntax that matches any path that is not defined in the application. It useful for showing a page that is not found.\n\n**Example:**\n\n```typescript\n@NgModule({\n  imports: [\n    RouterModule.forRoot([\n      { path: '', component: HomeComponent },\n      { path: '**', component: PageNotFoundComponent }\n    ])\n  ],\n  exports: [RouterModule]\n})\n```\n","section":"angular","source":"https://angular.io/guide/router"},{"title":"When should you use a router outlet?","content":"\nWhen we have an nested route, we can use a router outlet to display the content of the nested route. The router outlet directive help us to maintain the multiple views or page in the same page.\n","section":"angular","source":"https://angular.io"},{"title":"What is Lazy Loading?","content":"\nLazy loading (also called on-demand loading) is an optimization technique for the content, be it a website or a web app.\nInstead of loading the entire web page and rendering it to the user in one go as in bulk loading, the concept of lazy loading assists in loading only the required section and delays the remaining, until it is needed by the user.\n","section":"angular","source":"https://www.geeksforgeeks.org/what-is-lazy-loading/"},{"title":"What are Angular guards?","content":"\nAngular route guards are interfaces provided by Angular which, when implemented, allow us to control the accessibility of a route based on conditions provided in class implementation of that interface. Here are some types of Angular guards: CanActivate, CanActivateChild, CanLoad, CanDeactivate and Resolve.\n","section":"angular","source":"https://www.telerik.com/blogs/angular-basics-canactivate-introduction-routing-guards"},{"title":"What are the core building block of angular","content":"\nThe various building blocks of Angular are:\n\n- Components\n- Modules\n- Directives\n- Decorators\n- Pipes\n- Data Binding\n- Templates\n- Metadata\n- Services\n- Dependency Injection\n","section":"angular","source":"https://angular.io"},{"title":"What is difference between CanActivate and canActivateChild?","content":"\n```ts\nconst routes: Routes = [\n  {\n    path: \"parent\",\n    component: ParentComponent,\n    canActivateChild: [OnlyDigitsGuard],\n    children: [...],\n  },\n];\n```\n\n- canActivate will only execute when the parent component is not yet created. For example, if we navigate to the parent route it will be called, if we then navigate to a child route it will not. If we directly navigate to the child route, the canActivate guard will also be executed.\n\n- canActivateChild will always be executed while navigating to/between child routes. For example, if we're at a child route child/1 and we navigate to child/2, the guard will get executed. If we directly navigate to a child route, the guard will also get called. If we navigate to the parent route, the canActivateChild guard will not be fired.\n\n- because canActivate is guarding the parent route, the child parameters (and data) are not available on the ActivatedRouteSnapshot of the canActivate guard. To be able to access the child parameters, we have to drill down the child components on the RouterStateSnapshot.\n","section":"angular","source":"https://timdeschryver.dev/blog/the-difference-between-the-canactivate-and-canactivatechild-guards#nice-to-knows"},{"title":"How many change detectors are in Angular?","content":"\nAngular Provides two different ways to manage change detection. Default and onPush strategies.\n\n**Default**: Check every component from the component tree from top to bottom every time an event triggers change detection on browser events, timers, XHRs, and promises.\n\n**onPush**: With OnPush strategy skip checks for components that uses OnPush strategy and all of its child component. It's runs only when the input reference changed or an event from the component or one of it's child component triggers change detection.\n","section":"angular","source":"https://angular.io"},{"title":"What are the practical differences between template driven and Reactive forms?","content":"\n- Template-driven forms make use of the \"FormsModule\", while reactive forms are based on \"ReactiveFormsModule\".\n- Template-driven forms are asynchronous in nature, whereas Reactive forms are mostly synchronous.\n- In a template-driven approach, most of the logic is driven from the template, whereas in reactive-driven approach, the logic resides mainly in the component or typescript code.\n","section":"angular","source":"https://www.pluralsight.com/guides/difference-between-template-driven-and-reactive-forms-angular"},{"title":"How many types of data binding are there in Angular?","content":"\nAngular provides three categories of data binding according to the direction of data flow:\n\n- From source to view\n- From view to source\n- In a two-way sequence of view to source to view\n\n**Interpolation Property Attribute Class Style**\nOne-way from data source to view target. Use `[]` or `{{}}` to bind from source to view\n\n```html\n{{expression}} [target]=\"expression\"\n```\n\n**Event**\nOne-way from view target to data source. Use `()` to bind from view to source.\n\n```html\n(target)=\"statement\"\n```\n\n**Two-way**\nTwo-way. Use `[()]` to bind in a two way sequence of view to source to view\n\n```html\n[(target)]=\"expression\"\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is a template variable?","content":"\nTemplate variables use to pass data from one of a template in another part of the template. Just like variables in JavaScript or TypeScript code, template variables are scoped to the template that declares them.\n","section":"angular","source":"https://angular.io"},{"title":"What is use of ng-container in angular","content":"\nng-container allows us to create a division or section in a template without introducing a new HTML element. The ng-container does not render in the DOM, but content inside it is rendered. ng-container is not a directive, component, class, or interface, but just a syntax element. Container's content.\n","section":"angular","source":"https://angular.io"},{"title":"Difference between ng-container and ng-template tags","content":"\n### ng-template\n\n`ng-template` is used for the structural directive like ng-if, ng-for and ng-switch. If you use it without the structural directive, nothing happens and it will render.\n\n**Example:**\n\n```html\n<ng-template>\n\t<div>Hi</div>\n</ng-template>\n```\n\nThere is nothing shown on the screen.\n\n```html\n<ng-template *ngIf=\"true\">\n\t<div>Hi</div>\n</ng-template>\n```\n\nThis will show the div on the screen with the text \"Hi\".\n\n### ng-container\n\n`ng-container` is used to group elements. It is not rendered on the screen. It is used to group elements and apply directives to them.\n\n**Example:**\n\n```html\n<ng-container *ngIf=\"true\">\n\t<div>Hi Container</div>\n</ng-container>\n```\n\nThis will show the div on the screen with the text \"Hi Container\".\n","section":"angular","source":"https://stackoverflow.com/questions/40529537/ng2-difference-between-ng-container-and-ng-template-tags"},{"title":"How does injection work in Angular?","content":"\nAngular's Dependency Injection is based on providers, injectors, and tokens. Every Angular module has an injector associated with it. The injector is responsible to create the dependencies and inject them when needed. Dependencies are added to the injector using the providers property of the module metadata.\n","section":"angular","source":"https://angular.io"},{"title":"What do you mean by singleton design pattern?","content":"\nIt's a creational design pattern that ensures that at any given point in time there exists only a single instance of a class and provides a way to access it globally.\n","section":"angular","source":"https://angular.io"},{"title":"What are ways to create a singleton service in angular?","content":"\nThere are two ways to create a single service in angular that is by using -\n\n- providedIn property\n- NgModule providers arrays\n","section":"angular","source":"https://angular.io"},{"title":"Difference between Angular and AngularJS","content":"\nDifference between the AngularJS & Angular: Although, there are significant key differences between Angular JS & Angular:\n\n| AngularJS                                     | Angular                                                                           |\n| --------------------------------------------- | --------------------------------------------------------------------------------- |\n| It supports the Model-View-Controller design. | It uses components and directives. Components are the directives with a template. |\n| Written in JavaScript                         | Written in TypeScript                                                             |\n| Not a mobile friendly framework               | Angular is supported by all the popular mobile browsers.                          |\n| It does not use Dependency Injection.         | It support Dependency Injection.                                                  |\n","section":"angular","source":"https://www.geeksforgeeks.org/"},{"title":"What is RxJS used for?","content":"\nReactive Extensions for JavaScript, or RxJS, is a reactive library used to implement reactive programming to deal with async implementation, callbacks, and event-based programs. It can be used in your browser or with Node. js. RxJS observables allow you to publish events.\n","section":"angular","source":"https://www.educative.io/blog/rx-js-angular"},{"title":"What is metadata?","content":"\nMetadata is used to decorate the class so that it can configure the expected behavior of a class. Decorators are the core concept when developing with Angular (versions 2 and above). The user can use metadata to a class to tell Angular app that AppComponent is the component. Metadata can be attached to the TypeScript using the decorator.\n\n```ts\n@Component({\n\tselector: 'app-root',\n\ttemplateUrl: './app.component.html',\n\tstyleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n\ttitle = 'app'\n}\n```\n\n`@Component` is a decorator which makes use of configuration object to\ncreate the component and its view.\n","section":"angular","source":"https://www.freetimelearning.com/software-interview-questions-and-answers.php?What-is-metadata-in-Angular?&id=442#:~:text=Angular%20Interview%20Questions-,What%20is%20metadata%20in%20Angular%3F,that%20AppComponent%20is%20the%20component."},{"title":"How many lifecycle hooks are there in Angular?","content":"\nAngular has 8 lifecycle hooks. They are:\n\n1. ngOnChanges\n2. ngDoCheck\n3. ngOnInit\n4. ngAfterContentInit\n5. ngAfterContentChecked\n6. ngAfterViewInit\n7. ngAfterViewChecked\n8. ngOnDestroy\n","section":"angular","source":"https://angular.io"},{"title":"Why do we use service in Angular?","content":"\nService is designed to encapsulate business logic and data with different components of Angular. It is basically a class that has a well-defined purpose to do something. You can create a service class for data or logic that is not associated with any specific view to share across components.\n\n**Example**\n\n```ts\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class UserService {\n\tconstructor() {}\n\tgetUsers() {\n\t\treturn [\n\t\t\t{ id: 1, name: 'John' },\n\t\t\t{ id: 2, name: 'Doe' },\n\t\t\t{ id: 3, name: 'Smith' },\n\t\t]\n\t}\n}\n```\n\n**Usage**\n\n```ts\n@Component({\n\tselector: 'app-root',\n\ttemplateUrl: './app.component.html',\n\tstyleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n\tusers: any[] = []\n\n\tconstructor(private userService: UserService) {}\n\n\tngOnInit() {\n\t\tthis.users = this.userService.getUsers()\n\t}\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is the dependency injection?","content":"\nDependency injection is a design pattern that allows you to decouple dependencies from a class. DI patterns ask for dependencies from external sources rather than creating them. Angular uses DI to provide new instances of services or values to a class.\n","section":"angular","source":"https://angular.io"},{"title":"Where is async pipe used?","content":"\nThe async pipe is used to subscribe to an observable or promise and get the latest value it has emitted. It is mostly used with the HTTP service.\n\n**Example**\n\n```ts\n@Component({\n\tselector: 'app-root',\n\ttemplateUrl: `\n        <div *ngIf=\"data | async as users\">\n            <ul>\n                <li *ngFor=\"let user of users\">\n                    {{ user.name }}\n                </li>\n            </ul>\n        </div>\n    `,\n\tstyleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n\tdata: Observable<any>\n\tconstructor(private http: HttpClient) {}\n\tngOnInit() {\n\t\tthis.data = this.http.get('https://jsonplaceholder.typicode.com/users')\n\t}\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is * ngFor directive used for?","content":"\nThe `*ngFor` directive is used to iterate over a collection. The directive is placed on a container element, which becomes the parent of the cloned templates.\n\nThe `*ngFor` expression is written in the form `let item of items`, where `items` is the collection to iterate over, and `item` is the current item in the collection.\n\n**Example**\n\n```ts\n@Component({\n\tselector: 'app-root',\n\ttemplate: `\n\t\t<ul>\n\t\t\t<li *ngFor=\"let item of items\">{{ item }}</li>\n\t\t</ul>\n\t`,\n})\nexport class AppComponent {\n\titems = ['item1', 'item2', 'item3']\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is custom pipe in Angular?","content":"\nCreate custom pipes to encapsulate transformations that are not provided with the built-in pipes. Then, use your custom pipe in template expressions, the same way you use built-in pipes—to transform input values to output values for display.\n\n**Example**\n\nThe following example shows how to use a custom pipe to display a birthday date in a particular format.\n\n```ts\nimport { Pipe, PipeTransform } from '@angular/core'\n\n@Pipe({ name: 'formatDate' })\nexport class FormatDatePipe implements PipeTransform {\n\ttransform(value: string, format: string): string {\n\t\treturn formatDate(value, format, 'en-US')\n\t}\n}\n```\n\n```ts\n@Component({\n\tselector: 'app-root',\n\ttemplate: ` <p>The birthday is {{ birthday | formatDate: 'MM/dd/yy' }}</p> `,\n})\nexport class AppComponent {\n\tbirthday = new Date(1988, 3, 15) // April 15, 1988\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"What are observables?","content":"\nObservables are declarative which provide support for passing messages between publishers and subscribers in your application. They are used frequently in Angular and are the recommended technique for event handling, asynchronous programming, and handling multiple values.\n\n**Example**\n\n```ts\nimport { Component, OnInit } from '@angular/core'\n\nimport { Observable } from 'rxjs'\n\n@Component({\n\tselector: 'app-root',\n\ttemplate: `\n\t\t<div *ngIf=\"data | async as users\">\n\t\t\t<ul>\n\t\t\t\t<li *ngFor=\"let user of users\">\n\t\t\t\t\t{{ user.name }}\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t`,\n\tstyleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n\tdata: Observable<any>\n\tconstructor(private http: HttpClient) {}\n\tngOnInit() {\n\t\tthis.data = this.http.get('https://jsonplaceholder.typicode.com/users')\n\t}\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is the difference between promise and observable?","content":"\n| Promise                                    | Observable                                   |\n| ------------------------------------------ | -------------------------------------------- |\n| Promise are eager                          | Observable are lazy                          |\n| Promise produce a single value or an error | Observable produce multiple values over time |\n","section":"angular","source":"https://angular.io"},{"title":"What are templates in Angular","content":"\nIn Angular, templates are the HTML that is used to render the application. It's responsible for the layout and content and how it is displayed in the UI. Every component has an HTML template that declares how that component renders. You define this template either inline or by file path. Angular extends HTML with additional syntax that lets you insert dynamic values from your component. Angular automatically updates the rendered DOM when your component's state changes.\n\n**Example of a angular template**\n\n```ts\n@Component({\n\tselector: 'my-app',\n\ttemplate: `\n\t\t<h1>Hello {{ name }}</h1>\n\t\t<p>This is some content</p>\n\t`,\n})\nexport class AppComponent {\n\tname = 'Angular'\n}\n```\n\nHere name is a property that is bound to the {{ name }} in the template. It's an syntax that is used to insert dynamic values into the template.\n","section":"angular","source":"https://angular.io"},{"title":"How to create observable from promise","content":"\nUse the `from` operator to convert a promise to an observable.\n\n```ts\nimport { from } from 'rxjs'\n\nconst promise = new Promise((resolve) => {\n\tsetTimeout(() => {\n\t\tresolve('Hello from promise!')\n\t}, 1000)\n})\n\nconst observable = from(promise)\n\nobservable.subscribe((x) => console.log(x))\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is router in Angular?","content":"\nAngular router can interpret a browser URL as an instruction to navigate to a client-generated view. It can pass optional parameters along to the supporting view component that help it decide what specific content to present. You can bind the router to links on a page, and it will navigate to the appropriate application view when the user clicks a link.\n","section":"angular","source":"https://angular.io"},{"title":"What is the use of DomSanitizer?","content":"\nDomSanitizer helps prevent Cross Site Scripting Security bugs (XSS) by sanitizing values to be safe to use in the different DOM contexts.\n\n**Example**\n\n```ts\nimport { Component } from '@angular/core'\n\n@Component({\n\tselector: 'my-app',\n\ttemplate: `\n\t\t<h1>DomSanitizer Example</h1>\n\t\t<p>Safe HTML: {{ safeHtml }}</p>\n\t\t<p>Safe Style: {{ safeStyle }}</p>\n\t\t<p>Safe Script: {{ safeScript }}</p>\n\t\t<p>Safe Url: {{ safeUrl }}</p>\n\t\t<p>Safe Resource Url: {{ safeResourceUrl }}</p>\n\t`,\n})\nexport class AppComponent {\n\tsafeHtml: string\n\tsafeStyle: string\n\tsafeScript: string\n\tsafeUrl: string\n\tsafeResourceUrl: string\n\n\tconstructor(private sanitizer: DomSanitizer) {\n\t\tthis.safeHtml = sanitizer.bypassSecurityTrustHtml(\n\t\t\t'<script>alert(\"Hi there\")</script>'\n\t\t)\n\t\tthis.safeStyle = sanitizer.bypassSecurityTrustStyle('background: red')\n\t\tthis.safeScript = sanitizer.bypassSecurityTrustScript('alert(\"Hi there\")')\n\t\tthis.safeUrl = sanitizer.bypassSecurityTrustUrl(\n\t\t\t'javascript:alert(\"Hi there\")'\n\t\t)\n\t\tthis.safeResourceUrl = sanitizer.bypassSecurityTrustResourceUrl(\n\t\t\t'javascript:alert(\"Hi there\")'\n\t\t)\n\t}\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is rendering engine in Angular?","content":"\nAngular view engine takes the templates and components we've written and translates them into regular HTML and JavaScript that the browser can read and display.\n","section":"angular","source":"https://medium.com/js-imaginea/ivy-a-look-at-the-new-render-engine-for-angular-953bf3b4907a"},{"title":"What is a ViewChild Angular?","content":"\nViewChild is a decorator that allows you to access the DOM element or the component instance of the element to which it is attached. It is used to get a reference to the element or the component instance in the template.\n\n## Example\n\n```ts\nimport { Component, ViewChild } from '@angular/core'\n@Component({\n\tselector: 'app-child',\n\ttemplate: `<p #childElement>child works!</p>`,\n})\nexport class ChildComponent {\n\t@ViewChild('childElement') childElement: ElementRef\n\n\tngAfterViewInit() {\n\t\tconsole.log(this.childElement.nativeElement)\n\t}\n}\n```\n","section":"angular","source":"https://angular.io"},{"title":"What is HTTP interceptors in Angular?","content":"\nHTTP Interceptors is a special type of angular service that we can implement. It's used to apply custom logic to the central point between the client-side and server-side outgoing/incoming HTTP request and response.\n","section":"angular","source":"https://angular.io"},{"title":"Why is Node.js required for Angular?","content":"\nAngular does not require Node.js directly. However, Angular CLI does require Node.js. Angular CLI is a command-line interface tool that we use to initialize, develop, scaffold, and maintain Angular applications. For example:\n\n- npm (node package manager) comes with Node.js by default and it allows you to manage your dependencies. So, you don’t have to worry about operations like adding a dependency, removing some, or updating your package.json.\n- npm gives you angular CLI or ng CLI (angular command-line interface) which is a great tool for building your application easily\n- Node.js allows you to spin up a lightweight web server to host your application locally in your system.\n","section":"angular","source":"https://angular.io"},{"title":"What is the purpose of shared modules","content":"\nCreating shared modules allows you to organize and streamline your code. You can put commonly used directives, pipes, and components into one module and then import just that module wherever you need it in other parts of your application.\n","section":"angular","source":"https://angular.io"},{"title":"What Is property binding in angular ?","content":"\nProperty binding in Angular helps you set values for properties of HTML elements or directives. Use property binding to do things such as toggle button functionality, set paths programmatically, and share values between components.\n\n**Example of Angular property binding**\n\n```ts\n@Component({\n\tselector: 'my-app',\n\ttemplate: ` <img [src]=\"imageUrl\" /> `,\n})\nexport class AppComponent {\n\timageUrl = 'https://picsum.photos/200/300'\n}\n```\n\nThe above code creates an Angular component that displays an image. The image's source is set to the value of the imageUrl property in the DOM node. A target property is the property of the DOM node that is set to the value of the imageUrl property.\n","section":"angular","source":"https://angular.io"},{"title":"What is the difference between properties and attributes in HTML?","content":"\nWhen writing HTML source code, you can define attributes on your HTML elements. Then, once the browser parses your code, a corresponding DOM node will be created. This node is an object, and therefore it has properties.\n\nFor instance, this HTML element:\n\n```html\n<input type=\"text\" name=\"name\" />\n```\n\nHas 2 attributes `(type and value)`.\nOnce the browser parses this code, a HTMLInputElement object will be created, and this object will contain dozens of properties like: accept, accessKey, align, alt, attributes, autofocus, baseURI, checked, childElementCount, childNodes, children, classList, className, clientHeight, etc.\n","section":"angular","source":"https://stackoverflow.com"}],"cs":[{"title":"What is an Algorithm?","content":"\nA set of instructions that can be executed to accomplish a specific task or to produce a result. A process durer for solving a problem is called an algorithm.\n","section":"cs","source":"https://www.geeksforgeeks.org/"},{"title":"What is Big O notation?","content":"\nBig O Notation is a way to measure an algorithm's efficiency. It measures the time it takes to run your function as the input grows.\n","section":"cs","source":"https://towardsdatascience.com/"},{"title":"When should you not use binary search?","content":"\nIn case the list of elements is not sorted, there's no way to use binary search because the median value of the list can be anywhere and when the list is split into two parts, the element that you were searching for could be cut off. This is why binary search is not useful.\n","section":"cs","source":"https://blog.logrocket.com/why-binary-search-is-useful/"},{"title":"What is Recursion?","content":"\nRecursion is a process of calling itself. A function that calls itself is called a recursive function. One critical requirement of recursive functions is the termination point or base case. Every recursive program must have a base case to make sure that the function will terminate. Missing base case results in unexpected behavior.\n\n```js\nfunction sum(num) {\n\tif (num == 0) {\n\t\treturn num\n\t}\n\treturn num + sum(num - 1)\n}\n\nconsole.log(sum(10)) //55\n```\n","section":"cs"},{"title":"What is sorting and its types?","content":"\nSorting is the processing of arranging the data in ascending and descending order. There are several types of sorting in data structures namely – bubble sort, insertion sort, selection sort, bucket sort, quick sort etc.\n","section":"cs","source":"https://www.codingninjas.com"},{"title":"What is the difference between ascending and descending order explain with example?","content":"\nAscending order is the arrangement of numbers from the smallest to the largest. For example, the following numbers are in ascending order: 3, 15, 28, 49. Descending order is an arrangement of numbers from the largest to the smallest. For example, the numbers 45, 32, 26, 12 are arranged in descending order.\n\n**Ascending**\n\n- 1\n- 2\n- 3\n- 4\n- 5\n\n**Descending**\n\n- 5\n- 4\n- 3\n- 2\n- 1\n","section":"cs","source":"https://www.codingninjas.com"},{"title":"Why Sorting Algorithms are Important ?","content":"\nSorting can often reduce the complexity of a problem, it is an important algorithm in Computer Science. These algorithms have direct applications in searching algorithms, database algorithms, divide and conquer methods, data structure algorithms, and many more.\n","section":"cs","source":"https://www.codingninjas.com"},{"title":"What is the time complexity of linear search algorithm?","content":"\nLinear search is also known as sequential search. It is named as linear because its time complexity is of the order of n O(n).\n","section":"cs","source":"https://www.codingninjas.com"},{"title":"Difference between a binary search and a linear search?","content":"\n- Binary search requires that the list be sorted. Linear search does not require that the list be sorted.\n- Binary search require comparisons to be made. Linear search does not require comparisons to be made. Linear search require equality comparisons.\n- Binary search time complexity is O(log n). Linear search time complexity is O(n).\n\n**Example of binary search:**\n\n```javascript\nfunction binarySearch(arr, item) {\n  let low = 0\n  let high = arr.length - 1\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2)\n    const guess = arr[mid]\n    if (guess === item) {\n      return true\n    }\n    if (guess > item) {\n      high = mid - 1\n    } else {\n      low = mid + 1\n    }\n  }\n  return false\n}\n```\n\n**Example of linear search**\n\n```javascript\nfunction linearSearch(arr, item) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === item) {\n      return true\n    }\n  }\n  return false\n}\n```\n","section":"cs","source":"https://www.fullstack.cafe"},{"title":"What is meant by linear search?","content":"\nA linear search is a simple search algorithm that looks at each element in the data set and checks if the element is the one you are looking for. Starting at the beginning of the data set. Once the item is found, the search ends.\n\n```javascript\nfunction linearSearch(arr, item) {\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] === item) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nlinearSearch([1, 2, 3, 4, 5], 3) // true\n```\n\n**Big O Notation**\nThe time complexity is O(n) because the algorithm has to look at each element in the data set.\n","section":"cs","source":"https://www.bbc.co.uk/bitesize/guides/z7kkw6f/revision/7"},{"title":"what is o(n) time complexity","content":"\nLinear time complexity O(n) means that the algorithms take proportionally longer to complete as the input grows.\n\nExamples of linear time algorithms: Get the max/min value in an array.\n\n```js\nfunction getMax(arr) {\n\tlet max = arr[0]\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tif (arr[i] > max) {\n\t\t\tmax = arr[i]\n\t\t}\n\t}\n\treturn max\n}\n\nfunction getMin(arr) {\n\tlet min = arr[0]\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tif (arr[i] < min) {\n\t\t\tmin = arr[i]\n\t\t}\n\t}\n\treturn min\n}\n\nconst arr = [1, 2, 3, 4, 5]\n\nconst max = getMax(arr)\nconst min = getMin(arr)\n```\n\nIn the above example, the algorithm is O(n) because it has to loop through the array once to find the max and once to find the min value. The loop is dependent on the size of the array.\n","section":"cs"},{"title":"What will happen as n approaches infinity in BigO?","content":"\nBig O notation is written in the form of O(n) where O stands for “order of magnitude” and n represents what we're comparing the complexity of a task against.\n","section":"cs"},{"title":"What does space complexity mean?","content":"\nSpace complexity is the amount of memory that an algorithm will use. Algorithms are run on a computer It need certain amount of memory space to run. The amount of memory used by an algorithm is called its space complexity.\n\n**Example:**\n\n```javascript\nfunction factorial(n) {\n\tif (n === 0) {\n\t\treturn 1\n\t}\n\treturn n * factorial(n - 1)\n}\n```\n\nThe above algorithm will use O(n) space complexity. This is because it will use n amount of memory to store the result of the factorial function.\n\n**Another Example:**\n\n```javascript\nfunction sum(n1, n2) {\n\treturn n1 + n2\n}\n```\n\nThis algorithm will use O(1) space complexity. This is because it will use only one memory space to store the result of the sum function.\n","section":"cs","source":"https://www.simplilearn.com/"},{"title":"What is space complexity types?","content":"\nSpace complexity types are used to describe the amount of space required to store a given data structure.\n\n### Space complexity types\n\n- **O(1)**: Constant time complexity.\n- **O(n)**: Linear time complexity.\n- **O(log n)**: Logarithmic time complexity.\n","section":"cs","source":"https://www.baeldung.com"},{"title":"What is the fastest big O?","content":"\nThe fastest possible running time for any algorithm is O(1), commonly referred to as Constant Running Time. In this case, the algorithm always takes the same amount of time to execute, regardless of the input size.\n\n**Example of Constant Running Time:**\n\n```javascript\nfunction constantRunningTime(n) {\n\treturn n\n}\n\nconstantRunningTime(1) // O(1)\n```\n\nThe above algorithm is the fastest possible running time for any algorithm. It always takes the same amount of time to execute, regardless of the input size.\n","section":"cs"},{"title":"What is binary searching?","content":"\nBinary search is a search algorithm that works by comparing the target value to the middle element of the data set. If the target value is less than the middle element, the algorithm repeats the process on the lower half of the data set. If the target value is greater than the middle element, the algorithm repeats the process on the upper half of the data set.\n\n```javascript\nfunction binarySearch(arr, item) {\n let low = 0\n let high = arr.length - 1\n\n while (low <= high) {\n  const mid = Math.floor((low + high) / 2)\n  const guess = arr[mid]\n\n  if (guess === item) {\n   return true\n  }\n\n  if (guess > item) {\n   high = mid - 1\n  } else {\n   low = mid + 1\n  }\n }\n\n return false\n}\n\nbinarySearch([1, 2, 3, 4, 5], 3) // true\n```\n\n**Note:** The above algorithm is `O(log n)` because it has to divide the data set in half every time it loops.\n\n**Binary Search in String**\n\n```javascript\nconst str = 'abcdefghijklmn'\nfunction bSearch(array, word) {\n let left = 0\n let right = array.length - 1\n while (left <= right) {\n  const mid = Math.floor((left + right) / 2)\n  const guess = word.localeCompare(array[mid])\n  if (0 == guess) {\n   return { result: array[mid], index: mid }\n  }\n  if (guess > 0) {\n   left = mid + 1\n  } else {\n   right = mid - 1\n  }\n }\n return -1\n}\nconsole.log(bSearch(str.split(''), 'h'))\n``` \n","section":"cs"}],"front-end":[{"title":"What does client-side mean?","content":"\nIn web development, 'client side' refers to everything in a web application that is displayed or takes place on the client (end user device). This includes what the user sees, such as text, images, and the rest of the UI, along with any actions that an application performs within the user's browser.\n\nMarkup languages like HTML and CSS are interpreted by the browser on the client side.\n","section":"front-end","source":"https://www.cloudflare.com"},{"title":"What is node.js","content":"\nNode.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser.\n","section":"front-end"},{"title":"Is cross browser testing necessary?","content":"\nDifferent browsers and operating systems have different ways of handling code. The smallest errors, like forgetting a semicolon or not closing a tag, may behave differently in different environments. Some browsers may render the component easily, while others may throw errors or not show anything at all. This can be pointed out with the help of cross-browser testing. Cross-browser testing is also necessary for example in javascript code we have a new feature but old browsers don't support it. this can be also figured out while testing.\n","section":"front-end"},{"title":"Why do we use unit testing?","content":"\nUnit test provide a way to test small units of code independently of the larger system. This is useful to check that an application is meeting its requirements, and to ensure that the code is working as expected.\n\n**Benefits of unit testing:**\n\n 1. It is a good way to test small units of code independently of the larger system.\n 2. Increases code readability.\n 3. improve deployment velocity.\n\n**Examples of Init testing in JS:**\n\n```javascript\nconst sum = (a, b) => a + b;\ndescribe('sum', () => {\n  it('should add two numbers', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n}\n```\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"Can you explain about web Accessibility ?","content":"\nAccessibility is also known as the ability of access, Web accessibility Is the ability of a user to use a web page, web application, or web service with their disabilities. In Example In HTML we use an image tag to display an image also we have an alt attribute in the image tag Which is used to display the image in case of the image is not found. This can be useful for people with disabilities to understand the content of the page. using their visual impairments devices.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What are sitemap in SEO?","content":"\nA sitemap provides information about the structure of your website. You’ll mostly use them to help crawlers and users navigate your site.\n\nSitemaps are available in XML (eXtensible Mark-up Language) or HTML format. XML files share important information about your website — like its internal links, backlinks, and page structure — in a language search engine crawlers understand.\n\nThese search engine crawlers (like Google’s bots) consider this data when deciding your website’s page authority and ranking on their SERPs.\n","section":"front-end","source":"https://www.semrush.com"},{"title":"Can you describe some SEO best practices or techniques ?","content":"\n- **Meta Descriptions**: A meta description is a brief summary of a page in the SERP (search engine results page) displayed below the title tag.\n\n- **Optimize Images**: Image are considered as important for the search engine to index. When an image is optimized, it is reduced in size of the page load time and image alt text is also most important for the search engine to index.\n\n- **Internal Linking Structure**: Internal links are important because they establish an information hierarchy for your website and also help Google get a deeper understanding of the content on your page\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"How can we use a multiply stylesheet?","content":"\nHandling multiple stylesheets is a common problem in web development. The solution is to use a single stylesheet that contains all of the rules for the different stylesheets. This can be done by combining all of the stylesheets into one stylesheet using a bundler like [Bower](http://bower.io/). or [Gulp](http://gulpjs.com/). Also, we can use the `@import` directive to import the stylesheets.\n\n```css\n@import \"reset\";\n@import \"base\";\n@import \"layout\";\n@import \"typography\";\n```\n","section":"front-end","source":"https://h5bp.org/"},{"title":"How can we improve website’s assets or resources?","content":"\ntheir are various ways to optimize the website assets.\n\n1. Use CDN(Content Delivery Network)\n2. Host website on Edge server.\n3. Minimize the number of JavaScript and CSS files\n4. Optimize the size of images.\n5. Use website caching.\n6. Reduce redirects.\n7. Use prefetching techniques\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"How many resources will a browser download from a given domain at a time?","content":"\nIt depends on the browser and how it is setup - firefox has controls for how many download threads to use, for example.\nThe different browsers (and versions) have different defaults as well.\n\nIE7 allowed only two concurrent connections per host. But most browsers today allow more than that. IE8 allows 6 concurrent connections, Chrome allows 6, and Firefox allows 8.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"How DOM is rendered?","content":"\nWhen a web page is loaded, the browser first reads the HTML text and constructs DOM Tree from it. Then it processes the CSS whether that is inline, embedded, or external CSS and constructs the CSSOM Tree from it. After these trees are constructed, then it constructs the Render-Tree from it. A Render-Tree is a tree of Render-Nodes that represents the final output of the page.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What does server side mean?","content":"\n`server side` means everything that happens on the server, instead of on the client. In the past, nearly all business logic ran on the server side, and this included rendering dynamic webpages, interacting with databases, identity authentication, and push notifications.\n","section":"front-end","source":"https://www.cloudflare.com/"},{"title":"Where is DOM stored?","content":"\nDOM (Document Object Model) is a Tree representation of the page, starting from the `<html>` tag, going down into every child, which are called nodes. It's kept in the browser memory, and directly linked to what you see in a page.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"Difference between MVC and MVVM?","content":"\nDifference between MVC and MVVM\n\n| MVC                                                 | MVVM                                                 |\n| --------------------------------------------------- | ---------------------------------------------------- |\n| ViewModel encapsulates presentation login and state | The controller is responsible for the business logic |\n| ViewModel is optional Pattern                       | Controller is a must                                 |\n| User hits the view first                            | User hits the controller first                       |\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What is the advantage of functional programming?","content":"\nFunctional programming (FP) is a type of paradigm or pattern in computer science. Everything is done with the help of functions in FP and the basic building blocks are functions only.\n\n- It reduces complex problems into simple pieces.\n- It helps us to debug the code quickly.\n- It helps us to solve problems by breaking down the problem into smaller and smaller pieces effectively in simpler way.\n- It improves modularity and reusability of the code.\n- Some programming languages support nested functions which improve maintainability of the code.\n\n**Example:**\n\n```javascript\nfunction add(a, b) {\n\treturn a + b\n}\n\nfunction multiply(a, b) {\n\treturn a * b\n}\n\nfunction subtract(a, b) {\n\treturn a - b\n}\n```\n","section":"front-end","source":"https://www.freecodecamp.org"},{"title":"Which is better XML or JSON?","content":"\n_JSON is best for simple applications,_ developed to satisfy simple requirements surrounding data interchange. XML is best for applications with complex requirements surrounding data interchange, such as in enterprise.\n\nDifferences between JSON and XML:\n| JSON | XML |\n| ---- | ---- |\n| JSON doesn't use end tags | XML uses end tags |\n| JSON can use arrays syntax | Normally XML can't have arrays syntax |\n| JSON parse is easier | XML parse is much more difficult |\n\n**Example of JSON:**\n\n```javascript\n{\n    \"name\": \"John\",\n    \"age\": 30,\n    \"cars\": [\n        \"Ford\",\n        \"BMW\",\n        \"Fiat\"\n    ]\n}\n```\n\n**Example of XML:**\n\n```xml\n<person>\n    <name>John</name>\n    <age>30</age>\n    <cars>\n        <car>Ford</car>\n        <car>BMW</car>\n        <car>Fiat</car>\n    </cars>\n</person>\n```\n","section":"front-end","source":"https://www.toptal.com/web/json-vs-xml-part-1"},{"title":"What is RESTful API?","content":"\nA REST API is an application programming interface (API) that provides the ability to read and write data from a server that conforms to the constraints of REST architectural style and allows the client to interact with the server in a uniform way.\n","section":"front-end","source":"https://www.redhat.com/en/topics/api/what-is-a-rest-api"},{"title":"What is meant by test coverage?","content":"\nTest coverage is defined as a technique which determines whether our test cases are actually covering the application code and how much code is exercised when we run those test cases. If there are 10 requirements and 100 tests created and if 90 tests are executed then test coverage is 90%\n","section":"front-end","source":"https://www.simform.com"},{"title":"What is integration testing?","content":"\nA testing team interacts with an app and its units via the user interface – by clicking on buttons and links, scrolling, swiping, etc. They don't need to know how code works or consider the backend part of the components. They can focus on the user interface and the interaction with the app to test the app and its functionality.\n","section":"front-end","source":"https://u-tor.com/topic/integration-testing"},{"title":"What does a templating engine do?","content":"\nA template engine enables you to use static template files in your application. At runtime, the template engine replaces variables in a template file with actual values, and transforms the template into an HTML file sent to the client. This approach makes it easier to design an HTML page.\n\nMost popular template engines are:\n\n- [Mustache](https://mustache.github.io/)\n- [Handlebars](https://handlebarsjs.com/)\n- [Twig](https://twig.sensiolabs.org/)\n- [Nunjucks](https://nunjucks.org/)\n- [Jinja](https://jinja.pocoo.org/)\n- [EJS](https://www.embeddedjs.com/)\n- [Dust](https://dustjs.com/)\n- [Liquid](https://www.liquidengine.com/)\n- [JSP](https://www.jsp.org/)\n- [pug](https://pugjs.org/)\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What means single-page application?","content":"\nA single-page application is an app that doesn't need to reload the page during its use and works within a browser. Think of the apps you use daily: Facebook, Maps, Gmail, Twitter, Google Drive, or even GitHub. All these are examples of a SPA\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What is DNS used for?","content":"\nDNS, or the Domain name system, translates a domain name into an IP address. for example, www.google.com is translated into an IP address of 0000.0000.0000.0001 this kind of IP address.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What does headless mean in software?","content":"\nHeadless software (e.g. \"headless browser\" or \"headless Linux\",) is software capable of working on a device without a graphical user interface. Such software receives inputs and provides output through other interfaces like network or serial port and is common on servers and embedded devices.\n","section":"front-end"},{"title":"Why do CORS occur?","content":"\nBrowser has an same-origin policy rule that prohibits cross-origin requests. This is because the browser's security model which allows to request resources from same origin only. When a browser requests a resource from a different origin, it has to send a CORS request to the server.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"Who benefits from accessibility?","content":"\nThe most obvious benefit of web accessibility is that it helps people with disabilities enjoy your website’s content, products, and services. However, the advantages of web accessibility aren’t limited to their immediate impact for people with disabilities — they also benefit Improving SEO, user experience, increasing usability, and more.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What is a web browser API?","content":"\nWeb API is provided by the browser to allow developers to interact with the browser and its features. For example, the [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API) allows you to access the user's location, and the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API) allows you to draw graphics and animations.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What is a static site generator?","content":"\nA static site generator is a tool that generates a full static HTML website based on raw data and a set of templates. Essentially, a static site generator automates the task of coding individual HTML pages and gets those pages ready to serve to users ahead of time. Because these HTML pages are pre-built, they can load very quickly in users' browsers.\n","section":"front-end","source":"https://www.cloudflare.com"},{"title":"What is a static website?","content":"\nA static website is made up of one or more HTML webpages that load the same way every time. Static websites contrast with dynamic websites, which load differently based on any number of changing data inputs, such as the user's location, the time of day, or user actions. While static webpages are simple HTML files that can load quickly, dynamic webpages require the execution of JavaScript code within the browser in order to render.\n","section":"front-end","source":"https://www.cloudflare.com"},{"title":"What are the pros and cons of using a static site generator?","content":"\n### **Pros**\n\n- **Performance:** Because static site generators create webpages in advance instead of on demand (as with a CMS), webpages load slightly faster in users' browsers.\n\n- **Customization:** Developers can create any template they want. They are not limited by the fields provided by a CMS, nor by a CMS's built-in templates.\n\n- **Lighter backend:** Static websites are lightweight and do not require as much code to run on the server side, whereas CMS-based websites constantly query the server side for content.\n\n### **Cons**\n\n- **Few or no pre-built templates:** The downside of unlimited customization is that it can take longer to get started. Many static site generators do not come with templates, and developers will have to spend a lot of time building them from scratch at first.\n-\n- **No user-friendly interface:** It is harder for non-developer users to publish content using a static site generator. There is no CMS interface, and working with raw unformatted data may be intimidating for users. In addition, developer support is often necessary for making website updates.\n","section":"front-end","source":"https://www.cloudflare.com/"},{"title":"What is Jamstack used for?","content":"\nJAMstack is an approach to frontend web development (the construction of content and interfaces that users interact with). It allows developers to quickly create and efficiently serve static websites to users.\n\nIn a JAMstack web application, as much HTML as possible is pre-built and stored in a content delivery network (CDN). Instead of running a monolithic backend application on the server side to generate dynamic content, dynamic components of the application are based on APIs. Ideally, this results in a much faster user experience and a much simpler developer experience.\n","section":"front-end","source":""},{"title":"What is Markdown?","content":"\nMarkdown is a widely used, simple markup language for formatting text. Many developers today prefer using Markdown to traditional HTML when coding content, and many static site generators support Markdown.\n","section":"front-end"},{"title":"What is a CDN?","content":"\nA content delivery network (CDN) refers to a geographically distributed group of servers which work together to provide fast delivery of Internet content. A CDN allows for the quick transfer of assets needed for loading Internet content including HTML pages, javascript files, stylesheets, images, and videos.\n","section":"front-end","source":"https://www.cloudflare.com"},{"title":"What are the benefits of using a CDN?","content":"\n- **Improving website load times**\n  CDN can improve website load times by caching content and serving it from the closest server to the user. This reduces the time it takes to load a website and improves the user experience.\n- **Reduce bandwidth costs**\n  Through caching and other optimizations, CDNs are able to reduce the amount of data an origin server must provide, thus reducing hosting costs for website.\n- **Improving website security**\n  CDNs can provide additional security by blocking malicious traffic and preventing DDoS attacks.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"How do I use headless browser?","content":"\nHeadless browsers are a web browser without a graphical user interface that can be controlled from a command line interface programmatically for the purpose of web page automation (e.g., functional testing, scraping, unit testing, etc.). Think of headless browsers as a browser that you can run programmatically from the command line that can retrieve and traverse web page code.\n\nThe most common headless browsers are:\n\n- Headless Chromium\n- Puppeteer\n","section":"front-end"},{"title":"How does a CDN work?","content":"\nAt its core, a CDN is a network of servers linked together with the goal of delivering content as quickly, cheaply, reliably, and securely as possible. In order to improve speed and connectivity, a CDN will place servers at the exchange points between different networks.\n\nA CDN is a network of servers that distributes content from an “origin” server throughout the world by caching content close to where each end user is accessing the internet via a web-enabled device. The content they request is first stored on the origin server and is then replicated and stored elsewhere as needed.\n","section":"front-end"},{"title":"What is difference between package json and package lock json?","content":"\nIn NodejS we have two files package.json and package-lock.json. Both files are used to manage dependencies of a project. But there is a difference between them.\n\n**Difference in Tabular Form**\n| package.json | package-lock.json |\n| :-------------------------------------------------------- | :------------------------------------------------------------- |\n| It contains basic information about the project. | It describes the exact tree that was generated to allow subsequent installs to have the identical tree. |\n| It is mandatory for every project. | It is automatically generated for those operations where npm modifies either node_modules tree or package.json. |\n| It records important metadata about the project. | It allows future devs to install the same dependencies in the project.\n| It contains information such as name, description, author, script, and dependencies. | It contains the name, dependencies, and locked version of the project.\n","section":"front-end","source":"https://www.geeksforgeeks.org/difference-between-package-json-and-package-lock-json-files/"},{"title":"Why Progressive Web Apps?","content":"\nProgressive Apps allow users to install app without going to app store. User will be able getting app experience immediately. Progressive app are now supported by all major browsers.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"How progressive web app works?","content":"\nThe progressive web app works with native web technologies. It works with service workers, and app manifest. Service workers are used to caching the app and making it available offline. App manifest is used to provide information about the app.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What is manifest JSON in web?","content":"\nThe web app manifest is a JSON file that tells the browser about your Progressive Web App and how it should behave when installed on the user's desktop or mobile device.\n\n**Example**\n\n```json\n{\n\t\"name\": \"Weather\",\n\t\"short_name\": \"Weather\",\n\t\"start_url\": \"/?source=pwa\",\n\t\"display\": \"standalone\",\n\t\"theme_color\": \"#2f3ba2\",\n\t\"background_color\": \"#2f3ba2\"\n}\n```\n\nHere we have a manifest file for a weather app. It has a name, a short name, a start URL, a display mode, a theme color, and a background color. now it's can getting appearance depending on the manifest file.\n","section":"front-end","source":"https://web.dev/add-manifest"},{"title":"What is nodejs?","content":"\nNode.js is an open-source, cross-platform, back-end, JavaScript runtime program that executes JavaScript codes outside of a web browser.\n","section":"front-end"},{"title":"What is nodejs used for?","content":"\nNode.js is most often used to easily build and scale network applications. Node.js creates models that are lightweight and efficient which are ideal for data-intensive and real-time applications.\n","section":"front-end"},{"title":"What DO module bundlers do?","content":"\nModule bundlers are the way to organize and combine many files of JavaScript code into one file. A JavaScript bundler can be used when your project becomes too large for a single file or when you're working with libraries that have multiple dependencies.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What is a package?","content":"\nA package is a reusable piece of software which can be downloaded from a global registry into a developer’s local environment. Each package may or may not depend on other packages.\n","section":"front-end","source":"https://www.freecodecamp.org/"},{"title":"What is gulp used for?","content":"\nGulp is a tool that helps us out with several tasks when it comes to web development. It's often used to do front end tasks like: Spinning up a web server. Reloading the browser automatically whenever a file is saved.\n","section":"front-end"},{"title":"What is WebView used for?","content":"\nWebviews are used by a native OS, in a native application, to run web pages. Think of a webview like an iframe or a single tab from a web browser that is embedded in a native application running on a device (e.g., iOS, android, windows).\n","section":"front-end"},{"title":"What is the benefit of software testing?","content":"\nA properly tested software product ensures dependability, security, and high performance, which leads to time savings, cost effectiveness, and customer satisfaction. It happens to be an integral part of the process.\n","section":"front-end"},{"title":"How does DNS work?","content":"\nThe process of DNS resolution is a bit like a phone book. When you want to call someone, you look up their number in the phone book. When you want to visit a website, you look up its IP address in the DNS.\n\nDNS resolution involves converting a hostname (such as www.example.com) into a computer-friendly IP address (such as 192.168.1.1). An IP address is given to each device on the Internet, and that address is necessary to find the appropriate Internet device.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What is serverless","content":"\nServer-less does not mean that there is no server. It means that the developer does not have to worry about the server. The server is managed by the cloud provider. The developer only needs to focus on the application logic.\n\nServerless is a cloud computing execution model in which the cloud provider dynamically manages the allocation and provisioning of servers. A serverless platform typically abstracts away the server and infrastructure management, and lets developers deploy code on demand. The serverless platform automatically scales the infrastructure up and down, and bills the developer based on the actual amount of resources consumed.\n\n**Some of the benefits of serverless are:**\n\n- No need to manage servers\n- No need to worry about scaling\n- No need to worry about security\n- No need to worry about availability\n- No need to worry about performance\n- No need to worry about cost\n- No need to worry about monitoring\n","section":"front-end"},{"title":"What is edge computing?","content":"\nEdge computing is a networking philosophy focused on bringing computing as close to the source of data as possible in order to reduce latency and bandwidth use\n","section":"front-end"},{"title":"What is SSL?","content":"\nSSL, or Secure Sockets Layer, is an encryption-based Internet security protocol. It is used to secure communications between a client and a server. SSL is used to protect sensitive information such as credit card numbers, social security numbers, and login credentials. It is also used to authenticate websites and ensure that the data being sent is not being intercepted by a third party.\n","section":"front-end"},{"title":"How does streaming work?","content":"\nJust like other data that's sent over the Internet, audio and video data is broken down into data packets. Each packet contains a small piece of the file, and an audio or video player in the browser on the client device takes the flow of data packets and interprets them as video or audio.\n","section":"front-end","source":"https://www.cloudflare.com/"},{"title":"What is HTTP live streaming (HLS)?","content":"\nHTTP live streaming (HLS) is one of the most widely used video streaming protocols. Although it is called HTTP \"live\" streaming, it is used for both on-demand streaming and live streaming. HLS breaks down video files into smaller downloadable HTTP files and delivers them using the HTTP protocol. Client devices load these HTTP files and then play them back as video.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What is web vitals ?","content":"\nIt's an way to measure and report the site performance. With this Help we can easily understand the performance of the site and can improve it. In browser we can see the performance of the site by using the developer tools.\n","section":"front-end","source":"https://web.dev/vitals/"},{"title":"What are the 3 Core Web Vitals?","content":"\nTo provide a good user experience. There are 3 stage we need to focus on. Loading, Interactivity and Visual Stability. In Core Web Vitals that are called as LCP, FID and CLS.\n","section":"front-end","source":"https://web.dev/vitals"},{"title":"What is the CSS box model?","content":"\nThe CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content.\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What is the difference HTTP and https?","content":"\nHTTPS is HTTP with encryption and verification. The only difference between the two protocols is that HTTPS uses TLS (SSL) to encrypt normal HTTP requests and responses, and to digitally sign those requests and responses. As a result, HTTPS is far more secure than HTTP.\n","section":"front-end"},{"title":"What are the SEO best practices","content":"\n1. Use a descriptive title\n2. Optimize meta description\n3. Image optimization and page speed\n4. Build internal and external links structure\n5. Make URL search engine friendly\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"How can increase code manage maintainability ?","content":"\n1. Use human readable and sensible names\n2. Minimize nested and conditional logic\n3. Decouple and isolate code\n4. Remove unused code\n5. Separate configuration from code\n","section":"front-end","source":"https://developer.mozilla.org/en-US/"},{"title":"What is TLS (Transport Layer Security)?","content":"\nTLS is a cryptographic protocol that provides end-to-end security of data sent between applications over the Internet. It is mostly familiar to users through its use in secure web browsing.\n","section":"front-end","source":"https://www.cloudflare.com/"},{"title":"What is a network protocol?","content":"\nA network protocol is an established set of rules that determine how data is transmitted between different devices in the same network.\n","section":"front-end","source":"https://www.cloudflare.com/"},{"title":"What does a CMS actually do?","content":"\nA CMS, short for content management system, is a software application that allows users to build and manage a website without having to code it from scratch, or know how to code at all. With a CMS, you can create, manage, modify, and publish content in a user-friendly interface.\n","section":"front-end"}],"js":[{"title":"Can I redeclare let and const variables?","content":"\nNo, you cannot redeclare let and const variables. If you do, it throws below error\n\n```properties\nUncaught SyntaxError: Identifier 'someVariable' has already been declared\n```\n","section":"js","source":""},{"title":"Difference between Function Scope vs Block Scope in JavaScript?","content":"\n**Function Scope**:\nvariables defined inside a function are not accessible outside the function.\n\n```javascript\nfunction foo() {\n\tvar a = 1;\n\tfunction bar() {\n\t\tconsole.log(a); // 1\n\t}\n\tbar();\n}\n\nfoo(); // 1\n```\n\n**Block Scope :**\n\nThis scope restricts the variable that is declared inside a specific block, from access by the outside of the block. The let & const keyword facilitates the variables to be block scoped.\n\n```javascript\nif (true) {\n\tlet a = 1;\n\tconsole.log(a); // 1\n}\nconsole.log(a); // ReferenceError: a is not defined\n```\n","section":"js"},{"title":"Difference between Local and Global Variable ?","content":"\n**KEY DIFFERENCE**\n\n- Local variable is declared inside a function or block scope whereas Global variable is declared outside the function.\n- Local variables are created when the function has started execution and is lost when the function terminates, on the other hand, Global variable is created as execution starts and is lost when the program ends.\n- Local variable doesn’t provide data sharing whereas Global variable provides data sharing.\n- Local variables are stored on the stack whereas the Global variable are stored on a fixed location decided by the compiler.\n","section":"js"},{"title":"Difference between var and let in JavaScript?","content":"\nThe main difference between let and var is that scope of a variable defined with let is limited to the block in which it is declared while variable declared with var has the global scope. So we can say that var is rather a keyword which defines a variable globally regardless of block scope.\n\nAlso, one difference between var and let is variable with var can be redeclared to some other value while variable could not be redeclared if it is defined with let.\n","section":"js"},{"title":"How garbage collection works in JavaScript ?","content":"\nIn JavaScript, the memory management process is automated. The browser takes care of that thing for us. When a variable function or object is created in javascript the memory space is created for the reading and write operations. after the operations are done and no longer references are connected to the variable then the garbage collector release the variables from memory spaces. The Garbage Collection mechanism in JavaScript is governed by two algorithms\n\n**Reference Counting Algorithm**\nIt determines the usefulness of an object by finding out if the object is being referenced by some other object or not.\n\n**Mark and Sweep Algorithm.**\nIf an object is having zero references then it is effectively unreachable. So it is fit to be a garbage.\n","section":"js"},{"title":"List down some of the features of ES6 ?","content":"\nBelow are the list of some new features of ES6,\n\n- Support for constants or immutable variables\n- Block-scope support for variables, constants and functions\n- Arrow functions\n- Default parameters\n- Rest and Spread Parameters\n- Template Literals\n- Multi-line Strings\n- Destructuring Assignment\n- Enhanced Object Literals\n- Promises\n- Classes\n- Modules\n","section":"js"},{"title":"What are global variables ?","content":"\nGlobal variables are those that are available throughout the length of the code without any scope. The var keyword is used to declare a local variable but if you omit it then it will become global variable\n\n```javascript\nmsg = 'Hello'; // var is missing, it becomes global variable\n```\n","section":"js"},{"title":"What are  namespaces?","content":"\nThe namespace is a programming paradigm it's used to avoid variable naming collisions. Help to organize code into logical groups. JavaScript does not provide namespace by default. However, we can replicate this functionality by making a global object which can contain all functions and variables.\n\n**Example**\n\n```javascript\nconst service = {\n\tget: function () {\n\t\t// Get Api Implemented\n\t},\n\tput: function () {\n\t\t// put Api Implemented\n\t},\n\tpost: function () {\n\t\t// post Api Implmented\n\t}\n};\n\nservice.get();\nservice.post();\n```\n","section":"js"},{"title":"What are PWAs used for?","content":"\nProgressive Web Apps (PWAs) are web apps that use service workers, manifests, and other web-platform features in combination with progressive enhancement to give users an experience on par with native apps.\n","section":"js"},{"title":"What are raw strings?","content":"\nIt's used to get the raw string form of template literals without processing to escape sequences (e.g. \\n).\n\n```javascript\nvar str = `Hello world \\n Jon Snow`;\nconsole.log(str);\n// Hello world\n//  Jon Snow\n\nvar rawStr = String.raw`Hello world \\n Jon Snow`;\nconsole.log(rawStr); //Hello world \\n Jon Snow\n```\n","section":"js"},{"title":"What are some unique features of JavaScript ?","content":"\nThere are at least three great things about JavaScript:\n\n1. Full integration with HTML/CSS.\n2. Simple and easy to understand syntax.\n3. Supported by all modern browsers and enabled by default in all modern browsers.\n","section":"js"},{"title":"What are the benefit of event delegation?","content":"\nEvent Delegation is basically a pattern to handle events efficiently. Instead of adding an event listener to each and every similar element, we can add an event listener to a parent element and call an event on a particular target using the .target property of the event object.\n\n- No need to add many handlers.\n- When adding or removing elements, no need to add/remove handlers.\n","section":"js"},{"title":"What does dynamic mean in JavaScript?","content":"\nJavaScript is a loosely typed or dynamic language because variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned/reassigned with values of all types.\n\n```javascript\nlet age = 50; // age is a number now\nage = 'old'; // age is a string now\nage = true; // age is a boolean\n```\n","section":"js"},{"title":"What does it mean that JavaScript is \"dynamic\"?","content":"\nJavaScript is called a dynamic language because it doesn't just have a few dynamic aspects, pretty much everything is dynamic.\n\nAll variables are dynamic (both in type and existance), and even the code is dynamic. You can create new variables at runtime, and the type of variables is determined at runtime\n","section":"js"},{"title":"What is ES6 ?","content":"\nES6 stands for ECMAScript 6. ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, it was published in 2015, and is also known as ECMAScript 2015.\n","section":"js"},{"title":"what is function declaration and function expression ?","content":"\n**Function Declaration**\nA function created with a function declaration is a Function object and has all the properties, methods and behavior of Function\n\n```javascript\nfunction add(a, b) {\n\treturn a + b;\n}\n```\n\n**Function Expression**\nA Functions stored in variables do not need function names. They are always invoked (called) using the variable name.\n\n```javascript\nconst add = function (a, b) {\n\treturn a + b;\n};\n```\n","section":"js"},{"title":"What is Hoisting ?","content":"\nIn JavaScript, Hoisting is the default behavior of moving all the declarations at the top of the scope before code execution. Basically, it gives us an advantage that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local.\n\nIt allows us to call functions before even writing them in our code.\n\nNote: JavaScript only hoists declarations, not the initializations.\n\nJavaScript allocates memory for all variables and functions defined in the program before execution. [Reference](https://www.geeksforgeeks.org/javascript-hoisting/)\n","section":"js"},{"title":"What is JavaScript?","content":"\nJavascript is a synchronized single-threaded programming language.\n","section":"js"},{"title":"What is polyfill used for?","content":"\nPolyfills allow web developers to use an API regardless of whether or not it is supported by a browser, and usually with minimal overhead. Typically they first check if a browser supports an API, and use it if available, otherwise using their own implementation.\n","section":"js"},{"title":"What is scope of variable in JavaScript ?","content":"\nThe scope of a variable is the region of your program in which it is defined. JavaScript variables have only two scopes.\n\n- **Global Variables** − A global variable has global scope which means it can be defined anywhere in your JavaScript code\n- **Local Variables** − A local variable will be visible only within a function or block (let,const) where it is defined. Function parameters are always local to that function\n","section":"js"},{"title":"What is shallow copied in javascript?","content":"\nA shallow copy is a copy of the object itself. It does not copy the properties of the object. It just copies the reference to the object.\n\n```javascript\nconst obj = {\n\ta: 1,\n\tb: 2\n};\n\nconst obj2 = obj;\nobj2.a = 2;\n\nconsole.log(obj2); // {a: 2, b: 2}\nconsole.log(obj); // {a: 2, b: 2}\n```\n","section":"js"},{"title":"What is Stack overflow in Javascript?","content":"\nThe call stack has a maximum size assigned. Stack Overflow occurs when the number of function calls added to the stack increases the stack’s maximum limit (the call stack has a maximum size). A classic example to cause such a situation is Recursion. Recursion is a process in which a function calls itself until a terminating condition is found.\n\n```javascript\nfunction recursion() {\n\trecursion(); //a function calling itself\n}\nrecursion();\n```\n","section":"js"},{"title":"What is the aim of the let keyword?","content":"\nlet allows you to declare variables that are limited to the scope of a block statement, or expression on which it is used, unlike the var keyword, which declares a variable globally, or locally to an entire function regardless of block scope.\n\n```js\nfunction varTest() {\n\tvar x = 1;\n\t{\n\t\tvar x = 2; // same variable!\n\t\tconsole.log(x); // 2\n\t}\n\tconsole.log(x); // 2\n}\n\nfunction letTest() {\n\tlet x = 1;\n\t{\n\t\tlet x = 2; // different variable\n\t\tconsole.log(x); // 2\n\t}\n\tconsole.log(x); // 1\n}\n```\n","section":"js"},{"title":"What is the Call Stack in JavaScript ?","content":"\nThe call stack is used by JavaScript to keep track of multiple function calls. It is like a real stack in data structures where data can be pushed and popped and follows the Last In First Out (LIFO) principle. We use call stack for memorizing which function is running right now. The below example demonstrates the call stack.\n","section":"js"},{"title":"What is the creation phase and execution phase in Javascript?","content":"\n**Creation Phase**\nIt picks all function declarations and stores them in memory with their reference. Also picks all variables and assigns undefined to them.\n\n**Execution Phase**\nIn that phase read the code line by line and assigns variable values. and execute functions.\n","section":"js"},{"title":"What is the difference between DOM and BOM?","content":"\nThey're just different objects you're dealing with:\n\n**DOM**\n\nThe DOM is the **Document object model** which is deals with the document, the HTML elements themselves, e.g `document` and all traversal you would do in it, events, etc.\n\n**BOM**\n\nThe BOM is the Browser Object Model, which deals with browser components aside from the document, like history, location, navigator and screen (as well as some others that vary by browser).\n\n| BOM                                                                               | DOM                                                      |\n| --------------------------------------------------------------------------------- | -------------------------------------------------------- |\n| Is Browser Object Model                                                           | Is Document Object Model                                 |\n| Used for access and manipulation of the browser window                            | Used to manipulate the HTML document.                    |\n| No standard set of rules, each browser has its own standards for implementing BOM | Has a set standard of rules to be used across documents. |\n","section":"js"},{"title":"What is the difference between java and javascript","content":"\nBoth are totally unrelated programming languages and no relation between them. Java is statically typed, compiled, runs on its own VM. Whereas Javascript is dynamically typed, interpreted, and runs in a browser and nodejs environments. Let's see the major differences in a tabular format,\n\n| Feature     | Java                           | JavaScript                                            |\n| ----------- | ------------------------------ | ----------------------------------------------------- |\n| Typed       | It's a strongly typed language | It's a dynamic typed language                         |\n| Paradigm    | Object oriented programming    | Prototype based programming                           |\n| Scoping     | Block scoped                   | Function-scoped                                       |\n| Concurrency | Thread based                   | event based                                           |\n| Memory      | Uses more memory               | Uses less memory. Hence it will be used for web pages |\n","section":"js"},{"title":"What is the difference between Shallow and Deep copy","content":"\n**Shallow Copy:** Shallow copy is a bitwise copy of an object. A new object is created that has an exact copy of the values in the original object. If any of the fields of the object are references to other objects, just the reference addresses are copied i.e., only the memory address is copied.\n\n```javascript\nvar empDetails = {\n\tname: 'John',\n\tage: 25,\n\texpertise: 'Software Developer'\n};\n```\n\nto create a duplicate\n\n```javascript\nvar empDetailsShallowCopy = empDetails; //Shallow copying!\n```\n\nif we change some property value in the duplicate one like this:\n\n```javascript\nempDetailsShallowCopy.name = 'Johnson';\n```\n\nThe above statement will also change the name of empDetails, since we have a shallow copy. That means we're losing the original data as well.\n\n**Deep copy:** A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers.\n\n```javascript\nvar empDetails = {\n\tname: 'John',\n\tage: 25,\n\texpertise: 'Software Developer'\n};\n```\n\nCreate a deep copy by using the properties from the original object into new variable\n\n```javascript\nvar empDetailsDeepCopy = {\n\tname: empDetails.name,\n\tage: empDetails.age,\n\texpertise: empDetails.expertise\n};\n```\n\nNow if you change empDetailsDeepCopy.name, it will only affect empDetailsDeepCopy & not empDetails\n","section":"js"},{"title":"What is the Temporal Dead Zone (TDZ) in JavaScript?","content":"\nA temporal dead zone (TDZ) is the area of a block where a variable is inaccessible until the moment the computer completely initializes it with a value.\n\n```js\nfunction somemethod() {\n\tconsole.log(counter1); // undefined\n\tconsole.log(counter2); // ReferenceError\n\tvar counter1 = 1;\n\tlet counter2 = 2;\n}\n```\n","section":"js"},{"title":"What is use strict mode?","content":"\nECMAScript 5 introduced the concept of \"strict mode\" . It allows you to place a program, or a function, in a \"strict\" operating context. This strict context prevents certain actions from being taken and throws more exceptions . Its main purpose is to do more checking.\n\n**With Strict Mode**\n\n```javascript\n'use strict';\nusername = 'Jon';\nconsole.log(username);\n// Uncaught ReferenceError: username is not defined\n```\n\n**WithOut Strict Mode**\n\n```javascript\nusername = 'Jon';\nconsole.log(username);\n//Jon\n```\n","section":"js"},{"title":"What paradigm is Javascript ?","content":"\nJavaScript is a multi-paradigm language, supporting imperative/procedural programming, Object-Oriented Programming and functional programming. JavaScript supports Object-Oriented Programming with prototypical inheritance.\n","section":"js"},{"title":"when does  document load  get executed?","content":"\nThe load event is fired when the whole page has loaded, including all dependent resources(stylesheets, images).\n","section":"js"},{"title":"when does DOMContentLoaded get executed?","content":"\nwhen the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading\n","section":"js"},{"title":"Why should we use ES6 classes?","content":"\nES6 classes are syntactic sugar for the prototypical class system we use today. They make code more concise and self-documenting, which is reason enough to use them.\n\n- The syntax is more clear and less error-prone\n- The syntax is also way more clean and easier to understand.\n- Setting up inheritance is really easy.\n- You can inherit from Array, which wasn't possible before.\n- In a subclass, calling a parent's function is very easy: just type super.\n\n**WithOut ES6 class:**\n\n```javascript\nvar Foo = (function () {\n\tfunction Foo(bar) {\n\t\tthis._bar = bar;\n\t}\n\n\tFoo.prototype.getBar = function () {\n\t\treturn this._bar;\n\t};\n\n\treturn Foo;\n})();\n```\n\n**With ES6 class:**\nThe syntax is also way more clean and easier to understand.\n\n```javascript\nclass Foo {\n\tconstructor(bar) {\n\t\tthis._bar = bar;\n\t}\n\n\tgetBar() {\n\t\treturn this._bar;\n\t}\n}\n```\n","section":"js"},{"title":"How do you load CSS and JS files dynamically ?","content":"\nYou can create both link and script elements in the DOM and append them as children to the head tag. Let's create a function to add script and style resources as below,\n\n```javascript\nfunction loadAssets(filename, filetype) {\n\tif (filetype == 'css') {\n\t\t// External CSS file\n\t\tvar fileReference = document.createElement('link');\n\t\tfileReference.setAttribute('rel', 'stylesheet');\n\t\tfileReference.setAttribute('type', 'text/css');\n\t\tfileReference.setAttribute('href', filename);\n\t} else if (filetype == 'js') {\n\t\t// External JavaScript file\n\t\tvar fileReference = document.createElement('script');\n\t\tfileReference.setAttribute('type', 'text/javascript');\n\t\tfileReference.setAttribute('src', filename);\n\t}\n\tif (typeof fileReference != 'undefined')\n\t\tdocument.getElementsByTagName('head')[0].appendChild(fileReference);\n}\n```\n","section":"js"},{"title":"How do you run multiple promises together?","content":"\nHandle multiple promises and complete each one before starting the next one. The `Promise.all` It takes an array of promises and returns a single promise.\n\n```javascript\nconst promiseOne = new Promise((resolve, reject) => {\n\tsetTimeout(() => {\n\t\tresolve('one');\n\t}, 1000);\n});\n\nconst promiseTwo = new Promise((resolve, reject) => {\n\tsetTimeout(() => {\n\t\tresolve('two');\n\t}, 2000);\n});\n\nconst promiseThree = new Promise((resolve, reject) => {\n\tsetTimeout(() => {\n\t\tresolve('three');\n\t}, 3000);\n});\n\nconst resolved = Promise.all([promiseOne, promiseTwo, promiseThree]).then((results) => {\n\tconsole.log(results);\n});\n```\n","section":"js"},{"title":"Polyfill promise.all function in js ?","content":"\n```javascript\nfunction all(promises) {\n\treturn new Promise((resolve, reject) => {\n\t\tlet count = 0;\n\t\tlet results = [];\n\t\tpromises.forEach((promise, index) => {\n\t\t\tpromise\n\t\t\t\t.then((result) => {\n\t\t\t\t\tresults[index] = result;\n\t\t\t\t\tcount++;\n\t\t\t\t\tif (count === promises.length) {\n\t\t\t\t\t\tresolve(results);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\t});\n}\n```\n\n```javascript\nconst promiseOne = new Promise((resolve, reject) => {\n\tsetTimeout(() => {\n\t\tresolve('one');\n\t}, 1000);\n});\n\nconst promiseTwo = new Promise((resolve, reject) => {\n\tsetTimeout(() => {\n\t\tresolve('two');\n\t}, 2000);\n});\n\nconst promiseThree = new Promise((resolve, reject) => {\n\tsetTimeout(() => {\n\t\tresolve('three');\n\t}, 3000);\n});\n\nconst resolved = all([promiseOne, promiseTwo, promiseThree]).then((results) => {\n\tconsole.log(results);\n});\n```\n","section":"js"},{"title":"What are the 3 states of promise?","content":"\n**Pending**\nthe promise has been created, and the asynchronous function it's associated with has not succeeded or failed yet. This is the state your promise is in when it's returned from a call to fetch(), and the request is still being made.\n\n**Fulfilled**\nThe asynchronous function has succeeded. When a promise is fulfilled, its then() handler is called.\n\n**Rejected**\nThe asynchronous function has failed. When a promise is rejected, its catch() handler is called.\n","section":"js"},{"title":"How to Scoping variables in JavaScript switch statement?","content":"\nwhen you declare variable in case statements, they would hoisted to the switch statement. I would show you a very simple way to make sure the variables you declare in your case statements can only be accessed from that block.\n\nOne important point to remember is that each case statement is not a block. Variables declared anywhere within the switch statement is locally scoped to the switch statement.\n\n```js\n    let number  = 2;\n\n    switch (number) {\n        case 1:\n            let message = \"first number\";\n            console.log(message)\n            break;\n        case 2:\n            let message = \"second number\";\n            console.log(message)\n            break;\n    case 3:\n            let message = \"third number\";\n            console.log(message)\n            break;\n        default\n            let message = \"second number\";\n            console.log(message)\n            break;\n    }\n\n    //This throws a syntax error: identifier \"message\"\n    //has already been declared\n```\n\nThere are cases where you might need yo hold different variable values in each of the case statements. It's possible to keep a variable scoped to the case statement. There's a very easy fix for this, Let's solve this\n\n```js\n    let number  = 2;\n\n    switch (number) {\n        case 1: { // braces make the case statement a block\n            let message = \"number\" + number; // this remains in this block\n            console.log(message)\n            break;\n        }\n        case 2: {\n            let message =  \"number\" + number; // this is a valid syntax\n            console.log(message)\n            break;\n        }\n        case 3: {\n            let message = \"number\" + number;\n            console.log(message)\n            break;\n        }\n        default\n            let message =  \"number\" + number;\n            console.log(message)\n            break;\n    }\n```\n\nBy wrapping a block in braces, any variable declared within that block is only visible within the block,and is garbage collected once the block ends.\n\nWith this syntax, each of these variables are declared within a block, scoped away from each other. They can only be accessed from within the case scope and thrown away once the block ends.\n\n[Reference](https://dev.to/robogeek95/scoping-variables-in-the-switch-statement-1gig)\n","section":"js"},{"title":"What are falsy values in JavaScript?","content":"\nThose are Essentials falsy values in Javascript.\n\n```javascript\nfalse;\nundefined;\nnull;\nNaN;\n0 + 0 - 0;\n('');\n''``;\n```\n","section":"js"},{"title":"What is strict mode?","content":"\nStrict mode is a way to tell the JavaScript engine to be more strict when running your code. Strict mode changes some of the ways that JavaScript treats your code to be more predictable and to prevent you from making errors. Strict mode is not a way to enforce the coding style of your code, but it can help you to be more predictable.\n\nStrict mode can be enabled by adding the strict mode directive at the beginning of your code or before any statement which you want to be in strict mode.\n\n**Global scope strict mode**\n\n```javascript\n'use strict';\n```\n\n**Local scope strict mode**\n\n```javascript\nfunction foo() {\n\t'use strict';\n\treturn this;\n}\n```\n","section":"js"},{"title":"What is the purpose of the finally?","content":"\nThe final statement executes after the try..catch statement gets a pass. Regardless of the result. If get an error on the catch block or closed on the try block. it will always get executed.\n\n```javascript\nvar result = 18;\ntry {\n\tif (result > 10) {\n\t\tthrow new Error('result is too large');\n\t}\n} catch (e) {\n\tconsole.log(e);\n} finally {\n\tconsole.log('finally');\n}\n```\n\n**Output**\n\n```properties\n Error: result is too large\n finally\n```\n","section":"js"},{"title":"What is the use of break and continue statement in JavaScript?","content":"\n**Break Statement**\nThe break statement is used at an instance whereby satisfying the condition being specified, the whole loop gets skipped and it takes you out of the loop. In other words, the loop is stopped\n\n```javascript\nfor (i = 1; i <= 8; i++) {\n\tif (i === 5) break;\n\tconsole.log(i);\n}\n```\n\n**Continue**\nLet’s consider a situation where we are in a loop and we desire to break one iteration whenever a specified condition occurs and then we continue with the next iteration in the loop.\n\nThe Continue statement is going to fulfill that desire for us. Unlike break, the continue statement “jumps over” to the next iteration/execution of the loop.\n\nWhenever a continue statement takes place, the loop condition is checked to see if the condition is satisfied or true and if so, it goes towards the next iteration.\n\n```javascript\nfor (i = 1; i < 8; i++) {\n\tif (i === 3 || i === 4) continue;\n\tconsole.log(i);\n}\n```\n","section":"js"},{"title":"Differences between for(..in) and for(..of) statement in JavaScript?","content":"\n**for (..in) loop**\nThe JavaScript for (..in) statement loops through the enumerable properties of an object. The loop will iterate over all enumerable properties of the object.\n\n```javascript\nconst obj = {\n\ta: 1,\n\tb: 2,\n\tc: 3\n};\n\nfor (let key in obj) {\n\tconsole.log(key);\n}\n```\n\n**for (..of) loop**\nThis for (..of) statement lets you loop over the data structures that are iterable such as Arrays, Strings, Maps, Node Lists, and more. It calls a custom iteration hook with instructions to execute on the value of each property of the object.\n\n```javascript\nconst obj = {\n\ta: 1,\n\tb: 2,\n\tc: 3\n};\n\nfor (let key of Object.entries(obj)) {\n\tconsole.log(key);\n}\n```\n","section":"js"},{"title":"How do you create an infinite loop?","content":"\nWe can create an infinity loop using for loop without expression and also a while loop gave the starting condition true.\n\n```javascript\nfor (;;) {}\nwhile (true) {}\n```\n","section":"js"},{"title":"What is for...of statement","content":"\nThe JavaScript for of statement loops through the values of an iterable object. It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more:\n\n```javascript\nconst cars = ['BMW', 'Volvo', 'Mini'];\n\nlet text = '';\nfor (let x of cars) {\n\ttext += x;\n}\n\n// BMW\n// Volvo\n// Mini\n```\n","section":"js"},{"title":"What is the difference between ( for... in ) and ( for... of ) statements?","content":"\n**for in** loops over enumerable property names of an object.\n\n```javascript\nvar obj = {\n\ta: 1,\n\tb: 2,\n\tc: 3\n};\n\nfor (var key in obj) {\n\tconsole.log(key);\n}\n\n// a\n// b\n// c\n```\n\n**for of** (new in ES6) does use an object-specific iterator and loops over the values generated by that.\n\n```javascript\nvar obj = {\n\ta: 1,\n\tb: 2,\n\tc: 3\n};\n\nfor (let item of Object.entries(obj)) {\n\tconsole.log(item);\n}\n\n// Output:\n// [ 'a', 1 ]\n// [ 'b', 2 ]\n// [ 'c', 3 ]\n```\n","section":"js"},{"title":"Why we use do while loop in JavaScript?","content":"\nThe do..while loop is the variant of the while loop. It's executed once before checking the condition is true. Then it will repeat the condition as long as the condition is true.\n\n```javascript\nlet number = 1;\n\ndo {\n\tnumber++;\n\tconsole.log(number);\n} while (number < 10);\n```\n","section":"js"},{"title":"What is the first-class function in Javascript?","content":"\nA programming language is said to have First-class functions when functions in that language are treated like any other variable. For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable.\n\n**Example**\n\n```js\nfunction sayHello() {\n\treturn 'Hello, ';\n}\nfunction greeting(helloMessage, name) {\n\tconsole.log(helloMessage() + name);\n}\n// Pass `sayHello` as an argument to `greeting` function\ngreeting(sayHello, 'JavaScript!');\n// Hello, JavaScript!\n```\n","section":"js"},{"title":"How do higher order functions work ?","content":"\nA function that receives another function as an argument or that returns a new function or both is called Higher-order functions. Higher-order functions are only possible because of the First-class function.\n\n```js\nconst greet = function (name) {\n\treturn function (m) {\n\t\tconsole.log(`Hi!! ${name}, ${m}`);\n\t};\n};\n\nconst greet_message = greet('ABC');\ngreet_message('Welcome To GeeksForGeeks');\n```\n\nWe can also call the function like this also — greet(‘ABC’)(‘Welcome To GeeksForGeeks’), It will also give the same output.\n\n```console\nHi!! ABC, Welcome To GeeksForGeeks\n```\n","section":"js"},{"title":"How to Use the Call, Apply, and Bind ?","content":"\n#### Call\n\nCall invokes the function and allows you to pass in arguments one by one.\n\n```js\nconst user = {\n\tname: 'Jobayer Hossain'\n};\n\nfunction greet(greet, ask) {\n\treturn `Hello ${greet} ${this.name} ${ask}`;\n}\n\nconst userJonCall = greet.call(user, 'Sir,', 'How are you ?');\n// Hello Sir, Jobayer Hossain How are you ?\n```\n\n#### Apply\n\nApply invokes the function and allows you to pass in arguments as an array.\n\n```js\nconst user = {\n\tname: 'Jobayer Hossain'\n};\n\nfunction greet(greet, ask) {\n\treturn `Hello ${greet} ${this.name} ${ask}`;\n}\n\nconst userJonApply = greet.apply(user, ['Sir', 'How are your?']);\n// Hello Sir, Jobayer Hossain How are you?\n```\n\n#### Bind\n\nBind returns a new function, allowing you to pass in a this array and any number of arguments.\n\n```js\nconst user = {\n\tname: 'Jobayer Hossain'\n};\n\nfunction greet(greet, ask) {\n\treturn `Hello ${greet} ${this.name} ${ask}`;\n}\n\nconst userJonBind = greet.bind(user);\nconst userJonResponse = userJonBind('Sir', 'How are your?');\n// Hello Sir, Jobayer Hossain How are you ?\n```\n","section":"js"},{"title":"What are default values in the destructuring assignments?","content":"\nWhen destructuring happens the property's initial value was undefined now we can assign an initial value to the restructuring property instant of holding it undefined.\n\n**Arrays destructuring:**\n\n```javascript\nvar x, y, z;\n\n[x = 2, y = 4, z = 6] = [10];\nconsole.log(x); // 10\nconsole.log(y); // 4\nconsole.log(z); // 6\n```\n\n**Objects destructuring:**\n\n```javascript\nvar { x = 2, y = 4, z = 6 } = { x: 10 };\n\nconsole.log(x); // 10\nconsole.log(y); // 4\nconsole.log(z); // 6\n```\n","section":"js"},{"title":"What are Events in JavaScript?","content":"\nJavascript has events that provide a dynamic interface to a webpage. These events are connected to elements in the Document Object Model(DOM).\n","section":"js"},{"title":"What does the isNaN () function?","content":"\nThe isNaN() function is used to determine whether a value is an illegal number (Not-a-Number) or not. i.e, This function returns true if the value equates to NaN. Otherwise it returns false.\n\n```javascript\nisNaN('Hello'); //true\nisNaN('100'); //false\n```\n","section":"js"},{"title":"What is a arrow function in JavaScript?","content":"\nArrow functions have a few important distinctions in how they work that distinguish them from traditional functions, as well as a few syntactic enhancements. The biggest functional differences are that arrow functions do not have their own this binding or prototype and cannot be used as a constructor. Arrow functions can also be written as a more compact alternative to traditional functions, as they grant the ability to omit parentheses around parameters and add the concept of a concise function body with implicit return.\n\n#### Cleaner Syntax\n\n```js\nconst sum = (a, b) => {\n\treturn a + b;\n};\nsum(10, 10); // 20\n```\n\n#### `this` Bindings\n\n```js\nconst sum = () => {\n\treturn this;\n};\nsum(); // [object Window]\n```\n\n### Constructor\n\n```js\nconst person = () => {};\nconst p = new person();\n// Uncaught TypeError: person is not a constructor\n```\n","section":"js"},{"title":"What is a pure function ?","content":"\nA Pure function is a function where the return value is only determined by its arguments without any side effects.\n\n```js\nfunction sum(a, b) {\n\treturn a + b;\n}\n\nsum(10, 20); // 30\n```\n","section":"js"},{"title":"What is a rest parameter ?","content":"\nRest parameter is a way to provide handled uncountable params in a function. It's useful when we don't know how many parameters are coming from it's accept all unknown parameters as an array of values.\n\n```javascript\nfunction getNames(...rest) {\n\tconsole.log(rest);\n}\n\nconsole.log(getNames('John', 'Doe', 'Jane', 'Doe'));\n// ['John', 'Doe', 'Jane', 'Doe']\n```\n","section":"js"},{"title":"what is arrow function?","content":"\nArrow function is a function expression that has a shorter syntax than function declaration. And it is also a function expression that has no name. Arrow function does not have own this, arguments, super, or new.target.\n\n```javascript\nfunction add(a, b) {\n\treturn a + b;\n}\n\nconst add = (a, b) => {\n\treturn a + b;\n};\n```\n","section":"js"},{"title":"What is currying function in JavaScript ?","content":"\nIt is a technique in functional programming, transforming of the function of multiple arguments into several functions of a single argument in sequence. It is also called nested function is ECMAScript\n\n```js\n// Noncurried version\nconst add = (a, b, c) => {\n\treturn a + b + c;\n};\nconsole.log(add(2, 3, 5)); // 10\n\n// Curried version\nconst addCurry = (a) => {\n\treturn (b) => {\n\t\treturn (c) => {\n\t\t\treturn a + b + c;\n\t\t};\n\t};\n};\nconsole.log(addCurry(2)(3)(5)); // 10\n```\n","section":"js"},{"title":"What is destructuring assignment ?","content":"\nThe destructuring assignment is a JavaScript expression that makes it possible to unpack values from arrays or properties from objects into distinct variables.\n\n```javascript\nvar [one, two, three] = ['JAN', 'FEB', 'MARCH'];\n\nconsole.log(one); // \"JAN\"\nconsole.log(two); // \"FEB\"\nconsole.log(three); // \"MARCH\"\n```\n\n```javascript\nvar { name, age } = { name: 'John', age: 32 };\n\nconsole.log(name); // John\nconsole.log(age); // 32\n```\n","section":"js"},{"title":"What is eval used for ?","content":"\nThe eval() function evaluates JavaScript code represented as a string and returns its completion value. The source is parsed as a script.\n\n```javascript\nconsole.log(eval('2 + 2'));\n// 4\n```\n","section":"js"},{"title":"What is function default parameters?","content":"\nDefault parameters are parameters that are set to a default value if they are not passed to the function. Default parameters are useful for functions that have optional parameters. Default parameters are also useful for functions that have multiple parameters with default values.\n\n```javascript\n// Example\nfunction greet(name = 'Anonymous') {\n\tconsole.log('Hello ' + name + '!');\n}\n\ngreet(); // Hello Anonymous!\n```\n","section":"js"},{"title":"What is function rest parameters?","content":"\nRest parameters are used to represent an indefinite number of arguments. Rest parameters are not mandatory. It is useful when you want to represent an indefinite number of arguments as an array.\n\n```javascript\nfunction sum(...args) {\n\treturn args.reduce((a, b) => a + b, 0);\n}\n\nconsole.log(sum(1, 2, 3, 4, 5)); // 15\n```\n","section":"js"},{"title":"What is IIFE(Immediately Invoked Function Expression) ?","content":"\nIIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The signature of it would be as below,\n\n```js\n(function () {\n\t// logic here\n})();\n```\n\nThe primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. i.e, If you try to access variables with IIFE then it throws an error as below,\n\n```js\n(function () {\n\tvar message = 'IIFE';\n\tconsole.log(message);\n})();\nconsole.log(message); //Error: message is not defined\n```\n","section":"js"},{"title":"What is memoization ?","content":"\nMemoization is a programming technique which attempts to increase a function’s performance by caching its previously computed results. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. Otherwise the function is executed and then the result is added to the cache. Let's take an example of adding function with memoization,\n\n```javascript\nconst memoizAddition = () => {\n\tlet cache = {};\n\treturn (value) => {\n\t\tif (value in cache) {\n\t\t\tconsole.log('Fetching from cache');\n\t\t\treturn cache[value]; // Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.\n\t\t} else {\n\t\t\tconsole.log('Calculating result');\n\t\t\tlet result = value + 20;\n\t\t\tcache[value] = result;\n\t\t\treturn result;\n\t\t}\n\t};\n};\n// returned function from memoizAddition\nconst addition = memoizAddition();\nconsole.log(addition(20)); //output: 40 calculated\nconsole.log(addition(20)); //output: 40 cached\n```\n","section":"js"},{"title":"What is recursion and why it is used?","content":"\nA function that calls itself is called a recursive function. In some ways, recursion is analogous to a loop. Both execute the same code multiple times, and both require a condition (to avoid an infinite loop, or rather, infinite recursion in this case).\n\n```javascript\nconst factorial = function fac(n) {\n\treturn n < 2 ? 1 : n * fac(n - 1);\n};\n\nfactorial(3);\n```\n","section":"js"},{"title":"What is the arguments object?","content":"\nThe arguments object is an array-like object containing the arguments passed to a function. The arguments object is a local variable within a function and is not accessible from outside the function.\n\n```javascript\n// Example\nfunction sum() {\n\tvar sum = 0;\n\tfor (var i = 0; i < arguments.length; i++) {\n\t\tsum += arguments[i];\n\t}\n\treturn sum;\n}\nsum(1, 2, 3); // 6\n```\n","section":"js"},{"title":"What is the purpose of setTimeout() function in JavaScript ?","content":"\nThe setTimeout() method allows you to execute a piece of code after a certain amount of time has passed. You can think of the method as a way to set a timer to run JavaScript code at a certain time.\n\nFor example, the code below will print \"Hello World\" to the JavaScript console after 2 seconds have passed:\n\n```javascript\nsetTimeout(function () {\n\tconsole.log('Hello World');\n}, 2000);\n\nconsole.log('setTimeout() example...');\n```\n\nYou can also pass additional parameters to the setTimeout() method that you can use inside the function as follows:\n\n```javascript\nfunction greeting(name, role) {\n\tconsole.log(`Hello, my name is ${name}`);\n\tconsole.log(`I'm a ${role}`);\n}\n\nsetTimeout(greeting, 3000, 'Nathan', 'Software developer');\n```\n","section":"js"},{"title":"What is the use of preventDefault method","content":"\nThe preventDefault() method cancels the event if it is cancelable, meaning that the default action or behaviour that belongs to the event will not occur. For example, prevent form submission when clicking on submit button and prevent opening the page URL when clicking on hyperlink are some common use cases.\n\n```javascript\ndocument.getElementById('link').addEventListener('click', function (event) {\n\tevent.preventDefault();\n});\n```\n","section":"js"},{"title":"What is throttling?","content":"\nThrottling is a technique used to limit the execution of an event handler function, even when this event triggers continuously due to user actions. The common use cases are browser resizing, window scrolling etc.\nThe below example creates a throttle function to reduce the number of events for each pixel change and trigger scroll event for each 100ms except for the first event.\n\n```js\nconst throttle = (fn, limit) => {\n\tlet isThrottled = false;\n\treturn (...args) => {\n\t\tif (isThrottled) return;\n\t\tisThrottled = true;\n\t\tfn.apply(this, args);\n\t\tsetTimeout(() => {\n\t\t\tisThrottled = false;\n\t\t}, limit);\n\t};\n};\nconst sum = (a) => {\n\tconsole.log(a);\n\treturn a + 10;\n};\nconst throttled = throttle(() => sum(10), 1000);\ndocument.body.addEventListener('click', () => throttled());\n```\n","section":"js"},{"title":"When closures are created in JavaScript ?","content":"\nWhen an inner function uses the outer function's variable, then closer is created in javascript.\n\n```javascript\n// Closure is not created example\nfunction addSquares(a, b) {\n\tfunction square(x) {\n\t\treturn x * x;\n\t}\n\treturn square(a) + square(b);\n}\n\n// Closure is created example\nfunction addSquares(a, b) {\n\tfunction square(x) {\n\t\treturn a * x;\n\t}\n\treturn square(a) + square(b);\n}\n```\n","section":"js"},{"title":"Where is anonymous function used?","content":"\nAnonymous functions are often arguments being passed to higher-order functions, or used for constructing the result of a higher-order function that needs to return a function. If the function is only used once, or a limited number of times, an anonymous function may be syntactically lighter than using a named function. An anonymous function can be useful for creating IIFE(Immediately Invoked Function)\n\n```javascript\nfunction (optionalParameters) {\n  //do something\n}\n\nconst myFunction = function(){ //Anonymous function assigned to a variable\n  //do something\n};\n\n[1, 2, 3].map(function(element){ //Anonymous function used as a callback function\n  //do something\n});\n```\n","section":"js"},{"title":"Why callback function is used?","content":"\nA callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.\n\n**Here is a quick example:**\n\n```javascript\nfunction greeting(name) {\n\talert('Hello ' + name);\n}\n\nfunction processUserInput(callback) {\n\tvar name = prompt('Please enter your name.');\n\tcallback(name);\n}\n\nprocessUserInput(greeting);\n```\n","section":"js"},{"title":"Difference Between undefined and null ?","content":"\n`undefined` is a variable that refers to something that doesn't exist, and the variable isn't defined to be anything. `null` is a variable that is defined but is missing a value.\n\n```javascript\nlet a;\nconsole.log(a); // undefined\n\nlet b = null;\nconsole.log(b); // null\n```\n","section":"js"},{"title":"Difference TypeError and ReferenceError ?","content":"\nA **ReferenceError** occurs when you try to use a variable that doesn't exist at all.\n\nA **TypeError** occurs when the variable exists, but the operation you're trying to perform is not appropriate for the type of value it contains. In the case where the detailed message says \"is not defined\", this can occur if you have a variable whose value is the special undefined value, and you try to access a property of it.\n","section":"js"},{"title":"How in operator works in javascript ?","content":"\nIt is used to check if a value is present in an array or not. It returns true if the value is present in the array and false if not.\n\n**Array Example**\n\n```javascript\nconst arr = [1, 2, 3, 4, 5];\nconsole.log(1 in arr); // true\nconsole.log(6 in arr); // false\n```\n\n**Example Object**\n\n```javascript\nconst obj = {\n\tname: 'John',\n\tage: 30\n};\nconsole.log('name' in obj); // true\nconsole.log('age' in obj); // true\nconsole.log('job' in obj); // false\n```\n","section":"js"},{"title":"How to delete an object property ?","content":"\nUsing the delete operator. THe delete operator deletes a property from an object. It returns true if the property was deleted, false if the property was not found.\n\n```javascript\nvar person = {\n\tname: 'John',\n\tage: 30\n};\n\ndelete person.age;\n\nconsole.log(person.age); // undefined\n```\n","section":"js"},{"title":"What does \"!--\" do in JavaScript?","content":"\nThat's not a special operator, it's 2 standard operators one after the other:\n\n- A prefix decrement (--)\n- A logical not (!)\n\n```javascript\nx = 1;\nif (!x) // false\nif (!--x) // becomes 0 and then uses the NOT operator,\n          // which makes the condition to be true\n```\n","section":"js"},{"title":"What is a debugger statement?","content":"\nThe debugger keyword is turned on, It stops the execution of JavaScript code. Otherwise, it has no effect.\n","section":"js"},{"title":"What is == and === in JavaScript?","content":"\nThe == and === operators are used to check the equality of two operands. The ‘==’ operator tests for abstract equality i.e. it does the necessary type conversions before doing the equality comparison.\nBut the ‘===’ operator tests for strict equality i.e it will not do the type conversion hence if the two values are not of the same type, when compared, it will return false.\n\n**==**\n\n```javascript\nvar a = 1;\nvar b = '1';\n\nif (a == b) {\n\tconsole.log('EQUAL');\n} else {\n\tconsole.log('NOT EQUAL');\n}\n// output: EQUAL\n```\n\n**===**\n\n```javascript\nvar a = 1;\nvar b = '1';\n\nif (a === b) {\n\tconsole.log('EQUAL');\n} else {\n\tconsole.log('NOT EQUAL');\n}\n// output: NOT EQUAL\n```\n","section":"js"},{"title":"What is assignment expression ?","content":"\nAssignment expression is an expression that has a left hand side and a right hand side. The left hand side is the variable that is assigned a value. The right hand side is the value that is assigned to the variable.\n\n**Example:**\n\n```javascript\nvar x = 5;\nvar y = x;\nconsole.log(y); // 5\n```\n\n**Example:**\n\n```javascript\nvar x = 5;\nvar y = x;\nx = 10;\nconsole.log(y); // 5\n```\n","section":"js"},{"title":"What is destructuring assignment?","content":"\nDestructuring assignment is a JavaScript feature that allows you to assign values to variables from arrays and objects. It is done by destructuring the array or object and then assigning the variables. It is useful when you want to assign a value to a variable from an array or object. For example, you can assign the first and last name of a person to separate variables.\n\n**Object Example:**\n\n```javascript\nconst person = {\n\tfirstName: 'John',\n\tlastName: 'Doe'\n};\n\nconst { firstName, lastName } = person;\nconsole.log(firstName); // John\nconsole.log(lastName); // Doe\n```\n\n**Array Example:**\n\n```javascript\nconst people = ['John', 'Doe', 'Jane', 'Doe'];\nconst [firstName, lastName, ...rest] = people;\nconsole.log(firstName); // John\nconsole.log(lastName); // Doe\nconsole.log(rest); // ['Jane', 'Doe']\n```\n","section":"js"},{"title":"What is immutability?","content":"\nImmutability is the property of data that never changes. It is the property of data that never changes. For example, a person's name is immutable. If you change a person's name, you can't change it back.\n\n```javascript\n'use strict';\nconst person = {\n\tname: 'John',\n\tage: 30\n};\n// Make it immutable\nObject.freeze(person);\n```\n","section":"js"},{"title":"What is NaN property?","content":"\nThe NaN property is a global property that represents \"Not-a-Number\" value. i.e, It indicates that a value is not a legal number. It is very rare to use NaN in a program but it can be used as return value for few cases\n","section":"js"},{"title":"What is nullish assignment?","content":"\nThe nullish assignment is a special operator that allows you to assign a value to a variable if the value is null or undefined. It is used to avoid the need to use an if statement to check if a variable is null or undefined. For example: var x = y ?? 'default'; // x is set to y if y is not null or undefined, otherwise x is set to 'default'.\n\n```javascript\nvar x = false;\nvar result = x ?? 'default';\nconsole.log(result); // false\n```\n\n```javascript\nvar x = undefined;\nvar result = x ?? 'default';\nconsole.log(result); // default\n```\n","section":"js"},{"title":"What is the ternary operator ?","content":"\nThe ternary operator is a short hand for an if statement. It is used to check if a condition is true or false and execute a different code block depending on the result. The syntax is: condition ? true code block : false code block.\n\n**Example In ternary operator:**\n\n```javascript\nvar age = prompt('What is your age?');\nvar ageInNumber = parseInt(age);\n\nvar message = ageInNumber >= 18 ? 'You are old enough to drive' : 'You are not old enough to drive';\nconsole.log(message);\n```\n\n**Example In if statement:**\n\n```javascript\nvar age = prompt('What is your age?');\nvar ageInNumber = parseInt(age);\n\nif (ageInNumber >= 18) {\n\tconsole.log('You are old enough to drive');\n} else {\n\tconsole.log('You are not old enough to drive');\n}\n```\n","section":"js"},{"title":"What undefined property indicates?","content":"\nA variable that has not been assigned a value is of type undefined. A method or statement also returns undefined if the variable that is being evaluated does not have an assigned value.\n\n```javascript\nlet x;\nif (typeof x === 'undefined') {\n\t// these statements execute\n}\n```\n","section":"js"},{"title":"What’s the double exclamation sign for in JavaScript?","content":"\nit's short way to cast a variable to be a boolean (true or false) value. The !! ensures the resulting type is a boolean (true or false).\n\n```javascript\n    console.log(!!\"foo\") --> true\n    console.log(!!null) --> false\n```\n","section":"js"},{"title":"Generate Random Number between 1 and 10 ?","content":"\n```javascript\nvar randomNumber = Math.floor(Math.random() * 10) + 1;\nconsole.log(randomNumber);\n```\n","section":"js"},{"title":"How do you check a value is a number?","content":"\nThe `isNaN()` method determines whether a value is an illegal number. If the value is not a number, then the method returns true. Otherwise, it returns false.\n\n**Example**\n\n```javascript\nvar x = '5';\nvar y = 'Hello';\n\nconsole.log(isNaN(x)); // false\nconsole.log(isNaN(y)); // true\n```\n","section":"js"},{"title":"How do you find the minimum and the maximum number of the array of numbers?","content":"\nThere are various ways to solve this problem. One of the simplest ways is to use built-in functions. and the other way is to use a loop and if-else statement.\n\n**Using built-in functions**\n\n```javascript\nvar numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar min = Math.min.apply(Math, numbers);\nvar max = Math.max.apply(Math, numbers);\n\nconsole.log(min); // 1\nconsole.log(max); // 10\n```\n\n**Using a loop and if-else statement.**\n\n```javascript\nvar min = numbers[0];\nvar max = numbers[0];\n\nfor (var i = 0; i < numbers.length; i++) {\n\tif (numbers[i] < min) {\n\t\tmin = numbers[i];\n\t}\n\tif (numbers[i] > max) {\n\t\tmax = numbers[i];\n\t}\n}\n\nconsole.log(min); // 1\nconsole.log(max); // 10\n```\n","section":"js"},{"title":"How do you find the absolute value of a number?","content":"\nYes, it is. The `abs()` method returns the absolute value of a number. for example, the `abs()` method returns the absolute value of -5: 5.\n\n```javascript\nvar x = -5;\nMath.abs(x); // 5\n```\n","section":"js"},{"title":"How to avoid scientific notation for large numbers in JavaScript?","content":"\nTo avoid scientific notation, use the `toFixed(n)` method. The `toFixed(n)` method rounds a number to n decimal places. For example, the following code rounds the number to two decimal places:\n\n```javascript\nvar x = 12.3456;\nvar y = x.toFixed(2);\nconsole.log(y); // 12.35\n```\n","section":"js"},{"title":"What is BigInt?","content":"\nBigInt is a new data type in JavaScript that allows you to store very large numbers. For example, you can store a number with more than 53 bits of precision.\n\n```javascript\nvar a = BigInt(1234567890123456789012345678901234567890);\nvar b = BigInt(1234567890123456789012345678901234567890);\n\nconsole.log(a + b); // 1234567890123456789012345678901234567891\n```\n","section":"js"},{"title":"What uses parseFloat and parseInt?","content":"\n`parseFloat` and parseInt are used to convert a string to a number. parseFloat converts a string to a floating point number and parseInt converts a string to an integer. It is important to note that parseFloat and parseInt do not convert a string to a number if the string contains a decimal point. for example, parseFloat(\"1.2\") will return 1.2 and parseInt(\"1.2\") will return 1.\n\n**Example**\n\n```javascript\nvar num = '1.2';\n\nparseFloat(num); // 1.2\nparseInt(num); // 1\n```\n","section":"js"},{"title":"How can repeat a string n times?","content":"\nWe can use the repeat method. Repeat method takes a string and a number and returns a new string that is n times the original string.\n\n```javascript\nvar str = 'Hello';\nvar n = 3;\n\nvar newStr = str.repeat(n);\nconsole.log(newStr); // HelloHelloHello\n```\n","section":"js"},{"title":"How can we remove whitespace from a string?","content":"\nuse the string built-in method .trim() method to remove whitespace from a string. But be careful, this method only removes whitespace from the beginning and end of the string.\n\n```javascript\nvar str = '   Hello World   ';\nstr.trim(); // returns \"Hello World\"\n```\n","section":"js"},{"title":"How do you make string first letter capitalized?","content":"\nThe first letter of the string is capitalized using the `toUpperCase()` method. So first we need to get the first letter of the string and then we can use the `toUpperCase()` method to capitalize it.\n\n**Example:**\n\n```javascript\nvar str = 'hello world';\nvar firstLetter = str.charAt(0);\nvar restOfString = str.slice(1);\nvar capitalizedString = firstLetter.toUpperCase() + restOfString; //\nconsole.log(capitalizedString); // Hello World\n```\n\n**Explanation:**\n\nWe get the first letter of the string and then we use the `toUpperCase()` method to capitalize it. We then concatenate the capitalized letter with the rest of the string using the `slice()` method. The `slice()` method returns a new string from the original string based on the start and end index provided.\n","section":"js"},{"title":"How do you replace a specific part of a string?","content":"\nUse the replace method. The replace method takes two arguments: the first is the string to be replaced, and the second is the string to replace it with and returns a new string. For example, if you wanted to replace the word \"hello\" with \"goodbye\", you would use the replace method like this: \"hello\".replace(\"hello\", \"goodbye\");\n\n```javascript\nvar str = 'hello world';\nvar newStr = str.replace('hello', 'goodbye');\n// newStr: \"goodbye world\"\n```\n","section":"js"},{"title":"How to check a word in exists on a string?","content":"\nThere are various ways to check a word in exist on string on not. but the most efficient way is to use includes method.\n\n**Using includes method**\n\n```javascript\nvar str = 'Hello World';\nconsole.log(str.includes('World')); // true\n```\n\n**Using indexOf method**\n\n```javascript\nvar str = 'Hello World';\nconsole.log(str.indexOf('World')); // 6\n```\n\n**Using search method**\n\n```javascript\nvar str = 'Hello World';\nconsole.log(str.search('World')); // 6\n```\n\n**Using match method**\n\n```javascript\nvar str = 'Hello World';\nconsole.log(str.match('World')); // [\"World\"]\n```\n","section":"js"},{"title":"What are tagged templates ?","content":"\nTagged templates are an enhanced form of literal templates. It allows parsing templates with a function. The function accepts the first parameter as an array of strings and the remaining parameters as expression values.\n\n**Example**\n\n```javascript\nvar user1 = 'John';\nvar skill1 = 'JavaScript';\nvar experience1 = 15;\n\nvar user2 = 'Kane';\nvar skill2 = 'JavaScript';\nvar experience2 = 5;\n\nfunction myInfoTag(strings, userExp, experienceExp, skillExp) {\n\tvar str0 = strings[0]; // \"Mr/Ms. \"\n\tvar str1 = strings[1]; // \" is a/an \"\n\tvar str2 = strings[2]; // \"in\"\n\n\tvar expertiseStr;\n\tif (experienceExp > 10) {\n\t\texpertiseStr = 'expert developer';\n\t} else if (skillExp > 5 && skillExp <= 10) {\n\t\texpertiseStr = 'senior developer';\n\t} else {\n\t\texpertiseStr = 'junior developer';\n\t}\n\n\treturn `${str0}${userExp}${str1}${expertiseStr}${str2}${skillExp}`;\n}\n\nvar output1 = myInfoTag`Mr/Ms. ${user1} is a/an ${experience1} in ${skill1}`;\nvar output2 = myInfoTag`Mr/Ms. ${user2} is a/an ${experience2} in ${skill2}`;\n\nconsole.log(output1); // Mr/Ms. John is a/an expert developer in JavaScript\nconsole.log(output2); // Mr/Ms. Kane is a/an junior developer in JavaScript\n```\n","section":"js"},{"title":"What is the difference between staring startWith and starting endWith methods?","content":"\nstartWith method checks if the string starts with the given string. and `endWith()` method checks if the string ends with the given string.\n\n**Example:**\n\n```javascript\nvar str = 'Hello World';\nstr.startsWith('Hello'); // true\nstr.endsWith('World'); // true\n\nstr.startsWith('World'); // false\nstr.endsWith('Hello'); // false\n```\n","section":"js"},{"title":"when we should use regular expressions?","content":"\nYes, we should use regular expressions when we want to match a pattern against a string. or operate search and replace operations on a string. or validate a string against a pattern. regular expressions can be a better choice than string methods.\n","section":"js"},{"title":"Differences between Objects and Maps ?","content":"\n### 1. Keys on objects are strings, on maps keys are of any type\n\nIndeed objects are collections of key-value pairs but the key can only be a string. While the key of a Map can be of any type.\n\nIf for example, we use a number as a key in an object literal, that number is converted to a string and used as the key.\n\nBecause the key is converted to a string we get the same result when trying to get value for the 1 number value or for the '1' string value.\n\n```js\nconst obj = {\n\t1: 'One'\n};\nconsole.log(obj[1]); // One\n\nconst map = new Map();\nmap.set(1, 'One');\nconsole.log(map.get(1)); // One\nconsole.log(map.get('1')); // undefined\n```\n\nWhen using maps the key can be of any type so the 1 number key is different from the '1' string key\n\n```js\nconst map = new Map();\nmap.set(1, 'One');\nconsole.log(map.get(1)); // One\nconsole.log(map.get('1')); // undefined\n```\n\nThe key is unique in both cases. There cannot be two properties in an object with the same key or two entries in a map with the same key.\n\n### 2. Maps preserve the order of their keys, objects do not\n\nThe original order of key-value pairs is preserved in maps, while in objects it is not.\n\n```js\nconst gamesObj = {\n\t2: 'Tzolkin',\n\t1: 'Citadels'\n};\nconst keys = Object.keys(gamesObj);\nconsole.log(keys);\n//[\"1\", \"2\"];\nconst keyValuePairs = Object.entries(gamesObj);\nconsole.log(keyValuePairs);\n//[\"1\", \"Citadels\"]\n//[\"2\", \"Tzolkin\"]\n```\n\nNotice that when the object is created the key 2 comes before the key 1. When retrieving all the keys 2 comes after 1.\n\nBelow is a similar collection built with the Map constructor. This time the initial order is preserved.\n\n```js\nconst gamesMap = new Map([\n\t[2, 'Tzolkin'],\n\t[1, 'Citadels']\n]);\nconst keys = gamesMap.keys();\nconsole.log(keys);\n//MapIterator {2, 1}\nconst keyValuePairs = gamesMap.entries();\nconsole.log(keyValuePairs);\n//MapIterator {2 => \"Tzolkin\", 1 => \"Citadels\"}\n```\n","section":"js"},{"title":"How can we check a value is a Array or not?","content":"\nThe Array.isArray() method determines whether the passed value is an Array object.\n\n```javascript\nvar arr = [1, 2, 3];\nconsole.log(Array.isArray(arr)); // true\n\nvar obj = {};\nconsole.log(Array.isArray(obj)); // false\n```\n","section":"js"},{"title":"How can we concatenated nested arrays?","content":"\nThe flat method is used to flatten an array. It takes an optional parameter which is the depth of the flattening. By default it flattens the array to one level. if we pass Infinity, it flattens the array to all levels.\n\n```javascript\nvar arr = [1, 2, [3, 4, [5, 6]]];\nconsole.log(arr.flat(Infinity)); // [1, 2, 3, 4, 5, 6]\n```\n","section":"js"},{"title":"How do you check whether an array includes a particular value or not","content":"\nThe Array#includes() method is used to determine whether an array includes a particular value among its entries by returning either true or false. Let's see an example to find an element(numeric and string) within an array.\n\n```javascript\nvar numericArray = [1, 2, 3, 4];\nconsole.log(numericArray.includes(3)); // true\n\nvar stringArray = ['green', 'yellow', 'blue'];\nconsole.log(stringArray.includes('blue')); //true\n```\n","section":"js"},{"title":"How to check whether there is a specific value in the Array?","content":"\nThere are many ways we can determine where a specific value exists in the target array. The `includes` method in Javascript is one of the most convenient ways to find out whether a value exists in an array or not.\n\n**Example**\n\n```javascript\nif (numbers.includes(3)) {\n\tconsole.log('found it');\n}\n```\n","section":"js"},{"title":"How we can merge nested arrays in javascript?","content":"\nuse `reduce` method and use `concat` method to merge arrays.\n\n```javascript\nconst nestedArr1 = [\n\t[1, 2, 3],\n\t[4, 5, 6],\n\t[7, 8, 9, [10, 11, 12]]\n];\nconst nestedArr2 = [\n\t[1, 2, 3],\n\t[4, 5, 6],\n\t[7, 8, 9, [10, 11, 12]],\n\t[13, 14, 15]\n];\n\nfunction mergeArrays(arr1, arr2) {\n\treturn normalizeNestedArray(arr1).concat(normalizeNestedArray(arr2));\n}\n\nfunction normalizeNestedArray(arr) {\n\treturn arr.reduce((acc, curr) => {\n\t\tif (Array.isArray(curr)) {\n\t\t\treturn acc.concat(normalizeNestedArray(curr));\n\t\t} else {\n\t\t\treturn acc.concat(curr);\n\t\t}\n\t}, []);\n}\n\nmergeArrays(nestedArr1, nestedArr2);\n```\n\n**Explanation**\nFirst we normalize the nested arrays by reducing the array to a single array. then we merge the arrays. and finally we normalize the merged array.\n","section":"js"},{"title":"What is the purpose of Array reduce method?","content":"\nThe reduce method executes a reducer function (that you provide) on each element of the array, resulting in a single output value. It takes two arguments: the reducer function and an initial value. The reducer function takes two arguments: the accumulator and the current value to be transformed. The accumulator is the result of the last call to the reducer function, or the initial value if this is the first call. The current value is the value of the current element being processed in the array. The reducer function must return the accumulator. It is useful for transforming an array to a single value.\n\n```javascript\nvar array = [1, 2, 3, 4, 5];\nvar sum = array.reduce(function (accumulator, currentValue) {\n\treturn accumulator + currentValue;\n}, 0);\nconsole.log(sum); // 15\n```\n","section":"js"},{"title":"What is the purpose of some method in arrays ?","content":"\nThe some() method is used to test whether at least one element in the array passes the test implemented by the provided function. The method returns a boolean value. Let's take an example to test for any odd elements,\n\n```javascript\nvar array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nvar odd = (element) => element % 2 !== 0;\n\nconsole.log(array.some(odd)); // true (the odd element exists)\n```\n","section":"js"},{"title":"What is the purpose of the array slice method ?","content":"\nThe slice() method returns the selected elements in an array as a new array object. It selects the elements starting at the given start argument, and ends at the given optional end argument without including the last element. If you omit the second argument then it selects till the end.\n\n```javascript\nlet arrayIntegers = [1, 2, 3, 4, 5];\nlet arrayIntegers1 = arrayIntegers.slice(0, 2); // returns [1,2]\nlet arrayIntegers2 = arrayIntegers.slice(2, 3); // returns [3]\nlet arrayIntegers3 = arrayIntegers.slice(4); //returns [5]\n```\n","section":"js"},{"title":"What is the use case of array concat method?","content":"\nTo merge two or more arrays. It don't change the original array and return a new array.\n\n```javascript\nvar arr1 = [1, 2, 3];\nvar arr2 = [4, 5, 6];\n\nvar arr3 = arr1.concat(arr2);\n// arr3 = [1, 2, 3, 4, 5, 6]\n```\n","section":"js"},{"title":"Deference between Array and Set in javascript?","content":"\nArray is a collection of values and Set is a collection of unique values. Removing duplicates from an array is a O(n) operation and from a set is a O(1) operation.\n\n**Example**\n\n```javascript\nvar arr = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5];\nvar set = new Set(arr);\n// console.log(set); // Set {1, 2, 3, 4, 5}\n// console.log(arr); // [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n\n// Remove an item from an array\narr.splice(0, 1);\n// console.log(arr); // [2, 3, 4, 5, 1, 2, 3, 4, 5]\nset.delete(1);\n// console.log(set); // Set {2, 3, 4, 5}\n```\n","section":"js"},{"title":"What is difference between Map and Object?","content":"\nMap is a data structure which helps in storing the data in the form of pairs. The pair consists of a unique key and a value mapped to the key. It helps prevent duplicity.\nObject follows the same concept as that of map i.e. using key-value pair for storing data. But there are slight differences which makes map a better performer in certain situations.\n\nFew basic differences are as follows:\n\n- In Object, the data-type of the key-field is restricted to integer, strings, and symbols. Whereas in Map, the key-field can be of any data-type (integer, an array, even an object!)\n- In the Map, the original order of elements is preserved. This is not true in case of objects.\n","section":"js"},{"title":"What is Map object?","content":"\nA map is an object that holds key-value pairs. Each key is unique on the map. The value can be any type, even another map. A map is an iterable object. It has a forEach() method, which can be used to iterate over all key-value pairs in the map. The map is a collection of key-value pairs.\n\n- 1. The map is used to store data in key-value pairs.\n- 2. Map keys are unique. and can be set in any kind of data type.\n- 3. Maps keys are stored in insertion order.\n- 4. The map is iterable.\n\n```javascript\nvar map = new Map();\nmap.set('1', 'a');\nmap.set('2', 'b');\nmap.set('3', 'c');\n\n// Iterate over all key-value pairs in the map\nmap.forEach(function (value, key) {\n\tconsole.log(key + ' = ' + value);\n});\n// 1 = a\n// 2 = b\n// 3 = c\n```\n","section":"js"},{"title":"What is the purpose of the Set in javascript?","content":"\nThe Set is a data structure that stores unique values of any type. It is a collection of values. It is a collection of values that are not duplicated. And have useful built-in methods for manipulating the collection.\n\n**Example**\n\n```javascript\nvar set = new Set();\nset.add(1);\nset.add(2);\nset.add(2);\n\nfor (let value of set) {\n\tconsole.log(value);\n}\n// Output:\n// 1\n// 2\n```\n","section":"js"},{"title":"Difference between getOwnPropertyNames vs Object.keys ?","content":"\ngetOwnPropertyNames returns only enumerable properties, Object.keys returns all properties.\n\n```javascript\nvar obj = {\n\ta: 1,\n\tb: 2,\n\tc: 3\n};\n```\n\n**Object keys**\n\nObject keys returns all enumerable properties of an object. It does not return non-enumerable properties.\n\n```javascript\nconsole.log(Object.keys(obj)); // ['a', 'c']\n```\n\n**Object getOwnPropertyNames**\n\ngetOwnPropertyNames returns all properties of an object.\n\n```javascript\nconsole.log(Object.getOwnPropertyNames(obj)); // [ 'a', 'b', 'c' ]\n```\n","section":"js"},{"title":"How can access an object's  values?","content":"\nThere are two ways to access an object's values. One is using the dot notation and the other is using the bracket notation.\n\n```javascript\nvar person = {\n\tname: 'John',\n\tage: 30\n};\n\n// Dot notation\nconsole.log(person.name);\n\n// Bracket notation\nconsole.log(person['name']);\n```\n","section":"js"},{"title":"How can we set an object's prototype in JavaScript ?","content":"\n**Using `Object.create`**\nThe `Object.create()` method created a new object and allows you to specify an object that will be used as the new objects' prototype.\n\nHere's an example:-\n\n```javascript\nconst personPrototype = {\n\tgreet() {\n\t\tconsole.log('hello!');\n\t}\n};\n\nconst carl = Object.create(personPrototype);\ncarl.greet(); // hello!\n```\n\nHere we create an object personPrototype, which has a greet() method. We then use Object.create() to create a new object with personPrototype as its prototype. Now we can call greet() on the new object, and the prototype provides its implementation.\n","section":"js"},{"title":"How do you get objects all prototypes ?","content":"\nAns: The object `getPrototypeOf()` method accept an object as parameter an return all prototypes properties this object.\n\n```javascript\nconst myObject = {\n\tcity: 'Paris',\n\tgreet() {\n\t\tconsole.log(`Hello ${this.city}`);\n\t}\n};\n\nObject.getPrototypeOf(myObject);\n```\n","section":"js"},{"title":"How do you get property descriptors of an object","content":"\nYou can use the Object.getOwnPropertyDescriptors() method which returns all own property descriptors of a given object. The example usage of this method is below,\n\n```javascript\nconst newObject = {\n\ta: 1,\n\tb: 2,\n\tc: 3\n};\nconst descriptorsObject = Object.getOwnPropertyDescriptors(newObject);\nconsole.log(descriptorsObject.a.writable); //true\nconsole.log(descriptorsObject.a.configurable); //true\nconsole.log(descriptorsObject.a.enumerable); //true\nconsole.log(descriptorsObject.a.value); // 1\n```\n","section":"js"},{"title":"How Prototype inheretated with Object.create() ?","content":"\n`Object.create()` Inherit prototypes from the targeted object and create a new object. the first parameter is for targeted object prototypes and the second parameter is for property descriptors (optional).\n\n```js\nconst extractJSON = {\n\textractProperties: function () {\n\t\tlet properties = [];\n\t\tfor (let key in this) {\n\t\t\tif (this.hasOwnProperty(key)) {\n\t\t\t\tproperties.push(key);\n\t\t\t}\n\t\t}\n\t\treturn properties;\n\t},\n\textractValues: function () {\n\t\tlet values = [];\n\t\tfor (let key in this) {\n\t\t\tif (this.hasOwnProperty(key)) {\n\t\t\t\tvalues.push(this[key]);\n\t\t\t}\n\t\t}\n\t\treturn values;\n\t}\n};\nconst userInfoProperties = Object.create(extractJSON);\nuserInfoProperties.name = 'John';\nuserInfoProperties.age = 30;\nuserInfoProperties.extractProperties(); //   ['name', 'age']\nuserInfoProperties.extractValues(); //   ['John', 30]\n```\n","section":"js"},{"title":"What is Optional chaining ?","content":"\nOptional chaining is the safe way to get access to nested object properties even if the intermediary property doesn't exist.\n\nAs an example let's say we have an empty user object when we access the `user.name` it returns undefined because we know in the user object name property doesn't exist. but if we attempt to access the firstName property in the nested name object it throws an Error. Becouse we attempt to access an undefined values property that might not exist.\n\nAt some point, we might expect the undefined instant of not getting an error. In Javascript we can use the `.?` syntax to check the left part for `null/undefined` and allowing to safely access nested properties.\n\n```js\nconst user = {};\nconsole.log(user.name); // undefined\nconsole.log(user.name.age); // Property 'name' does not exist on type '{}'.\nconsole.log(user.name?.age); // undefined\n```\n","section":"js"},{"title":"What happens if you define a property in an object, when a property with the same name is defined in the object's prototype?","content":"\nLet's see:\n\n```javascript\nconst myDate = new Date(1995, 11, 17);\n\nconsole.log(myDate.getYear()); // 95\n\nmyDate.getYear = function () {\n\tconsole.log('something else!');\n};\n\nmyDate.getYear(); // 'something else!'\n```\n\nWhen we call getYear() the browser first looks in myDate for a property with that name, and only checks the prototype if myDate does not define it. So when we add getYear() to myDate, then the version in myDate is called.\n","section":"js"},{"title":"What is prototype chain ?","content":"\nPrototypes are the means of inheritance in JavaScript. The prototype of an object would also have a prototype object. This continues until we reach the top level when there is no prototype object.\n\nThis is called prototype chaining or prototype chain in JavaScript.\n","section":"js"},{"title":"What is constructor function?","content":"\nA constructor function is a function that is used to create objects. The new keyword is used to call the constructor function and use the constructor as a blueprint to create an object.\n\n**Note: It it convention to use capital letters for constructor function names.**\n\n```javascript\nfunction Person(name, age) {\n\tthis.name = name;\n\tthis.age = age;\n}\n\nvar john = new Person('John', 30);\nvar jane = new Person('Jane', 32);\nvar mark = new Person('Mark', 25);\n```\n","section":"js"},{"title":"What is getter and setter in javascript?","content":"\nThe getter and setter is a function that is used to get and set the value of a property. In Object Oriented Programming, the getter and setter is a method that is used to get and set the value of a property. The main benefit of using getter and setter is that we can implement some logic before and after getting and setting the value of a property.\n\n**Example without getter and setter:**\n\n```javascript\nvar person = {\n\tfirstName: 'John',\n\tlastName: 'Doe',\n\tfullName: function () {\n\t\treturn this.firstName + ' ' + this.lastName;\n\t}\n};\nconsole.log(person.fullName()); // John Doe\n```\n\n**Example with getter and setter:**\n\n```javascript\nvar person = {\n\tfirstName: 'John',\n\tlastName: 'Doe',\n\tget fullName() {\n\t\treturn this.firstName + ' ' + this.lastName;\n\t}\n};\nconsole.log(person.fullName); // John Doe\n```\n","section":"js"},{"title":"What is Object.assign() do ?","content":"\nUsed to copy the values and properties from one or more source objects to a target object and then return modified target object.\n\n```javascript\nconst target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\n\nconst returnedTarget = Object.assign(target, source);\n\nconsole.log(target);\n// expected output: Object { a: 1, b: 4, c: 5 }\n\nconsole.log(returnedTarget);\n// expected output: Object { a: 1, b: 4, c: 5 }\n```\n","section":"js"},{"title":"What is object in javascript?","content":"\nObject is a collection of key-value pairs. this useful when we want to store data in a structured way. we can access the data using key.\n\n```javascript\nvar person = {\n\tname: 'John',\n\tage: 30,\n\tisMarried: false\n};\n\nconsole.log(person.name); // John\n```\n","section":"js"},{"title":"What is Object property descriptor?","content":"\nObject property descriptor is an object that describes the property of an object and its behavior. the object property descriptor is an object with the following properties: value, writable, enumerable, configurable.\n\n```javascript\n'use strict';\nconst person = {\n\tname: 'John',\n\tage: 30,\n\tisMarried: false\n};\n\nObject.defineProperty(person, 'name', {\n\tvalue: 'Jack',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: false\n});\nconsole.log(person.name);\n```\n\n**Value:** The value property is a data property that stores the value of the property.\n\n```javascript\nconsole.log(person.name); // Jack\n```\n\n**Writable:** The writable property is a boolean property that determines whether the property can be changed.\n\n```javascript\nperson.name = 'Jill';\n// => error : Uncaught TypeError: Cannot assign to read only property 'name' of object\n```\n\n**Enumerable:** The enumerable property is a boolean property that determines whether the property can be enumerated by a for-in loop.\n\n```javascript\nfor (const item of Object.entries(person)) {\n\tconsole.log(item);\n}\n// ['age', 30]\n// ['isMarried', false]\n```\n\n**Configurable:** The configurable property is a boolean property that determines whether the property can be deleted.\n\n```javascript\ndelete person.name;\n// Uncaught TypeError: Cannot delete property 'name\n```\n","section":"js"},{"title":"How can we define a private method in the javascript class?","content":"\nWe can use the following syntax: #methodName to define a private method. it will be private to the class and can be accessed only from the class itself and not from outside the class.\n\n```javascript\nclass Person {\n\t#name;\n\t#age;\n\tconstructor(name, age) {\n\t\tthis.#name = name;\n\t\tthis.#age = age;\n\t}\n\tgetName() {\n\t\treturn this.#name;\n\t}\n\tgetAge() {\n\t\treturn this.#age;\n\t}\n}\n\nvar person = new Person('John', 30);\nconsole.log(person.getName()); // John\nconsole.log(person.getAge()); // 30\nconsole.log(person.#name); //  Private field '#name' must be declared in an enclosing clas\nconsole.log(person.#age); //  Private field '#age' must be declared in an enclosing clas\n```\n","section":"js"},{"title":"How do we set a property or method private in javascript?","content":"\nJavaScript proposal, in the standard, that provides language-level support for private properties and methods.\n\nPrivates should start with #. They are only accessible from inside the class.\n\n```javascript\nclass Person {\n\t#age = 0;\n\tname = '';\n\tconstructor(name) {\n\t\tthis.name = name;\n\t}\n\n\tgetAge() {\n\t\treturn this.#age;\n\t}\n\n\tsetAge(age) {\n\t\tthis.#age = age;\n\t}\n}\n\nconst person = new Person('John');\nperson.setAge(30);\nconsole.log(person.#age);\n// Uncaught SyntaxError: Private field '#age' must be declared in an enclosing class (\n```\n","section":"js"},{"title":"Is Class Declaration hoisted to the top?","content":"\nNo , it is not hoisted. It behaves like let and const keyword in javascript.\n","section":"js"},{"title":"What is a constructor method","content":"\nThe constructor method is a special method for creating and initializing an object created within a class. If you do not specify a constructor method, a default constructor is used. The example usage of constructor would be as below,\n\n```javascript\nclass Employee {\n\tconstructor() {\n\t\tthis.name = 'John';\n\t}\n}\n\nvar employeeObject = new Employee();\nconsole.log(employeeObject.name); // John\n```\n","section":"js"},{"title":"What is Abstraction in OOP ?","content":"\nMaking coffee with a coffee machine is a good example of abstraction.\nYou need to know how to use your coffee machine to make coffee. You need to provide water and coffee beans, switch it on and select the kind of coffee you want to get.\nThe thing you don’t need to know is how the coffee machine is working internally to brew a fresh cup of delicious coffee. You don’t need to know the ideal temperature of the water or the amount of ground coffee you need to use.\nSomeone else worried about that and created a coffee machine that now acts as an abstraction and hides all these details. You just interact with a simple interface that doesn’t require any knowledge about the internal implementation.\n\n```javascript\nclass CoffeeMachine {\n\tconstructor(power, capacity) {\n\t\tthis.power = power;\n\t\tthis.capacity = capacity;\n\t\tthis.waterAmount = 0;\n\t}\n\tgetWaterAmount() {\n\t\treturn this.waterAmount;\n\t}\n\tsetWaterAmount(amount) {\n\t\tthis.waterAmount = amount;\n\t}\n\tgetPower() {\n\t\treturn this.power;\n\t}\n\tgetCapacity() {\n\t\treturn this.capacity;\n\t}\n\tgetTimeToBoil() {\n\t\treturn (this.waterAmount * 80) / this.power;\n\t}\n\tboil() {\n\t\tthis.waterAmount = 0;\n\t}\n\tmakeCoffee(amount) {\n\t\tthis.waterAmount += amount;\n\t\tif (this.waterAmount > this.capacity) {\n\t\t\tconsole.log('Too hot!');\n\t\t\tthis.boil();\n\t\t}\n\t}\n}\n\nconst coffeeMachine = new CoffeeMachine(10000, 400);\ncoffeeMachine.makeCoffee(200);\n```\n","section":"js"},{"title":"What is class in javascript?","content":"\nClass is a blueprint of an object. It is a template for an object. We can create many objects from a class. A class can have properties and methods. The class can also inherit properties and methods from another class and have access to override them. The class has the constructors method that is called when we create an object from a class. Constructors are used to initializing the properties of the object.\n\n```javascript\nclass Person {\n\tconstructor(name, age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\tsayHello() {\n\t\tconsole.log(`Hello, I am ${this.name} and I am ${this.age} years old.`);\n\t}\n}\n\nvar person1 = new Person('John', 30);\nperson1.sayHello();\n// Output: Hello, I am John and I am 30 years old.\n```\n","section":"js"},{"title":"What is Encapsulation in JavaScript?","content":"\nEncapsulation is a mechanism that allows an object to hide its internal state and behavior from other objects.\n\n```javascript\nclass Person {\n\t#name = 'Nathan';\n\n\tgetName() {\n\t\treturn this.#name;\n\t}\n\n\tsetName(name) {\n\t\tthis.#name = name;\n\t}\n}\n\nconst person = new Person();\nconsole.log(person.getName()); // Nathan\nconsole.log(person.#name); // Uncaught SyntaxError: Private field '#name' must be declared in an enclosing class.\n```\n","section":"js"},{"title":"What is static method in javascript?","content":"\nA static method in JavaScript is a method that has a static keyword prepended to itself. Such methods cannot be accessed through instantiated objects but could be accessed through the class name. This is because static methods belong to the class directly. Inheritance even applies to static methods. Also, these methods can be invoked by non-static methods and even constructors. Static methods are used to create utility functions and create objects that contain default information.\n\n**Example**\n\n```javascript\nclass MyClass {\n\tstatic myStaticMethod() {\n\t\treturn 'static';\n\t}\n}\n\nMyClass.myStaticMethod(); // 'static'\n\nconst myClass = new MyClass();\nmyClass.myStaticMethod(); // TypeError: myStaticMethod is not a function\n```\n","section":"js"},{"title":"What are the 4 pillars of OOP?","content":"\n- 1. Abstraction\n- 2. Encapsulation\n- 3. Inheritance\n- 4. Polymorphism\n","section":"js"},{"title":"Is it possible to chain promises after getting an Error?","content":"\nYes, It is possible to chain after a failure. which is useful to accomplish a task after a failure.\n\n```javascript\nnew Promise((resolve, reject) => {\n\tconsole.log('Initial');\n\n\tresolve();\n})\n\t.then(() => {\n\t\tthrow new Error('Something failed');\n\t\tconsole.log('Do this');\n\t})\n\t.catch(() => {\n\t\tconsole.error('Do that');\n\t})\n\t.then(() => {\n\t\tconsole.log('Do this, no matter what happened before');\n\t});\n```\n","section":"js"},{"title":"What are the cons of promises?","content":"\n- It makes little complex code.\n- You need to load a polyfill if ES6 is not supported.\n","section":"js"},{"title":"What does promise all do?","content":"\nThe Promise.all() method is actually a method of Promise object (which is also an object under JavaScript used to handle all the asynchronous operations), that takes an array of promises(an iterable) as an input. It returns a single Promise that resolves when all of the promises passed as an iterable, which have resolved or when the iterable contains no promises. In simple way, if any of the passed-in promises reject, the Promise.all() method asynchronously rejects the value of the promise that already rejected, whether or not the other promises have resolved.\n\n```javascript\nconst promise1 = Promise.resolve(3);\nconst promise2 = 42;\nconst promise3 = new Promise((resolve, reject) => {\n\tsetTimeout(resolve, 100, 'foo');\n});\n\nPromise.all([promise1, promise2, promise3]).then((values) => {\n\tconsole.log(values);\n\t// expected output: Array [3, 42, \"foo\"]\n});\n```\n\n[Reference](https://www.geeksforgeeks.org/javascript-promise-all-method/)\n[Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)\n","section":"js"},{"title":"What is a promise?","content":"\nA promise is an object that may produce a single value some time in the future: either a resolved value, or a reason that it’s not resolved (e.g., a network error occurred). A promise may be in one of 3 possible states: fulfilled, rejected, or pending. Promise users can attach callbacks to handle the fulfilled value or the reason for rejection. Promises are eager, meaning that a promise will start doing whatever task you give it as soon as the promise constructor is invoked\n","section":"js"},{"title":"What is a promise.race() ?","content":"\nThe Promise.race() method returns a promise that fulfills or rejects as soon as one of the promises in an iterable fulfills or rejects, with the value or reason from that promise.\n\n```javascript\nconst promise1 = new Promise((resolve, reject) => {\n\tsetTimeout(resolve, 500, 'one');\n});\n\nconst promise2 = new Promise((resolve, reject) => {\n\tsetTimeout(resolve, 100, 'two');\n});\n\nPromise.race([promise1, promise2]).then((value) => {\n\tconsole.log(value); // expected output: \"two\"\n});\n```\n\n[Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race)\n","section":"js"},{"title":"What is Polymorphism in JavaScript ?","content":"\nWhen a method has the same name but a different implementation in different classes - is called polymorphism.\n\n```javascript\nclass Animal {\n\tconstructor(name) {\n\t\tthis.name = name;\n\t}\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n\nclass Dog extends Animal {\n\tconstructor(name) {\n\t\tsuper(name);\n\t}\n\tgetName() {\n\t\treturn this.name + ' is a dog';\n\t}\n}\n\nclass Cat extends Animal {\n\tconstructor(name) {\n\t\tsuper(name);\n\t}\n\tgetName() {\n\t\treturn this.name + ' is a cat';\n\t}\n}\n\nvar dog = new Dog('Fido');\nvar cat = new Cat('Mimi');\n\nconsole.log(dog.getName());\nconsole.log(cat.getName());\n```\n","section":"js"},{"title":"What is promise chaining give an example?","content":"\nA common need is to execute two or more asynchronous operations back to back, where each subsequent operation starts when the previous operation succeeds, with the result from the previous step. We accomplish this by creating a promise chain.\n\n```javascript\nconst getNumber = new Promise((resolve, reject) => {\n\tsetInterval(() => {\n\t\tresolve(10);\n\t}, 100);\n});\ngetNumber\n\t.then((number) => {\n\t\tconsole.log(number); // 11\n\t\treturn number + 1;\n\t})\n\t.then((number) => {\n\t\tconsole.log(number); // 12\n\t\treturn number + 1;\n\t})\n\t.then((number) => {\n\t\tconsole.log(number);\n\t\treturn number + 1; // 13\n\t});\n// 11\n// 12\n// 13\n```\n","section":"js"},{"title":"What promise chaining ?","content":"\nPromise chaining is a way to chain promises together. This is useful when you want to execute multiple asynchronous operations in sequence. The following example shows how to use promise chaining to execute multiple asynchronous operations in sequence.\n\n**Example**\n\n```javascript\nvar promise1 = new Promise(function (resolve, reject) {\n\tsetTimeout(function () {\n\t\tresolve(1);\n\t}, 1000);\n});\n\nvar promise2 = new Promise(function (resolve, reject) {\n\tsetTimeout(function () {\n\t\tresolve(2);\n\t}, 2000);\n});\n\nvar promise3 = new Promise(function (resolve, reject) {\n\tsetTimeout(function () {\n\t\tresolve(3);\n\t}, 3000);\n});\n\npromise1\n\t.then(function (result) {\n\t\tconsole.log(result); // 1\n\t\treturn promise2;\n\t})\n\t.then(function (result) {\n\t\tconsole.log(result); // 2\n\t\treturn promise3;\n\t})\n\t.then(function (result) {\n\t\tconsole.log(result); // 3\n\t});\n```\n","section":"js"},{"title":"What is iterable?","content":"\nIterable is an object that has a next method. This method returns an object with a value and done properties. The value property is the next value in the sequence and the done property is a boolean that is true if there are no more values in the sequence. The next method is used to get the next value in the sequence.\n","section":"js"},{"title":"What is purpose of proxies in javascript?","content":"## What is purpose of proxies in javascript?\n\nProxy is a function that takes two arguments, the first is the object to be proxied and the second is the handler object. The handler object has properties that define the behavior of the proxy.\n\n```javascript\nconst handler = {\n get: function (target, name) {\n  console.log(`Getting ${name}`);\n  console.log(target);\n  return name in target ? target[name] : 'N/A';\n }\n};\n\nconst target = {\n name: 'John',\n age: 30\n};\n\nconst proxy = new Proxy(target, handler);\n\nconsole.log(proxy.name); // John\n\n```\n","section":"js"},{"title":"Difference between default export and named export ?","content":"\ndefault export is used when we want to export only one thing from a module. and named export is used when we want to export multiple things from a module.\n","section":"js"},{"title":"What are dynamic imports?","content":"\nDynamic import is a function that allows us to load modules on demand by using promise or async await syntax. The main advantage is to reduce bundle size. and response size. speed up user experience.\n\n```javascript\nimport('./Module').then((Module) => Module.method());\n```\n","section":"js"},{"title":"What is defer in javascript?","content":"\nThe defer is a Boolean value, used to indicate that script is executed after the document has been parsed. It works only with external scripts (i.e., works only when we are specifying the src attribute in `<script>` tag).\n","section":"js"},{"title":"What is type=\"module\" in the <script> tag?","content":"\nIt tells the browser that the script is a module. Now we can use the import and export keywords. import and export are used to import and export modules. This is useful for bundling and splitting code.It is also useful for lazy loading.\n\n```javascript\n<script type=\"module\">\n\timport {(someVar, someFunc)} from './module.js'; console.log(someVar + someFunc());\n</script>\n```\n","section":"js"},{"title":"How can we communicate between two different tabs?","content":"\nUse BroadcastChannel Web API to communicate between two different tabs BroadcastChannel is a Web API that allows you to send and receive messages between different tabs.\n\n```javascript\nconst bc = new BroadcastChannel('test_channel');\n\nbc.onmessage = function (event) {\n\tconsole.log(event.data);\n};\n\ndocument.body.addEventListener('click', () => {\n\tbc.postMessage('hello');\n});\n```\n","section":"js"},{"title":"How do I modify the url without reloading the page","content":"\nThe window.location.url property will be helpful to modify the url but it reloads the page. HTML5 introduced the history.pushState() and history.replaceState() methods, which allow you to add and modify history entries, respectively. For example, you can use pushState as below,\n\n```javascript\nwindow.history.pushState('page2', 'Title', '/page2.html');\n```\n","section":"js"},{"title":"How to access DOM from web worker?","content":"\nThe web worker's browser's DOM cannot be accessed, for reasons of execution thread safety. However, postmessages can establish communication with the browser window. So DOM can be updated based on postmessage.\n\n**Example**\n\n```html\n<html>\n\t<body>\n\t\t<h1 id=\"time\">Time:</h1>\n\t</body>\n\t<script>\n\t\tconst time = document.getElementById('time');\n\t\tconst worker = new Worker('worker.js');\n\t\tworker.onmessage = (e) => {\n\t\t\ttime.innerHTML = e.data;\n\t\t};\n\t</script>\n</html>\n```\n\n`worker.js`\n\n```javascript\nsetInterval(() => {\n\tpostMessage(new Date().toLocaleString());\n}, 1000);\n```\n\n**Output**\n\n```nginx\n8/9/2022, 1:08:24 AM\n```\n","section":"js"},{"title":"How to get a specific query param value from an URL?","content":"\nThe `new URL` object provides a way to handle a URL string. It accepts an URL string and this object contains `searchParams` property which can be used to extract a query params value.\n\n**Example**\n\n```javascript\nconst url = new URL('https://domain.com?page=1&take=20');\nconsole.log(url.searchParams.get('page'));\n// 1\n```\n","section":"js"},{"title":"What are server-sent events?","content":"\nServer-Sent Events is a server push technology enabling a client to receive automatic updates from a server via an HTTP connection, and describes how servers can initiate data transmission towards clients once an initial client connection has been established.\n\n- SSE is based on the plain HTTP\n- It is limited to pure text data, no binaries allowed\n\n```javascript\nconst eventSource = new EventSource('https://server.domain');\n\neventSource.addEventListener('message', (event) => {\n\t// \"event.data\" is a string\n\tconst data = JSON.parse(event.data);\n\n\t// Prints whatever was sent by the server\n\tconsole.log(data);\n});\n```\n\n[Reference](https://vhudyma-blog.eu/a-complete-guide-to-server-sent-events-in-javascript/)\n","section":"js"},{"title":"What is cookies ?","content":"\nCookies are small pieces of data that are stored on the user's computer. Cookies are widely used in websites to remember the user's preferences and to track the user's browsing activity.\n\n```javascript\ndocument.cookie = 'username=John Doe';\n```\n\n**Set a max age of 30 days**\n\n```javascript\ndocument.cookie = 'username=John Doe; max-age=2592000';\n```\n\n**Get the cookie**\n\n```javascript\ndocument.cookie; // 'username=John Doe'\n```\n","section":"js"},{"title":"What is IndexedDB used for?","content":"\nIndexedDB is a way for you to persistently store data inside a user's browser. Because it lets you create web applications with rich query abilities regardless of network availability, your applications can work both online and offline.\n\n[Reference](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB)\n","section":"js"},{"title":"What is Service Worker ?","content":"\nA service worker is a script that runs independently in the browser background. On the user side, it can intercept its network requests and decide what to load (fetch).\nService workers mainly serve features like background sync, push notifications and they are commonly used for’offline first’ applications, giving the developers the opportunity to take complete control over the user experience.\n\n- **You can dominate Network Traffic!**\n  You can manage all network traffic of the page and do any manipulations.\n  Is it really possible to dominate all network traffic? Yes! For example, when the page requests to a CSS file, you can send plain text as a response or when the page requests to an HTML file, you can send png file as a response. Of course, you can send true response too :)\n\n- **You can “Cache”!**\n  You can cache any request/response pair with Service Worker and Cache API and you can access these offline content anytime\n\n- **You can manage Push Notifications!**\n  You can manage push notifications with Service Worker and show any information message to the user\n\n- **You can continue!**\n  Although Internet connection is broken, you can start any process with Background Sync of Service Worker\n","section":"js"},{"title":"What is the use case of session storage in the web application?","content":"\nSession storage creates a session for the user and stores the data in the browser. And the date is disappears when the user closes the browser. The use case would be let's say we went to show an popup for first time when the user is entering the website. We want to show the popup only once. So we can use session storage.\n\n```javascript\nconst sessionStorage = window.sessionStorage;\nsessionStorage.setItem('isFirstTime', 'false');\nconst isFirstTime = sessionStorage.getItem('isFirstTime');\nif (isFirstTime === 'false') {\n\t// do something\n}\n```\n","section":"js"},{"title":"What is web storage?","content":"\nWeb storage is a way to store data on a web browser. There are many different types of web storage all are useful to personalize the user experience. Persisting previous site activity. Saving data and assets locally so that the user does not have to re-download them.\n","section":"js"},{"title":"Why do we use setInterval in JavaScript?","content":"\nThe `setInterval()` method, offered repeatedly calls a function or executes a code snippet, with a fixed time delay between each call. A function to be executed every delay milliseconds. The first execution happens after delay milliseconds.\n\n```javascript\nsetInterval(() => {\n\tconsole.log('Hello');\n}, 1000);\n\n// Hello\n// Hello\n// Hello\n// Hello\n// .......\n```\n","section":"js"},{"title":"Why do we use web workers?","content":"\nWeb workers are designed to let you run big jobs without freezing up the page. For example, imagine you want to do some complex calculations when someone clicks a button. If you start doing the job right away, you’ll tie everything up. The person using the page won’t be able to scroll or click anything. They might even get the dreaded “this page is unresponsive” error message.\n\n![web-worker-page-unresponsive](./images/web-worker-page-unresponsive.png)\n\n**worker.js**\n\n```javascript\nfunction clock() {\n\tsetInterval(() => {\n\t\tpostMessage(`tick ${new Date().toLocaleTimeString()}`);\n\t}, 1000);\n}\nclock();\n```\n\n**index.js**\n\n```javascript\nconst w = new Worker('./worker.js');\nw.onmessage = function (event) {\n\tconsole.log(event.data);\n};\n```\n","section":"js"},{"title":"What are closures?","content":"\nclosure is a function that has access to the variables of its outer function even after the outer function has returned. Also Closure is concept of function + lexical environment in which function it was created . so every function declared within the another function then it has access to the scope chain of outer function and the variables created within the scope of outer function will not get destroyed.\n\n```javascript\nfunction outerFunction(arg) {\n\tvar outerVar = arg;\n\treturn function innerFunction(innerArg) {\n\t\treturn outerVar + innerArg;\n\t};\n}\n\nvar innerFunction = outerFunction(10);\nconsole.log(innerFunction(20)); // 30\nconsole.log(innerFunction(30)); // 50\n```\n","section":"js"},{"title":"What are closures scope chains?","content":"\nClosures are functions that have access to the outer function’s variables even after the outer function has returned. This is useful when you want to return a function from a function and you want to be able to access the outer function’s variables. Every closure has three scopes: its scope, the outer function’s scope, and the global scope.\n","section":"js"},{"title":"How does a web browser work","content":"\n## How does a web browser work\n\nBrowser is a program that runs in the background and is responsible for rendering the web page. When a web page is requested, the browser sends a request to the server. The server then sends the web page back to the browser. When the web browser fetches data from an internet connected server, it uses a piece of software called a rendering engine to translate that data into text and images. This data is written in Hypertext Markup Language (HTML) and web browsers read this code to create what we see, hear and experience on the internet.\n","section":"js","source":"https://www.mozilla.org/en-US/firefox/browsers/what-is-a-browser/#:~:text=When%20the%20web%20browser%20fetches,and%20experience%20on%20the%20internet."},{"title":"Implement Array at polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\n```js\nArray.prototype.atImpl = function (index) {\n\treturn this[index]\n}\n```\n\n</details>\n","section":"js"},{"title":"Implement Array concat polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n```js\nArray.prototype.concatImpl = function (arr) {\n\tconst newArr = this.slice()\n\tnewArr.push(...arr)\n\treturn newArr\n}\n```\n</details>\n","section":"js"},{"title":"Implement Array copywithin polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\n```js\nfunction copyWithin(array, target, start, end) {\n\tlet shift = target - start\n\tif (shift < 0) {\n\t\tend = Math.min(end, array.length)\n\t\tfor (let i = start; i < end; i++) {\n\t\t\tarray[i + shift] = array[i]\n\t\t}\n\t} else {\n\t\tfor (let i = Math.min(end, array.length - shift) - 1; i >= start; i--) {\n\t\t\tarray[i + shift] = array[i]\n\t\t}\n\t}\n\treturn array\n}\n```\n\n</details>\n","section":"js"},{"title":"Implement Array every polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\n```js\nArray.prototype.everyImpl = function (callback) {\n\tfor (let i = 0; i < this.length; i++) {\n\t\tif (!callback(this[i], i, this)) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n```\n\n</details>\n","section":"js"},{"title":"Implement Array fill polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\t\n```js\nArray.prototype.fillImpl = function (value, start, end) {\n\tstart = start || 0\n\tend = end || this.length\n\tfor (let i = start; i < end; i++) {\n\t\tthis[i] = value\n\t}\n}\n```\n</details>\n","section":"js"},{"title":"Implement Array filter polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\t\n```js\nArray.prototype.filterImpl = function (callback) {\n\tconst result = []\n\tfor (let i = 0; i < this.length; i++) {\n\t\tif (callback(this[i], i, this)) {\n\t\t\tresult.push(this[i])\n\t\t}\n\t}\n\treturn result\n}\n```\n</details>\n","section":"js"},{"title":"Implement Array find polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\t\n```js\nArray.prototype.findImpl = function (callback) {\n\tfor (let i = 0; i < this.length; i++) {\n\t\tif (callback(this[i])) {\n\t\t\treturn this[i]\n\t\t}\n\t}\n\treturn undefined\n}\n```\n</details>\n","section":"js"},{"title":"Implement Array forEach polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\t\n```js\nArray.prototype.forEachImpl = function (callback) {\n\tfor (let i = 0; i < this.length; i++) {\n\t\tcallback(this[i], i, this)\n\t}\n}\n```\n</details>\n","section":"js"},{"title":"Implement Array includes polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\t\n```js\nArray.prototype.includesImpl = function (value) {\n\tfor (let i = 0; i < this.length; i++) {\n\t\tif (this[i] === value) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n```\n</details>\n","section":"js"},{"title":"Implement Array indexOf polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\t\n```js\nArray.prototype.indexOfImpl = function (value) {\n\tfor (let i = 0; i < this.length; i++) {\n\t\tif (this[i] === value) {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n```\n</details>\n","section":"js"},{"title":"Implement Array join polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\t\n```js\nArray.prototype.joinImpl = function (separator) {\n\tconst arr = this\n\tlet str = ''\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tstr += arr[i]\n\t\tif (i < arr.length - 1) {\n\t\t\tstr += separator\n\t\t}\n\t}\n\treturn str\n}\n```\n</details>\n","section":"js"},{"title":"Implement Array map polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\t\n```js\nArray.prototype.mapImpl = function (fn) {\n\tconst result = []\n\tfor (let i = 0; i < this.length; i++) {\n\t\tresult.push(fn(this[i]))\n\t}\n\treturn result\n}\n```\n</details>\n","section":"js"},{"title":"Implement Array slice polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\t\n```js\nArray.prototype.sliceImpl = function (start = 0, end = this.length) {\n\tlet arr = []\n\tfor (let i = 0; i < this.length; i++) {\n\t\tif (start <= i && end >= i) {\n\t\t\tarr.push(this[i])\n\t\t}\n\t}\n\treturn arr\n}\n```\n</details>\n","section":"js"},{"title":"Implement Array some polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\t\n```js\nArray.prototype.someImpl = function (callback) {\n\tlet passed = false\n\tfor (let i = 0; i < this.length; i++) {\n\t\tif (callback && callback(this[i], i, this)) {\n\t\t\tpassed = true\n\t\t\tbreak\n\t\t} else {\n\t\t\tpassed = false\n\t\t}\n\t}\n\treturn passed\n}\n\n```\n</details>\n```\n","section":"js"},{"title":"Implement Array unshift polyfill ?","content":"\n<details>\n    <summary>Answer</summary>\n\t\n```js\nArray.prototype.unshiftImpl = function (...args) {\n\tfor (let i = 0; i < args.length; i++) {\n\t\tthis.splice(i, 0, args[i])\n\t}\n\treturn this.length\n}\n\n```\n</details>\n```\n","section":"js"},{"title":"Implement stack data structure ?","content":"\n<details>\n    <summary>Answer</summary>\n\t\n```js\nclass Stack {\n\tconstructor() {\n\t\tthis.items = []\n\t}\n\tpush(item) {\n\t\tthis.items.push(item)\n\t}\n\tpop() {\n\t\treturn this.items.pop()\n\t}\n\tpeek() {\n\t\treturn this.items[this.items.length - 1]\n\t}\n\tisEmpty() {\n\t\treturn this.items.length === 0\n\t}\n\tclear() {\n\t\tthis.items = []\n\t}\n}\n\n```\n</details>\n```\n","section":"js"},{"title":"What is the output of below code","content":"\n```javascript\nconsole.log(sum(2, 3)); // Outputs 5\nconsole.log(sum(2)(3)); // Outputs 5\n```\n\n<details>\n    <summary>Answer</summary>\n\n```javascript\nfunction sum(x) {\n\tif (arguments.length === 2) {\n\t\treturn arguments[0] + arguments[1];\n\t} else {\n\t\treturn function (y) {\n\t\t\treturn x + y;\n\t\t};\n\t}\n}\n```\n\n</details>\n","section":"js"},{"title":"What is the output of below code","content":"\n```javascript\nvar arr1 = 'john'.split('');\nvar arr2 = arr1.reverse();\nvar arr3 = 'jones'.split('');\narr2.push(arr3);\n\nconsole.log('array 1: length=' + arr1.length + ' last=' + arr1.slice(-1));\nconsole.log('array 2: length=' + arr2.length + ' last=' + arr2.slice(-1));\n```\n\n<details>\n    <summary>Answer</summary>\n\n```javascript\n// array 1: length=5 last=j,o,n,e,s\n// array 2: length=5 last=j,o,n,e,s\n```\n\n</details>\n","section":"js"},{"title":"What will the following code output to the console and why?","content":"\n```javascript\nvar hero = {\n\t_name: 'John Doe',\n\tgetSecretIdentity: function () {\n\t\treturn this._name;\n\t}\n};\n\nvar stoleSecretIdentity = hero.getSecretIdentity;\n\nconsole.log(stoleSecretIdentity());\nconsole.log(hero.getSecretIdentity());\n```\n\n<details>\n    <summary>Answer</summary>\n\nThe code will output:\n\n```js\nundefined\nJohn Doe\n```\n\nThe first `console.log` prints undefined because we are extracting the method from the hero object, so stoleSecretIdentity() is being invoked in the global context (i.e., the window object) where the \\_name property does not exist.\n\nOne way to fix the stoleSecretIdentity() function is as follows:\n\n```js\nvar stoleSecretIdentity = hero.getSecretIdentity.bind(hero);\n```\n\n</details>\n","section":"js"},{"title":"Consider the following code. What will the output be, and why?","content":"\n```javascript\n;(function () {\n\ttry {\n\t\tthrow new Error()\n\t} catch (x) {\n\t\tvar x = 1,\n\t\t\ty = 2\n\t\tconsole.log('INSIDE', x)\n\t\tconsole.log('INSIDE', y)\n\t}\n\tconsole.log('OUTSIDE', x)\n\tconsole.log('OUTSIDE', y)\n})()\n```\n\n<details>\n    <summary>Answer</summary>\n\n```js\nINSIDE 1\nINSIDE 2\nOUTSIDE undefined\nOUTSIDE 2\n```\n\nvar statements are hoisted (without their value initialization) to the top of the global or function scope it belongs to, even when it’s inside a with or catch block. However, the error’s identifier is only visible inside the catch block. It is equivalent to:\n\n```js\n;(function () {\n\tvar x, y // outer and hoisted\n\ttry {\n\t\tthrow new Error()\n\t} catch (x /* inner */) {\n\t\tx = 1 // inner x, not the outer one\n\t\ty = 2 // there is only one y, which is in the outer scope\n\t\tconsole.log(x /* inner */)\n\t}\n\tconsole.log(x)\n\tconsole.log(y)\n})()\n```\n\n</details>\n","section":"js","source":"https://www.toptal.com"},{"title":"What will be the output of this code?","content":"\n```javascript\nvar x = 21;\nvar girl = function () {\n\tconsole.log(x);\n\tvar x = 20;\n};\ngirl();\n```\n\n<details>\n    <summary>Answer</summary>\n\n```js\n// Load state\nvar x = undefined;\nvar girl = function () {\n\tconsole.log(x);\n\tvar x = 20;\n};\n\n// Execution State\nvar x = 21;\n// loading State\nvar girl = function () {\n\tvar x = undefined;\n\tconsole.log(x);\n};\n// Execution State\nvar girl = function () {\n\tvar x = undefined;\n\tconsole.log(x); // undefined\n\tx = 20;\n};\n```\n\nNeither 21, nor 20, the result is undefined\n\nIt’s because JavaScript initialization is not hoisted.\n\n(Why doesn’t it show the global value of 21? The reason is that when the function is executed, it checks that there’s a local x variable present but doesn’t yet declare it, so it won’t look for global one.)\n\n</details>\n","section":"js","source":"https://www.toptal.com"},{"title":"How do you add an element at the begining of an array? How do you add one at the end?","content":"\n<details>\n    <summary>Answer</summary>\n\n```js\nvar myArray = ['a', 'b', 'c', 'd'];\nmyArray.push('end');\nmyArray.unshift('start');\nconsole.log(myArray); // [\"start\", \"a\", \"b\", \"c\", \"d\", \"end\"]\n```\n\nWith ES6, one can use the spread operator:\n\n```js\nmyArray = ['start', ...myArray, 'end'];\n```\n\n</details>\n","section":"js","source":"https://www.toptal.com"},{"title":"What is the value of typeof undefined == typeof NULL?","content":"\n<details>\n    <summary>Answer</summary>\n\nThe expression will be evaluated to true, since NULL will be treated as any other undefined variable.\n\nNote: JavaScript is case-sensitive and here we are using NULL instead of null.\n\n</details>\n","section":"js","source":"https://www.toptal.com"},{"title":"What would following code return?","content":"\n```js\nconsole.log(typeof typeof 1);\n```\n\n<details>\n    <summary>Answer</summary>\n\n`string`\ntypeof 1 will return `\"number\"` and typeof `\"number\"` will return `string`.\n\n</details>\n","section":"js","source":"https://www.toptal.com"},{"title":"What will the following code output and why?","content":"\n```js\nvar b = 1;\nfunction outer() {\n\tvar b = 2;\n\tfunction inner() {\n\t\tb++;\n\t\tvar b = 3;\n\t\tconsole.log(b);\n\t}\n\tinner();\n}\nouter();\n```\n\n<details>\n    <summary>Answer</summary>\n\nOutput to the console will be “3”.\n\nThere are three closures in the example, each with it’s own var b declaration. When a variable is invoked closures will be checked in order from local to global until an instance is found. Since the inner closure has a b variable of its own, that is what will be output.\n\nFurthermore, due to hoisting the code in inner will be interpreted as follows:\n\n```js\nfunction inner() {\n\tvar b; // b is undefined\n\tb++; // b is NaN\n\tb = 3; // b is 3\n\tconsole.log(b); // output \"3\"\n}\n```\n\n</details>\n","section":"js","source":"https://www.toptal.com"},{"title":"What is the output of below code ?","content":"\n```js\nvar car = new Vehicle('Honda', 'white', '2010', 'UK');\nconsole.log(car);\nfunction Vehicle(model, color, year, country) {\n\tthis.model = model;\n\tthis.color = color;\n\tthis.year = year;\n\tthis.country = country;\n}\n```\n\n<details>\n    <summary>Answer</summary>\n\nThe function declarations are hoisted similar to any variables. So the placement for Vehicle function declaration doesn't make any difference.\n\n</details>\n","section":"js","source":"https://github.com/sudheerj/javascript-interview-questions#coding-exercise"},{"title":"What is the output of below code ?","content":"\n```js\nfunction foo() {\n\tlet x = (y = 0);\n\tx++;\n\ty++;\n\treturn x;\n}\n\nconsole.log(foo(), typeof x, typeof y);\n```\n\n<details>\n    <summary>Answer</summary>\n\nOf course the return value of foo() is 1 due to the increment operator. But the statement let x = y = 0 declares a local variable x. Whereas y declared as a global variable accidentally. This statement is equivalent to,\n\n```js\nlet x;\nwindow.y = 0;\nx = window.y;\n```\n\n</details>\n","section":"js","source":"https://github.com/sudheerj/javascript-interview-questions"},{"title":"What's the output?","content":"\n```js\nfunction sayHi() {\n\tconsole.log(name)\n\tconsole.log(age)\n\tvar name = 'Lydia'\n\tlet age = 21\n}\n\nsayHi()\n```\n\n<details>\n    <summary>Answer</summary>\n\nWithin the function, we first declare the name variable with the var keyword. This means that the variable gets hoisted (memory space is set up during the creation phase) with the default value of undefined, until we actually get to the line where we define the variable. We haven't defined the variable yet on the line where we try to log the name variable, so it still holds the value of undefined.\n\nVariables with the let keyword (and const) are hoisted, but unlike var, don't get initialized. They are not accessible before the line we declare (initialize) them. This is called the \"temporal dead zone\". When we try to access the variables before they are declared, JavaScript throws a ReferenceError.\n\n</details>\n","section":"js","source":"https://github.com/lydiahallie/javascript-questions"},{"title":"What's the output?","content":"\n```js\nlet c = { greeting: 'Hey!' }\nlet d\n\nd = c\nc.greeting = 'Hello'\nconsole.log(d.greeting)\n```\n\n<details>\n    <summary>Answer</summary>\n\nIn JavaScript, all objects interact by reference when setting them equal to each other.\n\nFirst, variable c holds a value to an object. Later, we assign d with the same reference that c has to the object.\nWhen you change one object, you change all of them.\n\n</details>\n","section":"js","source":"https://github.com/lydiahallie/javascript-questions"},{"title":"What's the output?","content":"\n```js\nclass Chameleon {\n\tstatic colorChange(newColor) {\n\t\tthis.newColor = newColor\n\t\treturn this.newColor\n\t}\n\n\tconstructor({ newColor = 'green' } = {}) {\n\t\tthis.newColor = newColor\n\t}\n}\n\nconst freddie = new Chameleon({ newColor: 'purple' })\nconsole.log(freddie.colorChange('orange'))\n```\n\n<details>\n    <summary>Answer</summary>\n    \nThe colorChange function is static. Static methods are designed to live only on the constructor in which they are created, and cannot be passed down to any children or called upon class instances. Since freddie is an instance of class Chameleon, the function cannot be called upon it. A TypeError is thrown.\n\n</details>\n","section":"js","source":"https://github.com/lydiahallie/javascript-questions"}],"nodejs":[{"title":"What is Node.js?","content":"\nNode.js is a JavaScript runtime built on Chrome's V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js' package ecosystem, npm, is the largest ecosystem of open source libraries in the world.\n","section":"nodejs"},{"title":"What is web server ?","content":"\nA web server is a software and hardware that uses HTTP (Hypertext Transfer Protocol) and other protocols to respond to client requests made over the World Wide Web. A web server can be a computer system that hosts a website or a system that hosts specific content on the internet. The man job of a web server is to store, process and deliver web pages to users. Beside HTTP, web servers can also support other protocols such as FTP (File Transfer Protocol) and SMTP (Simple Mail Transfer Protocol).\n","section":"nodejs"},{"title":"What is node jS http module ?","content":"\nNode.js has a built-in module called HTTP, which allows Node.js to transfer data over the Hyper Text Transfer Protocol (HTTP).\n\n**Example**\n\n```js\nvar http = require('http')\n\nhttp\n\t.createServer(function (req, res) {\n\t\tres.write('Hello World!') //write a response to the client\n\t\tres.end() //end the response\n\t})\n\t.listen(8080) //the server object listens on port 8080\n```\n\nSo when we visit http://localhost:8080/ in our browser, we will see the text \"Hello World!\".\n","section":"nodejs"},{"title":"What is the purpose of HTTP Header","content":"\nAn HTTP header is a field of an HTTP request or response that passes additional context and metadata about the request or response. For example, a request message can use headers to indicate it's preferred media formats, while a response can use header to indicate the media format of the returned body.\n\n**Example**\n\n```js\nconst http = require('http')\n\nhttp\n\t.createServer(function (req, res) {\n\t\tres.writeHead(200, { 'Content-Type': 'text/html' })\n\t\tres.write('Hello World!') //write a response to the client\n\t\tres.end() //end the response\n\t})\n\t.listen(8080) //the server object listens on port 8080\n```\n","section":"nodejs"},{"title":"How nodejs process works ?","content":"\nNodeJS is a single threaded process. It means that it can only do one thing at a time that is why it is called as a single threaded process. But it can do many things at a time by using asynchronous programming and event loop.\n\nWhen request comes from the client, it accept this request and pass though the worker thead for process necessary things. After that it will send the response to the client. In this process, it will not wait for the response from the worker thread. It will continue to accept the next request. This is the reason why NodeJS is called as a single threaded process but non-blocking I/O.\n","section":"nodejs"},{"title":"What are the features of nodejs","content":"\n- Asynchronous and Event Driven\n- Fast code execution (V8 Engine).\n- Single Threaded but Highly Scalable\n- No Buffering\n- Large Community Support\n","section":"nodejs"},{"title":"What is purpose of node js url module","content":"\nThe URL module splits up a web address into readable parts.\n\n**Syntax**\n\n```js\nconst url = require('url')\n\nconst myURL = new URL('https://example.org/foo')\n\nconsole.log(myURL.href) // https://example.org/foo\n\nconsole.log(myURL.protocol) // https:\n\nconsole.log(myURL.host) // example.org\n\nconsole.log(myURL.hostname) // example.org\n\nconsole.log(myURL.port) // 443\n\nconsole.log(myURL.pathname) // /foo\n\nconsole.log(myURL.search) // ''\n\nconsole.log(myURL.searchParams) // URLSearchParams {}\n```\n","section":"nodejs"},{"title":"What is Buffers data type?","content":"\nThe Buffer class in Node. js is designed to handle raw binary data. Each buffer corresponds to some raw memory allocated outside V8. Buffers act somewhat like arrays of integers, but aren't resizable and have a whole bunch of methods specifically for binary data.\n\n```js\nconst buf = Buffer.from('Hello World', 'utf8')\n\nconsole.log(buf) // <Buffer 48 65 6c 6c 6f 20 57 6f 72 6c 64>\n\nconsole.log(buf.toString()) // Hello World\n\nconsole.log(buf.toString('hex')) // 48656c6c6f20576f726c64\n\nconsole.log(buf.toString('base64')) // SGVsbG8gV29ybGQ=\n```\n","section":"nodejs"},{"title":"What is EventEmitter in Node.js?","content":"\nThe EventEmitter is a class which is available to us by importing the events module. It is used to handle events and emit events. It is a built-in module in Node.js.\n\n```js\nconst EventEmitter = require('events')\n\nconst eventEmitter = new EventEmitter()\n\nsetTimeout(() => {\n\teventEmitter.emit('tutorial', 1, 2)\n}, 3000)\n\neventEmitter.on('tutorial', (num1, num2) => {\n\tconsole.log(num1 + num2)\n})\n```\n\nThe above code will output 3 after 3 seconds.\n","section":"nodejs"},{"title":"What is process events in nodejs","content":"\nProcess object provides information about the current or running process. It is a global object and can be accessed from anywhere. It is an instance of EventEmitter class. It is an event emitter object.\n","section":"nodejs"},{"title":"How can we read a file content in nodejs","content":"\nUsing fs module we can read a file content in nodejs. We can use readFile() method to read a file content. It takes two arguments, first is the file path and second is the callback function. The callback function takes two arguments, first is error and second is the data. If there is no error then data will be the file content.\n\n```js\nconst fs = require('fs')\n\nfs.readFile('file.txt', (err, data) => {\n\tif (err) throw err\n\tconsole.log(data)\n})\n```\n","section":"nodejs"},{"title":"What Is a Node.js Stream?","content":"\nStreams are a built-in feature in Node.js and represent asynchronous flow of data. Streams are also a way to handle reading and/or writing files. A Node.js stream can help process large files larger than the free memory of your computer, since it processes the data in small chunks.\n","section":"nodejs"},{"title":"What is HTTP ?","content":"\nHTTP (Hypertext Transfer Protocol) is a protocol that is used to transfer data between a client and a server. HTTP is a stateless protocol, which means that the server does not keep any data (state) between two requests. There are a secure variant of HTTP called HTTPS (Hypertext Transfer Protocol Secure) that uses SSL/TLS to encrypt the communication between the client and the server.\n","section":"nodejs"},{"title":"What is cluster in nodejs","content":"\nCluster is a module in Node.js that allows us to create multiple instances of a server. This is useful when we want to take advantage of multi-core systems. It allows us to create child processes that all share server ports.\n\n```js\nconst cluster = require('cluster')\nconst express = require('express')\n// Constants\nconst PORT = 8080\n\n// App\nconst app = express()\napp.get('/', (req, res) => {\n\tres.send('Hello world\\n')\n})\n\nif (cluster.isMaster) {\n\t// Count the machine's CPUs\n\tconst cpuCount = require('os').cpus().length\n\n\t// Create a worker for each CPU\n\tfor (let i = 0; i < cpuCount; i += 1) {\n\t\tcluster.fork()\n\t}\n\n\t// Listen for dying workers\n\tcluster.on('exit', (worker) => {\n\t\t// Replace the dead worker,\n\t\t// we're not sentimental\n\t\tconsole.log('Worker %d died :(', worker.id)\n\t\tcluster.fork()\n\t})\n\n\t// Code to run if we're in a worker process\n} else {\n\tapp.listen(PORT)\n\tconsole.log('Running on http://localhost:' + PORT)\n}\n```\n","section":"nodejs"},{"title":"What is difference between concurrency and parallelism ?","content":"\nConcurrency is when two or more tasks can start, run, and complete in overlapping time periods. It doesn't necessarily mean they'll ever both be running at the same instant. For example, multitasking on a single-core machine.\n\nParallelism is when tasks literally run at the same time, e.g., on a multicore processor.\n","section":"nodejs"},{"title":"What is JWT ?","content":"\nJWT, or JSON Web Token, is an open standard used to share security information between two parties — a client and a server. Each JWT contains encoded JSON objects, including a set of claims. JWTs are signed using a cryptographic algorithm to ensure that the claims cannot be altered after the token is issued.\n","section":"nodejs"},{"title":"what is middleware in node js","content":"\nMiddleware is a function that has access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle. The next middleware function is commonly denoted by a variable named next.\n\n## Express Middleware\n\n```js\nconst express = require('express')\nconst app = express()\n\napp.use((req, res, next) => {\n\tconsole.log('Time:', Date.now())\n\tnext()\n})\n\napp.get('/', (req, res) => {\n\tres.send('Hello World!')\n})\n\napp.listen(3000)\n```\n","section":"nodejs"},{"title":"What is use of middleware in node js ?","content":"\nMiddleware can be used to perform the following tasks:\n\n- Execute any code.\n- Make changes to the request and the response objects.\n- End the request-response cycle.\n- Call the next middleware in the stack.\n","section":"nodejs"},{"title":"what is the use of helmet in node js","content":"\nHelmet helps you secure your Express apps by setting various HTTP headers. It's not a silver bullet, but it can help! Helmet is actually just a collection of smaller middleware functions that set security-related HTTP response headers:\n\n## How to use\n\n```js\nconst express = require('express')\nconst helmet = require('helmet')\n\nconst app = express()\n\napp.use(helmet.contentSecurityPolicy())\napp.use(helmet.crossOriginEmbedderPolicy())\napp.use(helmet.crossOriginOpenerPolicy())\napp.use(helmet.crossOriginResourcePolicy())\napp.use(helmet.dnsPrefetchControl())\napp.use(helmet.expectCt())\napp.use(helmet.frameguard())\napp.use(helmet.hidePoweredBy())\napp.use(helmet.hsts())\napp.use(helmet.ieNoOpen())\napp.use(helmet.noSniff())\napp.use(helmet.originAgentCluster())\napp.use(helmet.permittedCrossDomainPolicies())\napp.use(helmet.referrerPolicy())\napp.use(helmet.xssFilter())\n\napp.listen(3000)\n```\n","section":"nodejs"},{"title":"what is rest api in nodejs?","content":"\nREST APIs are used to access and manipulate data using a common set of stateless operations. These operations are integral to the HTTP protocol and represent essential create, read, update, and delete (CRUD) functionality. REST APIs are designed to be lightweight and fast, and are often used to provide public access to data for third-party developers.\n","section":"nodejs"},{"title":"What's the difference between req.params and req.query?","content":"\nThe first difference between query and path parameters is their position in the URL. While the query parameters appear on the right side of the '? ' in the URL, path parameters come before the question mark sign. Secondly, the query parameters are used to sort/filter resources.\n","section":"nodejs"},{"title":"What is routing in nodejs ?","content":"\nRouting refers to how an application's endpoints (URIs) respond to client requests. For an introduction to routing, see Basic routing.\n","section":"nodejs"},{"title":"What is child process in nodejs ?","content":"\nNodeJS in single threaded. It means that it can only do one thing at a time. If you want to do multiple things at the same time, you need to use child process. For example, if you want to run a long running task in the background, you can use child process.\n","section":"nodejs"},{"title":"what are http methods ?","content":"\n- GET: The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.\n- POST: The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.\n\n- PUT: The PUT method replaces all current representations of the target resource with the request payload.\n\n- DELETE: The DELETE method deletes the specified resource.\n\n- PATCH: The PATCH method is used to apply partial modifications to a resource.\n","section":"nodejs"},{"title":"What is crypto in node js?","content":"\nCrypto is a module in Node. js which deals with an algorithm that performs data encryption and decryption. This is used for security purpose like user authentication where storing the password in Database in the encrypted form. Crypto module provides set of classes like hash, HMAC, cipher, decipher, sign, and verify.\n","section":"nodejs"},{"title":"What is ftp protocol ?","content":"\nFTP (File Transfer Protocol) is a protocol that is used to transfer files between a client and a server. FTP is a stateful protocol, which means that the server keeps the state between two requests. There are a secure variant of FTP called FTPS (File Transfer Protocol Secure) that uses SSL/TLS to encrypt the communication between the client and the server.\n","section":"nodejs"},{"title":"What is thread in computer ?","content":"\nA thread is an execution context, which is all the information a CPU needs to execute a stream of instructions.\n","section":"nodejs"},{"title":"How Node.js works","content":"\nNodeJS is a runtime environment for executing JavaScript code. It is built on top of the V8 JavaScript engine, the same engine that powers Google Chrome. NodeJS uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.\n\nFor example when a user makes a request to a web server, the server will start processing the request and return a response. While the server is processing the request, it can still accept and process other requests. This is made possible by the event loop. The event loop allows NodeJS to perform non-blocking I/O operations even though JavaScript is single-threaded.\n","section":"nodejs"},{"title":"What is cpu intensive tasks in NodeJS ?","content":"\nIn NodeJS CPU intensive tasks are those tasks which process\n","section":"nodejs"},{"title":"Is node js really single threaded ?","content":"\nNo. NodeJS is not single threaded.\nThe nodejs event loop is process single threaded, But the async blocking I/O operation are delegated to the worker threads.\n","section":"nodejs"},{"title":"What Can Node.js Do?","content":"\n- Node.js can generate dynamic page content\n- NodeJS can create, open, read, write, delete, and close files on the server.\n- NodeJS can collect form data\n- Can add , delete, modify data in your database.\n","section":"nodejs"}],"operating-system":[{"title":"What is the POSIX standard and what does it specify?","content":"\nThe POSIX standard, or Portable Operating System Interface, specifies a set of APIs and standards for software development on Unix-like operating systems. It provides a common interface for interacting with the operating system, including file management, process management, and inter-process communication.\n","section":"operating-system"},{"title":"How does POSIX handle process management?","content":"\nPOSIX provides a set of functions for creating, managing, and terminating processes. These functions include fork(), exec(), and wait(). The fork() function creates a new process, the exec() function replaces the current process with a new one, and the wait() function waits for a child process to terminate.\n","section":"operating-system"},{"title":"What is the difference between POSIX and UNIX?","content":"\nUNIX is a proprietary operating system developed by Bell Labs in the 1970s, while POSIX is a set of standards for ensuring compatibility and interoperability between different UNIX-based operating systems. UNIX is not necessarily POSIX-compliant, but many UNIX-like operating systems, such as Linux and macOS, are POSIX-compliant.\n","section":"operating-system"},{"title":"How does POSIX ensure compatibility between different operating systems?","content":"\nPOSIX defines a set of standard APIs, system calls, and command-line utilities that all POSIX-compliant operating systems must implement. This ensures that programs written to the POSIX standard will run the same way on any POSIX-compliant operating system.\n","section":"operating-system"},{"title":"What is the role of the C library in the POSIX standard?","content":"\nThe C library is a collection of functions and macros that provide standard functionality for POSIX-compliant operating systems. These functions include things like input/output operations, memory management, and string manipulation. The C library is a crucial component of the POSIX standard, as it provides a consistent programming interface across different operating systems.\n","section":"operating-system"}],"react":[{"title":"Why Not To Modify React State Directly ?","content":"\nWhen we manually modify the state it won't trigger the component to re-render. So it's better to use the setState method.\n\n```jsx\nthis.setState({\n\tcount: this.state.count + 1,\n})\n```\n\n```jsx\nconst [count, setCount] = useState(0)\nsetCount(count + 1)\n```\n","section":"react","source":"https://www.xxxxx.com"},{"title":"Difference between HTML and React Event Handling?","content":"\nThere are have some syntactic and differences rules between HTML and React event handling.\n\n**HTML** HTML event handling is done using the attribute or the addEventListener method. It directly works on the DOM (Real) element.\n\n```html\n<button onclick=\"alert('Hello')\">Click Me</button>\n\n<script>\n\tconst button = document.querySelector('button')\n\tbutton.addEventListener('click', function () {\n\t\talert('Hello')\n\t})\n</script>\n```\n\n**React** we use the concept of virtual DOM, so all the events need to specify at the time of creating the component. Here in App.js file, we have defined one component App, which is having a button. We have used “onClick” event and we are providing a method name instead of a string. As in JSX,\n\n```jsx\nconst App = () => {\n\tconst handleClick = () => {\n\t\talert('Hello')\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={handleClick}>Click Me</button>\n\t\t</div>\n\t)\n}\n```\n","section":"react","source":"https://www.geeksforgeeks.org/difference-between-html-and-react-event-handling/"},{"title":"Why Jsx?","content":"\nJSX is a JavaScript syntax extension for React. It allows you to write HTML-like syntax in your JavaScript code. React doesn’t require using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.\n\n**JSX in React**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst element = <h1>Hello, world!</h1>\n\nReactDOM.render(element, document.getElementById('root'))\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"Can browser read JSX directly?","content":"\nNo - Browser can't read JSX Because it is not a valid JavaScript syntax. Browser engine can't understand It and it will throw an error. JSX is not intended to implemented by the engine or browser. it is intended to be used by various transpilers and bundlers to convert JSX to JavaScript.\n","section":"react","source":"https://reactjs.org/"},{"title":"How do you use JavaScript in JSX?","content":"\nTo add Javascript code inside JSX, you need to use the { } syntax. In curly braces, you can write any valid JavaScript code. The code will be executed when the component is rendered.\n\n**Example of Javascript in JSX**\n\n```jsx\nconst App = () => (\n\t<div>\n\t\t<h1>{2 + 2}</h1>\n\t\t<p>This is a paragraph.</p>\n\t</div>\n)\n```\n\nThe above code will render the following HTML:\n\n```html\n<div>\n\t<h1>4</h1>\n\t<p>This is a paragraph.</p>\n</div>\n```\n\nWe can also use Javascript expressions inside attributes of JSX elements.\n\n```jsx\nconst App = () => {\n\tconst source = 'https://facebook.github.io/react/img/logo_og.png'\n\treturn (\n\t\t<div>\n\t\t\t<img src={source} />\n\t\t</div>\n\t)\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What is Immutable ?","content":"\nImmutable is a data structure that cannot be changed. For example, if you change the value of a property, the property is no longer the same. Immutable data structures are often used to prevent bugs from happening. In Immutable, you can't change the value of a property.\n\n**Example of Immutable**\n\n```js\n'use strict'\nconst obj = {\n\tname: 'John',\n\tage: 30,\n}\n\nconst newObj = Object.freeze(obj)\nnewObj.age = 40\n// throws an error Uncaught TypeError: Cannot assign to read only property 'age' of object '#<Object>'\n```\n","section":"react"},{"title":"What is component and props in React?","content":"\nComponent is a function It accepts props as an argument and returns a React element. Return elements describe the UI how it should look. A component can be uses in other components jsx, or in the root component. In React there are two types of components: Class based and Functional Components.\n\n**Class based Components**\nClass based components are the most common type of components. They are the ones that are written in JavaScript ES6 classes.\n\n```js\nclass MyComponent extends React.Component {\n\trender() {\n\t\treturn <h1>Hello World</h1>\n\t}\n}\n```\n\n**Functional Components**\nFunctional components are the ones that are written in JavaScript ES6 functions.\n\n```js\nconst MyComponent = () => <h1>Hello World</h1>\n```\n\n### **Props**\n\nProps are the properties that are passed to a component.\n\n```js\nconst MyComponent = (props) => <h1>{props.title}</h1>\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"Why should Component names start with capital letter in React?","content":"\nIf you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.\n","section":"react","source":"https://reactjs.org/"},{"title":"What is mount and unmount React?","content":"\nThe main job of React is to figure out what to render to the screen. React will do this by comparing the current state of the application to the previous state. React does so by `mounting` and `unmounting` components. When a component is mounted, React will render it to the DOM. When a component is unmounted, React will remove it from the DOM.\n","section":"react","source":"https://reactjs.org/"},{"title":"When render is called in React?","content":"\nFirst of all, `render()` is not user callable. It is part of the React component lifecycle. Generally, it gets called by React at various app stages when the React component instantiates for the first time, or when there is a new update to the component state. Render does not take any arguments and returns a JSX.\n","section":"react","source":"https://reactjs.org/"},{"title":"What is uses of componentDidMount in react","content":"\nComponentDidMount is a special method that React calls after the component has been rendered to the DOM. This is a good place to put your setup code.\n\n**Note:** ComponentDidMount is called after the component has been rendered, not before.\n\n```jsx\nclass MyComponent extends React.Component {\n\tcomponentDidMount() {\n\t\t// do something\n\t}\n\trender() {\n\t\treturn <div />\n\t}\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"Why is the key important in React list?","content":"\nThe main purpose of keys is to help React differentiate and distinguish elements from each other, increasing its performance when diffing between the virtual and real DOM. To use keys, simply add the prop inside an element such as `<li>` . Unique IDs are the best value to assign to keys.\n\n**Example:**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst App = () => {\n\tconst names = ['John', 'Sara', 'Mark']\n\treturn (\n\t\t<div>\n\t\t\t<h1>Hello World</h1>\n\t\t\t<ul>\n\t\t\t\t{names.map((name, index) => (\n\t\t\t\t\t<li key={index}>{name}</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t)\n}\n```\n","section":"react","source":"https://betterprogramming.pub/why-react-keys-matter-an-introduction-136b7447cefc"},{"title":"What is the use of componentWillUnmount?","content":"\nThis life cycle method is called when a component is unmounted and destroyed. It is a good place to clean up any resources that were allocated during the component's life cycle. Such as timers, event listeners, and network requests or any subscriptions to external data sources.\n\n**Example of componentWillUnmount**\n\n```jsx\nclass Clock extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = { date: new Date() }\n\t}\n\tcomponentDidMount() {\n\t\tthis.timerID = setInterval(() => this.tick(), 1000)\n\t}\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.timerID)\n\t}\n\ttick() {\n\t\tthis.setState({\n\t\t\tdate: new Date(),\n\t\t})\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Hello, world!</h1>\n\t\t\t\t<h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\nThe above code will render the clock every second. When the component is unmounted, the timer is cleared.\n","section":"react","source":"https://reactjs.org/"},{"title":"What is State in react ?","content":"\nReact components has a built-in state object. The state object is where you store property values that belongs to the component. When the state object changes, the component re-renders.\n","section":"react","source":"https://reactjs.org/"},{"title":"What is the lifecycle of a component?","content":"\nComponents are created (mounted on the DOM), grow by updating, and then die (unmount on DOM). This is referred to as a component lifecycle. There are different lifecycle methods that React provides at different phases of a component's life.\n","section":"react","source":"https://reactjs.org/"},{"title":"What is SyntheticEvent ?","content":"\nSyntheticEvent , a cross-browser wrapper around the browser's native event. It has the same interface as the browser's native event, including stopPropagation() and preventDefault() , except the events work identically across all browsers.\n","section":"react","source":"https://reactjs.org/"},{"title":"Why we use synthetic events in ReactJS ?","content":"\nDifferent browsers where the same event has different names. Here wrapper does is triggering all the different names for the same event effect. Therefore, whenever we are triggering an event in a ReactJS, we are not actually trying to trigger the real DOM event, instead, we are using the ReactJS custom event type, which is the synthetic event.\n\nThe examples of the synthetic events are onClick(), onBlur() and onChange(). These all are not real DOM events but react synthetic events.\n","section":"react","source":"https://www.geeksforgeeks.org"},{"title":"What is the use of toggle in JavaScript?","content":"\nThe ontoggle event occurs when the user opens or closes the ` <details>` element. The `<details>` element specifies additional details that the user can view or hide on demand.\n","section":"react","source":"https://reactjs.org/"},{"title":"How do I use componentWillMount?","content":"\nIn React, the componentWillMount() method is called before the render() method. This is where we can set up any initial state or perform any other operations before the render() method is called.\n\n**Note:** `componentWillMount()` is now deprecated in favor of `componentDidMount()`. Because it could be called multiple times, and maybe memory leaks could occur, So it is recommended to use `componentDidMount()` instead.\n\n**Example:**\n\n```jsx\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n  componentWillMount() {\n    this.setState({\n      count: this.state.count + 1\n    });\n  }\n  render() {\n    return <div>{this.state.count}</div>;\n  }\n}\n\nexport default App;\n```\n\n**OUTPUT:**\n\n```html\n<div>1</div>\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"When component did mount is called?","content":"React component call the componentDidMount() method calls once after the component has been rendered to the DOM. This is where we can perform DOM-related operations, such as adding event listeners or timers. Because now out DOM is ready, we can start making changes to the DOM.\n\n**Example**\n\n```jsx\nclass App extends React.Component {\n state: Record<string, any> = {}\n constructor(props: any) {\n  super(props)\n  this.state = {\n   count: 0,\n  }\n  this.handleClick = this.handleClick.bind(this)\n }\n\n componentDidMount() {\n  console.log('Component Did Mount')\n }\n handleClick() {\n  this.setState({\n   count: this.state.count + 1,\n  })\n }\n render() {\n  console.log('Render Method')\n  return (\n   <div>\n    <p>{this.state.count}</p>\n    <button onClick={this.handleClick}>Increment</button>\n   </div>\n  )\n }\n}\nexport default App\n\n// Component Did Mount\n// Render Method\n// Render Method\n// Render Method\n// Render Method\n// Render Method\n// Render Method\n\n\n```\n","section":"react","source":"https://www.geeksforgeeks.org/reactjs-lifecycle-components/"},{"title":"What is componentWillReceiveProps?","content":"This method is used during the updating phase of the React lifecycle. This function is generally called if the props passed to the component change. It is used to update the state in response with the new received props.\n\n```jsx\nclass App extends React.Component {\n state: Record<string, any> = {}\n constructor(props: any) {\n  super(props)\n  this.state = {\n   count: 0,\n  }\n }\n render() {\n  return (\n   <>\n    <Child currentCount={this.state.count} />\n    <button\n     onClick={() =>\n      this.setState({\n       count: this.state.count + 1,\n      })\n     }>\n     Increment\n    </button>\n   </>\n  )\n }\n}\n\n```\n\n**Child**\n\n```jsx\n class Child extends Component<{ currentCount: number }> {\n componentWillReceiveProps(nextProps: any): void {\n  console.log('componentWillReceiveProps', nextProps)\n }\n render() {\n  return <div>Count - {this.props.currentCount}</div>\n }\n}```\n","section":"react","source":"https://reactjs.org/"},{"title":"How can we display a list in react ?","content":"\nTo Render a list in React. we can use the following code:\n\n**Class Based Component**\n\n```jsx\nclass App extends React.Component {\n  state = {\n    items: [],\n  }\n  componentDidMount() {\n    this.setState({\n      items: [\n        { id: 1, text: 'item 1' },\n        { id: 2, text: 'item 2' },\n        { id: 3, text: 'item 3' },\n      ],\n    })\n  }\n  render() {\n    return (\n      <div>\n        <ul>\n          {this.state.items.map(item => (\n            <li key={item.id}>{item.text}</li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n}\n```\n\n**Functional Component**\n\n```jsx\nconst App = () => {\n  const items = [\n    { id: 1, text: 'item 1' },\n    { id: 2, text: 'item 2' },\n    { id: 3, text: 'item 3' },\n  ]\n  return (\n    <div>\n      <ul>\n        {items.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What is state in React?","content":"\nState is a plain JavaScript object that represents the state of a React component. That may change over time as the component updates over the component's lifecycle.\n\nState is the only part of a React component that can change over time.\n\n**Example: State in Class Based Component**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass MyComponent extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tcount: 0,\n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>You clicked {this.state.count} times</p>\n\t\t\t\t<button onClick={() => this.setState({ count: this.state.count + 1 })}>\n\t\t\t\t\tClick me\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\n**Example: State in Functional Component**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst MyComponent = () => {\n\tconst [count, setCount] = React.useState(0)\n\treturn (\n\t\t<div>\n\t\t\t<p>You clicked {count} times</p>\n\t\t\t<button onClick={() => setCount(count + 1)}>Click me</button>\n\t\t</div>\n\t)\n}\n```\n","section":"react","source":"https://www.simplilearn.com/tutorials/reactjs-tutorial/reactjs-state"},{"title":"What is the use of key in react ?","content":"\nKeys are used to identify which item in a list has changed. Keys should be unique for each item in a list. The best way to generate a key is to use the item's IDs in the list.\n\n```jsx\nconst items = [\n  { id: 1, text: 'Hello' },\n  { id: 2, text: 'World' },\n  { id: 3, text: '!' },\n];\n\nconst listItems = items.map(item => (\n  <li key={item.id}>{item.text}</li>\n));\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What is reconciliation?","content":"\nReconciliation is the process of comparing two sets of data and determining which items need to be added, removed, or updated to match the new data. This process is known as a diff, and it is often used to determine which DOM nodes need to be updated to reflect the new data. In React, reconciliation is performed automatically by React when the component is re-rendered. This is called reconciliation. The process of reconciling is known as a diff.\n","section":"react","source":"https://reactjs.org/"},{"title":"What is a purpose of code splitting?","content":"\nCode Splitting is a technique for splitting large JavaScript files into smaller chunks. When we bundle our application we combine all the code into a single file and the browser initially loads the whole code. This can be a problem if the code is large and the browser has to download it all at once. Her Code splitting allows us to split the code into smaller chunks(file) and load each chunk separately when it is needed.\n\n<details>\n<summary>Example</summary>\n\n```jsx\nconst ChildComponent = React.lazy(() => import('./ChildComponent'))\n\nconst App = () => (\n\t<React.Suspense fallback={<div>Loading...</div>}>\n\t\t<ChildComponent />\n\t</React.Suspense>\n)\n```\n\n<details>\n","section":"react","source":"https://reactjs.org/"},{"title":"What is the proper placement for error boundaries?","content":"\nError boundaries are React components that catch and display errors that occur in their children. They are useful for displaying error messages to the user. So it's best to place error boundaries at the top of the component tree and catch errors all the way down.\n","section":"react","source":"https://reactjs.org/"},{"title":"When to Use Context","content":"\nContext is a way to pass data through the component tree without having to pass props down manually at every level. This can be very useful for keeping data that is shared between components local to the components that need it. For example, a global theme object or a current language.\n","section":"react","source":"https://reactjs.org/"},{"title":"How does a forward Ref work?","content":"\nReact forwardRef is a method that allows parent components pass down (i.e., “forward”) refs to their children. Using forwardRef in React gives the child component a reference to a DOM element created by its parent component. This then allows the child to read and modify that element anywhere it is being used.\n","section":"react","source":"https://reactjs.org/"},{"title":"What is controlled component in react ?","content":"\nComponents are those in which form’s data is handled by the component’s state. It takes its current value through props and makes changes through callbacks like onClick,onChange, etc.\n\n**Example**\n\n```js\nfunction App() {\n\tconst [name, setName] = useState('')\n\tconst [showName, setShowName] = useState(false)\n\n\tfunction handleSubmit(e) {\n\t\te.preventDefault()\n\t\tsetShowName(true)\n\t}\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<form>\n\t\t\t\t<label>Name:</label>\n\t\t\t\t<input\n\t\t\t\t\tname='name'\n\t\t\t\t\tvalue={name}\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<button onClick={handleSubmit} type='submit'>\n\t\t\t\t\tSubmit\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t{/* Checks the condition if showName is \n      true, which will be true only if \n      we click on the submit button */}\n\t\t\t{showName === true && <p>You have submitted. Name: {name}</p>}\n\t\t</div>\n\t)\n}\n\nexport default App\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What is uncontrolled component in react ?","content":"\nIn a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.\n\nTo write an uncontrolled component, instead of writing an event handler for every state update, we can use a `ref` to get form values from the DOM.\n","section":"react","source":"https://reactjs.org/"},{"title":"What are higher-order component?","content":"\nA higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React's compositional nature. Concretely, a higher-order component is a function that takes a component and returns a new component.\n","section":"react","source":"https://reactjs.org/"},{"title":"What are the children in React?","content":"\nchildren is a special prop, automatically passed to every component, that can be used to render the content included between the opening and closing tags when invoking a component. These kinds of components are identified by the official documentation as “boxes”.\n\n```jsx\n<MyComponent>Hello world!</MyComponent>\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What is React and why use it?","content":"\nReact is an open-source front-end JavaScript library that is used for building user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps. React was created by Jordan Walke, a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012.\n","section":"react","source":"https://github.com/sudheerj/reactjs-interview-questions#what-is-react"},{"title":"What is the purpose of a function as a child in React?","content":"\nA Function as child component is a pattern that lets you pass a render function to a component as the children prop so you can change what you can pass as children to a component.\n","section":"react","source":"https://reactjs.org/"},{"title":"What is virtualization in rendering?","content":"\nVirtualization is a technique that allows us to render only a subset of the items in a list. This is useful when we have a large list of items that we want to render, but we don't want to render all of them at once. This is especially useful when we have a list of items that are expensive to render, such as images or videos.\n","section":"react","source":"https://www.patterns.dev/posts/virtual-lists"},{"title":"What is the use of React portals?","content":"\nPortals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. The first argument ( child ) is any renderable React child, such as an element, string, or fragment. The second argument ( container ) is a DOM element.\n\n**Example**\n\n```jsx\nconst App = () => {\n\treturn ReactDOM.createPortal(\n\t\t<h1>Portals Demo</h1>,\n\t\tdocument.querySelector('body')\n\t)\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What is the use of refs in React?","content":"\nRefs provide a way to access DOM nodes or React elements created in the render method. Refs are useful when you need to manage focus, select text, or perform animations and working with third-party DOM libraries.\n\n**Example**\n\n```jsx\nclass CustomTextInput extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\t// create a ref to store the textInput DOM element\n\t\tthis.textInput = React.createRef()\n\t\tthis.focusTextInput = this.focusTextInput.bind(this)\n\t}\n\n\tfocusTextInput() {\n\t\t// Explicitly focus the text input using the raw DOM API\n\t\t// Note: we're accessing \"current\" to get the DOM node\n\t\tthis.textInput.current.focus()\n\t}\n\n\trender() {\n\t\t// tell React that we want to associate the <input> ref\n\t\t// with the `textInput` that we created in the constructor\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type='text' ref={this.textInput} />\n\n\t\t\t\t<input\n\t\t\t\t\ttype='button'\n\t\t\t\t\tvalue='Focus the text input'\n\t\t\t\t\tonClick={this.focusTextInput}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What are the render props?","content":"\nThe term “render prop” refers to a technique for sharing code between React components using a prop whose value is a function. A component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic.\n\n**Example**\n\n```jsx\nconst Mouse = (props) => {\n\tconst [mouse, setMouse] = useState({ x: 0, y: 0 })\n\n\tconst handleMouseMove = (event) => {\n\t\tsetMouse({\n\t\t\tx: event.clientX,\n\t\t\ty: event.clientY,\n\t\t})\n\t}\n\n\treturn (\n\t\t<div style={{ height: '100%' }} onMouseMove={handleMouseMove}>\n\t\t\t{props.render(mouse)}\n\t\t</div>\n\t)\n}\n\nconst App = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Move the mouse around!</h1>\n\t\t\t<Mouse\n\t\t\t\trender={(mouse) => (\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThe current mouse position is ({mouse.x}, {mouse.y})\n\t\t\t\t\t</p>\n\t\t\t\t)}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What is Strict Mode in react ?","content":"\nStrictMode is a tool for highlighting potential problems in an application. Like Fragment, StrictMode does not render any visible UI. It activates additional checks and warnings for its descendants.\n\n**Example**\n\n```jsx\nimport React from 'react'\n\nfunction ExampleApplication() {\n\treturn (\n\t\t<div>\n\t\t\t<Header />\n\t\t\t<React.StrictMode>\n\t\t\t\t<div>\n\t\t\t\t\t<ProfilePage />\n\t\t\t\t</div>\n\t\t\t</React.StrictMode>\n\t\t\t<Footer />\n\t\t</div>\n\t)\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What are Hooks in React ?","content":"\nHooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\n","section":"react","source":"https://reactjs.org/"},{"title":"What are the two rules of React Hooks?","content":"\nHooks are JavaScript functions, but they impose two additional rules:\n\n- Don't call Hooks inside loops, conditions, or nested functions.\n- Only call Hooks from React function components.\n","section":"react","source":"https://reactjs.org"},{"title":"Why is useEffect used?","content":"\nThe motivation behind the introduction of useEffect Hook is to eliminate the side-effects of using class-based components. For example, tasks like updating the DOM, fetching data from API end-points, setting up subscriptions or timers, etc can be lead to unwarranted side-effects.\n","section":"react"},{"title":"What is useState used for?","content":"\nuseState is a Hook (function) that allows us to have state variables in functional components.\n\n```js\nconst [count, setCount] = useState(0)\n```\n\nuseState returns an array with 2 values: the current state and a function to update it.\n\n**Example**\n\n```js\nimport React, { useState } from 'react'\nfunction Example() {\n\t// Declare a new state variable, which we'll call \"count\"\n\tconst [count, setCount] = useState(0)\n\treturn (\n\t\t<div>\n\t\t\t<p>You clicked {count} times</p>\n\t\t\t<button onClick={() => setCount(count + 1)}>Click me</button>\n\t\t</div>\n\t)\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What are the differences between props and state","content":"\nBoth props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.\n","section":"react","source":"https://www.geeksforgeeks.org/what-are-the-differences-between-props-and-state/"},{"title":"What is useContext used for in React?","content":"\nContext provides a way to pass data or state through the component tree without having to pass props down manually through each nested component.\n\n**Example**\n\n```js\nimport { render } from 'react-dom'\nimport React, { useState } from 'react'\nconst ThemeContext = React.createContext('light')\n\nfunction App() {\n\tconst [theme, setTheme] = useState('light')\n\treturn (\n\t\t<ThemeContext.Provider value={{ setTheme, theme }}>\n\t\t\t<Toolbar />\n\t\t</ThemeContext.Provider>\n\t)\n}\n```\n\n## useContext\n\n```js\nimport React, { useContext } from 'react'\nfunction Toolbar() {\n\tconst { theme, setTheme } = useContext(ThemeContext)\n\treturn (\n\t\t<div>\n\t\t\tCurrent theme: {theme}\n\t\t\t<button onClick={() => setTheme('dark')}>Dark</button>\n\t\t\t<button onClick={() => setTheme('light')}>Light</button>\n\t\t</div>\n\t)\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What is useReducer for?","content":"\nuseReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks.\n\n**Example**\n\n```js\nfunction reducer(state, action) {\n\tswitch (action.type) {\n\t\tcase 'reset':\n\t\t\treturn init(action.payload)\n\t\tcase 'increment':\n\t\t\treturn { count: state.count + 1 }\n\t\tcase 'decrement':\n\t\t\treturn { count: state.count - 1 }\n\t\tdefault:\n\t\t\tthrow new Error()\n\t}\n}\n\nfunction Counter() {\n\tconst [state, dispatch] = useReducer(reducer, { count: 1 })\n\treturn (\n\t\t<>\n\t\t\tCount: {state.count}\n\t\t\t<button\n\t\t\t\tonClick={() => dispatch({ type: 'reset', payload: initialCount })}>\n\t\t\t\tReset\n\t\t\t</button>\n\t\t\t<button onClick={() => dispatch({ type: 'increment' })}>+</button>\n\t\t\t<button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n\t\t</>\n\t)\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"Why useCallback is used in React?","content":"\nThe `useCallback` hook is used to memorize the callback function. It is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. `shouldComponentUpdate`).\n\n**Example**\n\n```js\nconst Child = React.memo(function Child({ onClick, name }) {\n\tconsole.log('Rendering Child', name)\n\treturn (\n\t\t<button onClick={onClick} type='button'>\n\t\t\t{name}\n\t\t</button>\n\t)\n})\n\nconst Parent = () => {\n\tconst [count, setCount] = useState(0)\n\tconst [name, setName] = useState('Mary')\n\n\tconst handleAlertClick = useCallback(() => {\n\t\tsetTimeout(() => {\n\t\t\talert('You clicked on: ' + name)\n\t\t}, 3000)\n\t}, [name])\n\n\treturn (\n\t\t<div>\n\t\t\t<Child name={name} onClick={handleAlertClick} />\n\t\t\t<hr />\n\t\t\t<button onClick={() => setCount((c) => c + 1)}>+ {count}</button>\n\t\t\t<button onClick={() => setName('John')}>Change name</button>\n\t\t</div>\n\t)\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What is useMemo used for?","content":"\nuseMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.\n\n**Example**\n\n```js\nconst App = () => {\n\tconst [val, setVal] = useState(0)\n\tconst [val2, setVal2] = useState(0)\n\n\tconst expensive = useMemo(() => {\n\t\tlet i = 0\n\t\twhile (i < 1000000000) i++\n\t\treturn val + val2\n\t}, [val, val2])\n\n\treturn (\n\t\t<div>\n\t\t\t<input\n\t\t\t\ttype='number'\n\t\t\t\tvalue={val}\n\t\t\t\tonChange={(e) => setVal(parseInt(e.target.value))}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\ttype='number'\n\t\t\t\tvalue={val2}\n\t\t\t\tonChange={(e) => setVal2(parseInt(e.target.value))}\n\t\t\t/>\n\t\t\t<div>{expensive}</div>\n\t\t</div>\n\t)\n}\n```\n\nThe above example will only recompute the expensive value when the val or val2 changes. If you remove the dependency array, the expensive value will be recomputed on every render.\n","section":"react","source":"https://reactjs.org/"},{"title":"What is useRef used for?","content":"\nThe useRef Hook allows you to persist values between renders. It can be used to store a mutable value that does not cause a re-render when updated. It can be used to access a DOM element directly.\n\n**Example**\n\n```js\nfunction TextInputWithFocusButton() {\n\tconst inputEl = useRef(null)\n\tconst onButtonClick = () => {\n\t\t// `current` points to the mounted text input element\n\t\tinputEl.current.focus()\n\t}\n\treturn (\n\t\t<>\n\t\t\t<input ref={inputEl} type='text' />\n\t\t\t<button onClick={onButtonClick}>Focus the input</button>\n\t\t</>\n\t)\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"Does useLayoutEffect run before render?","content":"\nThe useLayoutEffect hook works synchronously. It runs immediately after React has performed all DOM mutations. It will run after every render but before the screen is updated.\n\n```js\nconst App = () => {\n\tconst [val, setVal] = useState(0)\n\tconst [val2, setVal2] = useState(0)\n\n\tuseLayoutEffect(() => {\n\t\tconsole.log('useLayoutEffect')\n\t})\n\n\treturn (\n\t\t<div>\n\t\t\t<input\n\t\t\t\ttype='number'\n\t\t\t\tvalue={val}\n\t\t\t\tonChange={(e) => setVal(parseInt(e.target.value))}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\ttype='number'\n\t\t\t\tvalue={val2}\n\t\t\t\tonChange={(e) => setVal2(parseInt(e.target.value))}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What is reconciliation?","content":"\nWhen a component's props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM.\n","section":"react","source":"https://reactjs.org/"},{"title":"What is fragment in Reactjs and why do we use it?","content":"\nReact Fragments allow you to wrap or group multiple elements without adding an extra node to the DOM. This can be useful when rendering multiple child elements/components in a single parent component.\n\n**Example**\n\n```js\nimport React from 'react'\n\nfunction FragmentDemo() {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<h1>Fragment Demo</h1>\n\t\t\t<p>This describes the Fragment Demo component</p>\n\t\t</React.Fragment>\n\t)\n}\n```\n\nOr\n\n```js\nimport React from 'react'\n\nfunction FragmentDemo() {\n\treturn (\n\t\t<>\n\t\t\t<h1>Fragment Demo</h1>\n\t\t\t<p>This describes the Fragment Demo component</p>\n\t\t</>\n\t)\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What are pure components with example?","content":"\nPure component, it is only re-rendered when its props change. They are a good way to optimize your application. Pure components are a good way to avoid bugs caused by side-effects. It's doesn't have a life cycle or state.\n\n**Example of a pure component:**\n\n```jsx\nimport React from 'react'\n\nconst PureComponent = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>{props.title}</h1>\n\t\t</div>\n\t)\n}\n\nexport default PureComponent\n```\n\n**Example of a component that is not pure:**\n\n```jsx\nimport React from 'react'\n\nconst Component = (props) => {\n\tconst [count, setCount] = React.useState(0)\n\tuseEffect(() => {\n\t\tfetch('https://api.github.com/users/facebook/repos')\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCount(data.length)\n\t\t\t})\n\t}, [])\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>{props.title}</h1>\n\t\t\t<h2>{count}</h2>\n\t\t\t<button onClick={() => setCount(count + 1)}>Click me</button>\n\t\t</div>\n\t)\n}\n```\n","section":"react"},{"title":"What is stateless and stateful components?","content":"\n**Stateless components**\n\nStateless components are components that do not have state. They are also called functional components. They are just functions that take props as an argument and return a React element. They are also called pure components because they do not have any side effects.\n\n```js\nconst StatelessComponent = (props) => {\n\treturn <div>{props.name}</div>\n}\n```\n\n**Stateful components**\n\nStateful components are components that have state. They are also called class components. They are classes that extend React.Component and have a render method. They are also called impure components because they have side effects. But In React Hooks, we can also use state in functional components.\n\n```js\nclass StatefulComponent extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tname: 'John',\n\t\t}\n\t}\n\trender() {\n\t\treturn <div>{this.state.name}</div>\n\t}\n}\n```\n\n**Hooks in functional components**\n\n```js\nimport React, { useState } from 'react'\n\nfunction FunctionalComponent() {\n\tconst [name, setName] = useState('John')\n\treturn <div>{name}</div>\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What are keys used for in React?","content":"\nKeys help React identify which items have changed, are added, or are removed.\n","section":"react","source":"https://reactjs.org/"},{"title":"Should component names be capitalized?","content":"\nYes, React components should start with a capital letter. This convention is to remove collision with HTML tags.\n","section":"react","source":"https://reactjs.org/"},{"title":"How do you run a loop inside a JSX?","content":"\nUsing the Array map function is a very common way to loop through an Array of elements and create components according to them in React. This is a great way to do a loop which is a pretty efficient and is a tidy way to do your loops in JSX.\n\nHere is an example of how you would do a loop in JSX:\n\n```jsx\nconst App = () => {\n\tconst names = ['John', 'Paul', 'George', 'Ringo']\n\treturn (\n\t\t<div>\n\t\t\t{names.map((name) => (\n\t\t\t\t<div>{name}</div>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n```\n","section":"react","source":"https://reactjs.org/"},{"title":"What are props in React?","content":"\nProps are arguments passed into a component. They are single or multiple values that are passed into a component similar to how attributes are passed into an HTML element. They are data passed down from a parent component to a child component. It's useful to pass custom data into a component. Manually tiggering a re-render is not necessary.\n\n**Example: Props in Class Based Component**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass ChildComponent extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>{this.props.name}</p>\n\t\t\t\t<p>{this.props.age}</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass ParentComponent extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ChildComponent name='John' age='30' />\n\t\t\t\t<ChildComponent name='Mary' age='25' />\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\n**Example: Props in Functional Component**\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst ChildComponent = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<p>{props.name}</p>\n\t\t\t<p>{props.age}</p>\n\t\t</div>\n\t)\n}\n\nconst ParentComponent = () => {\n\treturn (\n\t\t<div>\n\t\t\t<ChildComponent name='John' age='30' />\n\t\t\t<ChildComponent name='Mary' age='25' />\n\t\t</div>\n\t)\n}\n```\n","section":"react","source":"https://www.w3schools.com/react/react_props.asp#:~:text=Props%20are%20arguments%20passed%20into,props%20stands%20for%20properties."},{"title":"How to create components in React?","content":"\nThere are two ways to create components in React:\n\n    1. Create a component class.\n    2. Create a function component.\n\n1. **Create a component class.**\n   ES6 class syntax is used to create a component class.\n\n```jsx\nimport React from 'react'\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Hello World</h1>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\n2. **Create a function component.**\n   Function syntax is used to create a function component.\n\n   ```jsx\n   import React from 'react'\n   const App = () => {\n   \treturn (\n   \t\t<div>\n   \t\t\t<h1>Hello World</h1>\n   \t\t</div>\n   \t)\n   }\n   ```\n\nBoth components can be rendered to the screen using ReactDOM.render().\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n","section":"react"},{"title":"How JSX works in React ?","content":"\nJSX is a syntax extension to JavaScript that allows us to write HTML like syntax. It is a subset of JavaScript that allows us to write HTML-like syntax.\n\n**Withouts JSX we would have to write HTML like syntax.**\n\n```jsx\nconst element = React.createElement(\n\t'div',\n\tnull,\n\tReact.createElement('h1', null, 'This is a header'),\n\tReact.createElement('p', null, 'This is a paragraph')\n)\n```\n\n**With JSX we can write HTML like syntax.**\n\n```jsx\nconst element = (\n\t<div>\n\t\t<h1>This is a header</h1>\n\t\t<p>This is a paragraph</p>\n\t</div>\n)\n```\n\nJSX uses babel to transpile HTML like syntax to JavaScript. Babel is a compiler that transpiles JavaScript code to JavaScript.\n","section":"react"}],"reactnative":[{"title":"What is a Hybrid App?","content":"\nHybrid app is a combination of both native and web apps. Where need to embed the code written in JavaScript into the native app, and the web app is used to display the content.\n","section":"reactnative","source":"https://www.netsolutions.com/insights/native-vs-hybrid-vs-cross-platform/#what-is-a-native-app"},{"title":"How React Native is different from React?","content":"\nReact is an open-source JS library for building the UIs for web applications; besides, React Native is used to building rich mobile UI from declarative components using only JavaScript.\n","section":"reactnative","source":"https://stackoverflow.com"},{"title":"What are the advantages of using React Native","content":"\n- Large community\n- Reuseable components\n- Live reload\n- Additional libraries\n","section":"reactnative","source":"https://stackoverflow.com"},{"title":"What is native module in react native ?","content":"\nNative Module is a way to communicate between React Native and native code. It is a bridge between React Native and Platform native code. Native modules are used to access platform capabilities, such as accessing the phone camera, accessing the phone storage, accessing the user’s location, etc.\n","section":"reactnative","source":"https://stackoverflow.com"},{"title":"What is the difference between React Native and Expo?","content":"","section":"reactnative","source":"https://stackoverflow.com"},{"title":"What is Expo CLI in React Native?","content":"\nExpo CLI is a command line interface for developing Expo apps. It is a tool for creating, building, and publishing react-native apps. It provides a development server that allows us to easily run our app on our device. It also provides a way to publish our app to the Expo app store.\n","section":"reactnative","source":"https://stackoverflow.com"},{"title":"What SDK means?","content":"\nSDK stands for Software Development Kit. It is a set of tools and libraries that allow you to build applications for a specific platform. For example, Android SDK allows you to build Android apps, iOS SDK allows you to build iOS apps.\n","section":"reactnative","source":"https://stackoverflow.com"},{"title":"What are native components in react native?","content":"\nAt runtime, React Native creates the corresponding Android and iOS views for those components. Because React Native components are backed by the same views as Android and iOS, React Native apps look, feel, and perform like any other apps. We call these platform-backed components Native Components.\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"What are most useful core components in react native","content":"\nThe core components are the building blocks of a React Native app. Here is a list of some of the most commonly used core components:\n\n- [View](https://reactnative.dev/docs/view)\n- [Text](https://reactnative.dev/docs/text)\n- [Image](https://reactnative.dev/docs/image)\n- [ScrollView](https://reactnative.dev/docs/scrollview)\n- [TextInput](https://reactnative.dev/docs/textinput)\n- [StyleSheet](https://reactnative.dev/docs/stylesheet)\n- [TouchableOpacity](https://reactnative.dev/docs/touchableopacity)\n- [TouchableHighlight](https://reactnative.dev/docs/touchablehighlight)\n- [FlatList](https://reactnative.dev/docs/flatlist)\n- [SectionList](https://reactnative.dev/docs/sectionlist)\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"How to write platform-specific code in react native","content":"\nIn React-Native there are two ways to write platform-specific code:\n\n- Using Platform module\n- Using Platform-specific extensions\n\n**Using Platform module**\n\nFor Android\n\n```js\nimport { Platform } from 'react-native'\n\nif (Platform.OS === 'android') {\n\t// do something\n}\n```\n\nFor iOS\n\n```js\nimport { Platform } from 'react-native'\n\nif (Platform.OS === 'ios') {\n\t// do something\n}\n```\n\n**Using Platform-specific extensions**\n\nFor Android\n\n```js\nbutton.android.js\nbutton.ios.js\n```\n\n```js\nimport button from './button'\n```\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"How can you check the device OS version in React Native?","content":"\nFor Android\n\n```js\nimport { Platform } from 'react-native'\n\nif (Platform.Version === 28) {\n\t// do something\n}\n```\n\nFor iOS\n\n```js\nimport { Platform } from 'react-native'\nif (Platform.Version === '14.0') {\n\t// do something\n}\n```\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"What is a Hybrid App?","content":"\nHybrid apps are essentially web apps that have been put in a native app shell. Once they are downloaded from an app store and installed locally, the shell is able to connect to whatever capabilities the mobile platform provides through a browser that's embedded in the app.\n","section":"reactnative"},{"title":"What is Gradle and why it is used?","content":"\nGradle is a build automation tool that is used to build and manage any Java-based project. It is used to build Android applications. It is open-source.\n\nIn Android, Gradle is used to build the project and manage the dependencies. It is used to compile the code, run unit tests, and generate the final APK file. It is also used to manage the dependencies of the project.\n","section":"reactnative","source":"https://www.geeksforgeeks.org"},{"title":"What is the AndroidManifest XML?","content":"\nAndroidManifest.xml is an XML file that contains information about the application. It is used to declare the components of the application, permissions, and other information about the application.\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"What is Fast Refresh","content":"\nFast Refresh is a new feature in React Native that allows us to get direct feedback for changes in our React components. It is enabled by default in the React Native CLI.\n\nIt works for example if we change the text in the App.js file from \"Hello World\" to \"Hello World!\". it will update this component without reloading the entire application. An alterant if we have a util file and we change the file those changes will be re-render in the other files that are using that util file.\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"What is library linking in react native","content":"\nWhen a library has native module implementations. Then we have to link the library to the platform-specific native code. This is called library linking.  Linking can be done automatically or manually.\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"Why Test","content":"\nTesting is an important part of software development. It is a way to ensure that the code is working as expected. It is also a way to ensure that the code is not broken when new features are added or when existing features are modified.\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"What is Hermes in react native","content":"\nHermes is a JavaScript engine optimized for running React Native apps on Android. It improves app performance and decreases app size. Hermes is enabled by default in the latest version of React Native.","section":"reactnative","source":"https://reactnative.dev"},{"title":"Difference between is React-native from ReactJS ?.md","content":"\nDifference between ReactJS and React-native in Tabular form\n\n| ReactJS                                                       | React-native                                                                         |\n| ------------------------------------------------------------- | ------------------------------------------------------------------------------------ |\n| ReactJS is a JavaScript library for building user interfaces. | React Native is a JavaScript framework for building native apps for Android and iOS. |\n| It is used for development of web applications.               | It is used for developement of mobile applications.                                  |\n| It uses React-Router for routing.                             | It uses React-Navigation for routing.                                                |\n| It uses HTML tag for UI.                                      | It uses View tag for UI.                                                             |\n| In this the virtual DOM renders the browser code.             | In this the native uses it's API to render code for mobile applications.             |","section":"reactnative","source":"https://reactnative.dev"},{"title":"What is Flexbox ?","content":"\n\nIt is a layout model that allows elements to be laid out in a flexible manner. It is a one-dimensional layout model, meaning that it can only handle elements that are laid out either horizontally or vertically. It is a very powerful layout model that can be used to create complex layouts.","section":"reactnative","source":"https://reactnative.dev"},{"title":"What are the advantages of using React Native?","content":"\n- Large community: React Native has a large community of developers who are constantly working on improving the framework. This means that we can get help from the community if we run into any issues while developing our app.\n- Reusable code: React Native allows us to reuse our code across different platforms. This means that we can write our code once and use it on both Android and iOS.\n- Additional Third-Party Libraries: React Native has a large number of third-party libraries that we can use to add additional functionality to our app. This means that we don't have to write all the code from scratch.\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"How is user Input Handled in React Native?","content":"\nTextInput is a core component of React Native that allows the user to enter text. It has an API that is very similar to that of the HTML input element, with support for auto-correction, auto-capitalization, placeholder text, and more.\n\n```jsx\nimport React, { useState } from 'react'\n\nimport { TextInput, View, StyleSheet } from 'react-native'\n\nconst App = () => {\n\tconst [value, onChangeText] = useState('Useless Placeholder')\n\n\treturn (\n\t\t<View>\n\t\t\t<TextInput onChangeText={(text) => onChangeText(text)} value={value} />\n\t\t</View>\n\t)\n}\n```\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"What is cross-platform mobile app development?","content":"\nCross platform framework operate to develop shareable and reusable code across multiple platforms. \"Write once, run everywhere\" is the motto of cross platform framework.\nWriting once and reuse the same on multiple platforms helps in minimizing the development time and cost and also ensure hassle-free implementation.\n**Note:** Cross-platform applications are popular in today’s times, all credits to React Native, Xamarin, and Flutter frameworks.\n","section":"reactnative","source":"https://www.netsolutions.com/insights/native-vs-hybrid-vs-cross-platform/#what-is-a-hybrid-app"},{"title":"What is a bridge in React Native ?","content":"\nReact Native uses a bridge to communicate between the JavaScript code and the native code. The bridge is a native module that is responsible for sending messages between the JavaScript code and the native code. It is a very important part of React Native because it allows us to communicate between the JavaScript code and the native code.\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"What is ListView in react-native?","content":"\nReact Native ListView is a view that renders a list of items. It is a core component of React Native and is used to render a list of data. It is similar to the HTML list element.\n\n```jsx\nimport React, { useState } from 'react'\n\nimport { View, Text, StyleSheet, FlatList } from 'react-native'\n\nconst App = () => {\n\tconst [data, setData] = useState([\n\t\t{ id: 1, name: 'John Doe' },\n\t\t{ id: 2, name: 'Brad Traversy' },\n\t\t{ id: 3, name: 'Steve Smith' },\n\t\t{ id: 4, name: 'Janet Williams' },\n\t\t{ id: 5, name: 'David Doe' },\n\t\t{ id: 6, name: 'John Doe' },\n\t\t{ id: 7, name: 'Brad Traversy' },\n\t\t{ id: 8, name: 'Steve Smith' },\n\t\t{ id: 9, name: 'Janet Williams' },\n\t\t{ id: 10, name: 'David Doe' },\n\t\t{ id: 11, name: 'John Doe' },\n\t\t{ id: 12, name: 'Brad Traversy' },\n\t\t{ id: 13, name: 'Steve Smith' },\n\t\t{ id: 14, name: 'Janet Williams' },\n\t\t{ id: 15, name: 'David Doe' },\n\t])\n\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t<FlatList\n\t\t\t\tdata={data}\n\t\t\t\trenderItem={({ item }) => <Text style={styles.item}>{item.name}</Text>}\n\t\t\t/>\n\t\t</View>\n\t)\n}\n```\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"What are Touchable components in react Native?","content":"\nTouchable components are the most basic building blocks of React Native apps. They allow you to make views respond properly to touches. When you wrap a view with a Touchable component, you make it respond to touch events such as the press. Touchable components provide a simple interface for creating components that respond to user interactions.\n\n```jsx\nimport React from 'react'\nimport { TouchableOpacity, Text } from 'react-native'\n\nconst App = () => {\n\treturn (\n\t\t<TouchableOpacity\n\t\t\tonPress={() => console.log('Pressed')}\n\t\t\tstyle={{ backgroundColor: 'blue' }}>\n\t\t\t<Text style={{ fontSize: 20, color: 'white' }}>Press Me</Text>\n\t\t</TouchableOpacity>\n\t)\n}\n```\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"What are the Different Ways to style React Native Application?","content":"\nThere are two ways to style React Native application: StyleSheet and inline styles.\n\n## StyleSheet\n\n```jsx\nimport { StyleSheet } from 'react-native'\n\nimport React from 'react'\n\nimport { View, Text, StyleSheet } from 'react-native'\n\nconst App = () => {\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t<Text\n\t\t\t\tstyle={{\n\t\t\t\t\tfontSize: 20,\n\t\t\t\t}}>\n\t\t\t\tHello World\n\t\t\t</Text>\n\t\t</View>\n\t)\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#fff',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n})\n```\n\n## Inline Styles\n\n```jsx\nimport React from 'react'\n\nimport { View, Text, StyleSheet } from 'react-native'\n\nconst App = () => {\n\treturn (\n\t\t<Text\n\t\t\tstyle={{\n\t\t\t\tfontSize: 20,\n\t\t\t}}>\n\t\t\tHello World\n\t\t</Text>\n\t)\n}\n```\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"What are the disadvantages of React Native?","content":"\nReact Native is a great framework for building cross-platform mobile applications. However, it has some disadvantages too.\n\n- React Native is not a native app. It is a hybrid app. It is a web app that is wrapped in a native app. So, it is not as fast as a native app.\n- It takes more time to boot up than a native app.\n- Security is a concern. React Native apps are not as secure as native apps. When we choose banking apps, Expert not choose React Native apps.\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"what is deep linking in react native","content":"\nDeep linking consists of using a uniform resource identifier (URI) that links to a specific location within a mobile app rather than simply launching the app.\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"What is react-navigation?","content":"\nReact Navigation is a standalone library that enables us to implement navigation functionality in a React Native application. React Navigation is written in JavaScript and does not directly use the native navigation APIs on iOS and Android. Rather, it recreates some subset of those APIs.\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"How react-navigation works?","content":"\nReact Native doesn't have a built-in idea of a global history stack as a web browser does. Instead, React-navigation's native stack navigator provides a way for the app to transition between screens and manage navigation history. If our app uses only one stack navigator then it is conceptually similar to how a web browser handles navigation state. the app pushes and pops items from the navigation stack as users interact with it, and this results in the user seeing different screens. A key difference between how this works in a web browser and React Navigation is that React Navigation's native stack navigator provides the gestures and animations that we would expect on Android and iOS when navigating between routes in the stack.\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"How Does Navigation lifecycle works in react native?","content":"\nReact navigation works a bit differently from the react web navigation. For Example, if we have 2 screens `ScreenA` and `ScreenB`. When we first navigate to `ScreenB` from `ScreenA` its `componentDidMount` is called and also `ScreenA` remains mounted. After we go back to `ScreenA` its `componentDidMount` will be not called.\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"What are React Navigation lifecycle events​?","content":"\nReact Navigation emits events to screen components that subscribe to them. We can listen to focus and blur events to know when a screen comes into focus or goes out of focus respectively.\n\n## Focus Events\n\nIt's common to want to perform some action when a screen comes into focus. For example, you may want to fetch some data when a screen comes into focus. You can do this by subscribing to the focus event.\n\n```jsx\nfunction MyComponent() {\n\tReact.useEffect(() => {\n\t\tconst unsubscribe = navigation.addListener('focus', () => {\n\t\t\t// The screen is focused\n\t\t\t// Call any action\n\t\t})\n\t\treturn unsubscribe\n\t}, [navigation])\n}\n```\n\n## Blur Events\n\nIt's also common to want to perform some action when a screen goes out of focus. For example, you may want to save some data when a screen goes out of focus. You can do this by subscribing to the blur event.\n\n```jsx\nfunction MyComponent() {\n\tReact.useEffect(() => {\n\t\tconst unsubscribe = navigation.addListener('blur', () => {\n\t\t\t// The screen is unfocused\n\t\t\t// Call any action\n\t\t})\n\t\treturn unsubscribe\n\t}, [navigation])\n}\n```\n\n## beforeRemove Event\n\nThe `beforeRemove` event is emitted when the screen is about to be removed from the stack. This event is emitted when the screen is popped or replaced. You can use this event to prevent the screen from being removed from the stack.\n\n```jsx\nfunction MyComponent() {\n\tReact.useEffect(() => {\n\t\tconst unsubscribe = navigation.addListener('beforeRemove', (e) => {\n\t\t\t// Prevent default behavior of leaving the screen\n\t\t\te.preventDefault()\n\t\t\t// Prompt the user before leaving the screen\n\t\t\tAlert.alert('Hold on!', 'Are you sure you want to leave?', [\n\t\t\t\t{ text: \"Don't leave\", style: 'cancel', onPress: () => {} },\n\t\t\t\t{\n\t\t\t\t\ttext: 'Leave',\n\t\t\t\t\tstyle: 'destructive',\n\t\t\t\t\t// If the user confirmed, then we dispatch the action we blocked earlier\n\t\t\t\t\t// This will continue the action that had triggered the removal of the screen\n\t\t\t\t\tonPress: () => navigation.dispatch(e.data.action),\n\t\t\t\t},\n\t\t\t])\n\t\t})\n\t\treturn unsubscribe\n\t}, [navigation])\n}\n```\n","section":"reactnative","source":"https://reactnative.dev"},{"title":"When to Consider Building a Cross-platform App?","content":"\n- We have to release a mobile app for both Android and iOS in limited time ,resources and budget.\n- Need to target both Android and iOS platforms.\n- Need faster development.\n- The app isn’t complex and doesn’t need functionalities which vary much between the platforms.\n","section":"reactnative","source":"https://www.netsolutions.com"},{"title":"What is React Native and why it is used?","content":"\nReact Native is an open-source JavaScript framework, designed for building apps on multiple platforms like iOS, Android, and also web applications, utilizing the very same code base. It is based on React, and it brings all its glory to mobile app development.\n","section":"reactnative","source":"https://reactjs.org/"},{"title":"How react native works internally","content":"\nReact Native allows developers to build apps by spinning up JS threads that interpret JavaScript code, by making a native bridge between the app and the target platform. The bridge concept leverages the library and transfers the component’s hierarchy to the mobile devices view.\n\nFor instance, if the user presses a button, this case is translated into an event that JavaScript can handle. After that, by relaying messages between native platforms and JS code, the React Native bridges translates native events into something that React components can understand and work with.\n","section":"reactnative","source":"https://www.reactnative.guide/"},{"title":"What is React Native Threading Model ?","content":"\nThere are 3 main threads in React Native:\n\n1. Main thread\n2. JS Thread\n3. Native Modules Thread\n\n**Main thread**\nThe Main thread listens to the UI events like 'press', 'touch', etc. These events are then passed to the JS thread via the RN Bridge. Once the Javascript loads, the JS thread sends the information on what needs to be rendered onto the screen.\n\n**JS Thread**\nThe Javascript Queue is the thread queue where the main bundled JS thread runs. The JS thread runs all the business logic, i.e., the code we write in React Native.\n\n**Native Modules Thread**\nIf an app needs access to platform API, this is where the magic happens.\n","section":"reactnative","source":"https://digitalya.co/"},{"title":"What does React Native use to allow JavaScript to be executed on iOS and Android natively?","content":"\nOn iOS simulators and devices, Android emulators and devices React Native uses JavaScriptCore which is the JavaScript engine that powers Safari. Our bundle contains the JS code. And it runs on the JavaScriptCore engine. And communicates with the native code through a bridge.\n","section":"reactnative","source":"https://stackoverflow.com"},{"title":"Does React Native use a WebView?","content":"\nReact Native uses a JavaScript runtime, but the UI is not HTML and it doesn't use a WebView. We use JSX and React Native-specific components to define the UI. It provides a native-level performance and looks and feels but some UI parts have to be configured separately for iOS and Android.\n","section":"reactnative","source":"https://stackoverflow.com"}],"ts":[{"title":"Difference between explicit and implicit types in typescript ?","content":"\nExplicit types are used when you know the type of the variable. Implicit types are used when you don't know the type of the variable.\n\n**Explicit types**\n\n```typescript\nlet name: string = \"John\"\nlet age: number = 30\nlet isMarried: boolean = false\n```\n\n**Implicit types**\n\n```typescript\nlet name = 'John'\nlet age = 30\n\nlet isMarried = false\n\n```\n","section":"ts"},{"title":"Why is generic used in TypeScript?","content":"\nGenerics are able to create a component or function to work over a variety of types rather than a single one.\n\n```typescript\n/** A class definition with a generic parameter */\nclass Queue<T> {\n  private data = [];\n  push = (item: T) => this.data.push(item);\n  pop = (): T => this.data.shift();\n}\n\nconst queue = new Queue<number>();\nqueue.push(0);\nqueue.push(\"1\"); // ERROR : cannot push a string. Only numbers allowed\n```\n","section":"ts","source":"https://stackoverflow.com"},{"title":"What is build time error?","content":"\nErrors that occur when you violate the rules of writing syntax are known as build-Time errors. This compiler error indicates something that must be fixed before the code can be compiled. All these errors are detected by the compiler and thus are known as build-time or compile-time errors.\n","section":"ts","source":"https://www.geeksforgeeks.org"},{"title":"Differences Between Type Aliases and Interfaces?","content":"Type aliases and interfaces are similar but not the same. The key difference is that interfaces are extensible whereas type aliases are not. Type aliases are used to create a new type that is a subset of an existing type. Interfaces are used to create a new type that is a superset of an existing type.\n\n**Extending an interface**\n\n```typescript\ninterface Animal {\n  name: string\n}\n\ninterface Bear extends Animal {\n  honey: boolean\n}\n\nconst bear = getBear() \nbear.name\nbear.honey\n        \n```\n\n**Extending a type via intersections**\n\n```typescript\ntype Animal = {\n  name: string\n}\n\ntype Bear = Animal & { \n  honey: boolean \n}\n\nconst bear = getBear();\nbear.name;\nbear.honey;\n        \n```\n","section":"ts","source":"https://www.typescriptlang.org"},{"title":"Typescript make all properties readonly ?","content":"\nConstructs a type with all properties of Type set to readonly, meaning the properties of the constructed type cannot be reassigned.\n\n```typescript\ninterface Todo {\n  title: string;\n}\n \nconst todo: Readonly<Todo> = {\n  title: \"Delete inactive users\",\n};\n \ntodo.title = \"Hello\";\n// Cannot assign to 'title' because it is a read-only property.\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"What does Required do in TypeScript?","content":"\nConstructs a type consisting of all properties of Type set to required. The opposite of Partial.\n\n```typescript\ninterface Props {\n  a?: number;\n  b?: string;\n}\n \nconst obj: Props = { a: 5 };\n \nconst obj2: Required<Props> = { a: 5 };\n\n//Property 'b' is missing in type '{ a: number; }' but required in type 'Required<Props>'.\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"what is enum in typescript","content":"In TypeScript, enums, or enumerated types, are data structures of constant length that hold a set of constant values. Each of these constant values is known as a member of the enum. Enums are useful when setting properties or values that can only be a certain number of possible values.\n\n```typescript\nenum UserResponse {\n  No = 0,\n  Yes = 1,\n}\n\nfunction respond(recipient: string, message: UserResponse): void {\n  console.log(recipient, message); // \"Princess Caroline\",  1\n}\n\nrespond(\"Princess Caroline\", UserResponse.Yes);\n\n```\n","section":"ts","source":"https://www.digitalocean.com/community/tutorials/how-to-use-enums-in-typescript"},{"title":"What is literal type in typescript","content":"TypeScript Literal Types restrict the value of a variable to finite valid values. This is in contrast to the variable which allows you to change value (except for TypeScript Constants). The latest version of Typescript supports the String Literal Types, Numeric Literal Types, Boolean Literal Types & Enum Literal Types.\n\n**Example**\n\n```typescript\ntype Easing = \"ease-in\" | \"ease-out\" | \"ease-in-out\";\n```\n\n```typescript\ninterface ValidationSuccess {\n  isValid: true;\n  reason: null;\n}\ninterface ValidationFailure {\n  isValid: false;\n  reason: string;\n}\ntype ValidationResult = ValidationSuccess | ValidationFailure;\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"What is Pick type in TypeScript?","content":"Constructs a type by picking the set of properties Keys (string literal or union of string literals) from Type.\n\n```typescript\ninterface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\ntype TodoPreview = Pick<Todo, \"title\" | \"completed\">;\nconst todo: TodoPreview = {\n  title: \"Clean room\",\n  completed: false,\n  description:'ddd' // Type '{ title: string; completed: false; description: string; }' is not assignable to type 'Pick<Todo, \"title\" | \"completed\">'.\n};\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"What is the purpose of Record in typescript","content":"\nConstructs an object type whose property keys are Keys and whose property values are Type. This utility can be used to map the properties of a type to another type.\n\n```typescript\ninterface CatInfo {\n  age: number;\n  breed: string;\n}\n \ntype CatName = \"miffy\" | \"boris\" | \"mordred\";\n \nconst cats: Record<CatName, CatInfo> = {\n  miffy: { age: 10, breed: \"Persian\" },\n  boris: { age: 5, breed: \"Maine Coon\" },\n  mordred: { age: 16, breed: \"British Shorthair\" },\n};\n \ncats.boris // const cats: Record<CatName, CatInfo>\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"What is type assertion?","content":"\n Type assertions enable you to override default type inference for neutral types. Type assertion is a technique that informs the compiler about the type of a variable. Type assertion is similar to typecasting but it doesn’t reconstruct code. You can use type assertion to specify a value’s type and tell the compiler not to deduce it. When we want to change a variable from one type to another such as any to number etc, we use Type assertion.\n\n**Example**\n\n```typescript\n\nlet str: unknown = \"Typescript\";\nconsole.log(str);\n  \nlet len: number = (str as string).length;\nconsole.log(len);             \n                        \n```\n","section":"ts","source":"https://www.geeksforgeeks.org/"},{"title":"Do we need to compile TypeScript files and why?","content":"\nYes we do. Typescript is just a language Extension browsers can't interpret it. Converting from TypeScript to JavaScript is called compiling. Compiling doesn't mean binary code is created in this case. For this kind of translation, also the term transpilation is used instead of compilation.\n","section":"ts"},{"title":"What is type casting in typescript","content":"\nType casting means changing an expression from one data type to another.\n\nTypeScript is compiled to JavaScript and behaves differently; it does not give two hoots about the types defined by you, and there is no runtime to enforce types during the execution.\n\nExample\n\n```typescript\n\nlet data: string = '123';\nconsole.log(\"Type of Data before Type Cast==>\", typeof data);\nconsole.log(\"Type of Data after Type Cast==>\", typeof Number(data));\n\n```\n","section":"ts","source":"https://www.delftstack.com/howto/typescript/casting-a-number-to-string-in-typescript/"},{"title":"What is type guard in typescript","content":"\n\nA type guard is a TypeScript technique used to get information about the type of a variable, usually within a conditional block. Type guards are regular functions that return a boolean, taking a type and telling TypeScript if it can be narrowed down to something more specific.\n\n**Example**\n\n```typescript\n\nfunction StudentId(x: string | number) {\n    if (typeof x == 'string') {\n        console.log('Student');\n    }\n    if (typeof x === 'number') {\n        console.log('Id');\n    }\n}\nStudentId(`446`); //prints Student\nStudentId(446); //prints Id\n\n```\n","section":"ts","source":"https://blog.logrocket.com/"},{"title":"what is type narrowing in typescript","content":"\nType narrowing is just what it sounds like—narrowing down a general type into something more precise. If you've ever dealt with union types, e.g. string | number you've certainly encountered this. In fact, optional types such as x?: number often require narrowing as well, as this typing is equivalent to x: number | undefined. In both of these cases, you'll likely need to handle each case in your code, and for that you'll need to narrow down the type first.\n\n**Ways to Narrow These Types**\nTo narrow a union type down to one, we'll need to consider each case. We can do this with good old-fashioned control flow in JavaScript, as the TypeScript compiler is clever enough to infer the narrowing from our conditional logic. Typically, this just means using if or switch statements.\n\nLet's consider a common, real-world example that I'm sure you've all written once or twice: a function that returns the deliciousness score for a given type of candy.\n\n```typescript\ntype Candy =\n  | { name: \"Skittles\"; type: \"Regular\" | \"Tropical\" }\n  | { name: \"Black Licorice\"; qty: number }\n  | { name: \"Runts\"; isBanana: boolean };\n\nfunction rateCandy(candy: Candy): number {\n  switch (candy.name) {\n    case \"Skittles\":\n      return candy.type === \"Regular\" ? 8 : 7;\n    case \"Black Licorice\":\n      return candy.qty * -1;\n    case \"Runts\":\n      return candy.isBanana ? 11 : 5;\n    default:\n      throw new Error(`\"${candy}\" is not a valid candy!`);\n  }\n}\n```\n","section":"ts","source":"https://formidable.com/"},{"title":"When should I use unknown keyword TypeScript?","content":"We may need to describe the type of variables that we do not know when we are writing an application. These values may come from dynamic content – e.g. from the user – or we may want to intentionally accept all values in our API. In these cases, we want to provide a type that tells the compiler and future readers that this variable could be anything, so we give it the unknown type.\n\n```typescript\nlet notSure: unknown = 4;\nnotSure = \"maybe a string instead\";\n \n// OK, definitely a boolean\nnotSure = false;\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"What are Modules in Typescript?","content":"\nIn Typescript, we can use modules to organize our code. A module is a file that contains a group of related code. We can make some of them public to view from outside the module, and some of them private to hide from outside the module. To make a module public, we use the export keyword.\n\n### Example\n\n**index.ts**\n\n```typescript\nexport class Person {\n\tname: string = ''\n\tconstructor(public name: string) {\n\t\tthis.name = name\n\t}\n}\n```\n\n**App.ts**\n\n```typescript\nimport { Person } from './index'\n\nconst person = new Person('John Doe')\n\nconsole.log(person.name)\n```\n","section":"ts","source":"https://www.meziantou.net"},{"title":"Why do we need to compile TypeScript?","content":"\nBrowser can only understand JavaScript. So we need to compile Typescript to JavaScript. If we try to run Typescript code directly, it will not work. Because browsers don't understand it.\n","section":"ts"},{"title":"How do you call a constructor of parent class in child class?","content":"\nTo call a constructor of parent class in child class, we use `super` keyword.\n\n**Example:**\n\n```typescript\nclass Person {\n\tname: string = ''\n\tconstructor(public name: string) {\n\t\tthis.name = name\n\t}\n}\n\nclass Employee extends Person {\n\tconstructor(public name: string) {\n\t\tsuper(name)\n\t}\n}\n\nconst employee = new Employee('John Doe')\nconsole.log(employee.name)\n```\n","section":"ts"},{"title":"What is the difference between .ts and .tsx ?","content":"\n`.ts` files contains only pure TypeScript\n`.tsx` have included JSX also.\n\nOn another point of view, you can copy everything from a .ts file and paste on .tsx file, and you don't need to modify anything. But if you're copying from a .tsx file you need to refactor it by removing the JSX elements.\n","section":"ts"},{"title":"What is the difference between interface and classes?","content":"\nA class is a blueprint from which we can create objects that share the same configuration - properties and methods. An interface is a group of related properties and methods that describe an object, but don't specify how they are implemented.\n\n**Example of class:**\n\n```typescript\nclass Person {\n\tname: string = ''\n\tconstructor(public name: string) {\n\t\tthis.name = name\n\t}\n}\n\nconst person = new Person('John Doe')\nconsole.log(person.name)\n```\n\n**Example of interface:**\n\n```typescript\ninterface Person {\n\tname: string\n}\n\nconst person: Person = {\n\tname: 'John Doe',\n}\nconsole.log(person.name)\n```\n","section":"ts"},{"title":"How do you declare a class constant?","content":"\nTypescript allows you to declare a constant inside a class. But we can use the readonly keyword to declare a constant. It is a constant that is shared by all instances of a class. But it is not modifiable.\n\n**Example:**\n\n```typescript\nclass Person {\n\treadonly name: string = ''\n\tconstructor(public name: string) {\n\t\tthis.name = name\n\t}\n}\n\nconst person = new Person('John Doe')\nconsole.log(person.name)\n\nperson.name = 'Jane Doe' // Error: Cannot assign to 'name' because it is a constant or a read-only property.\n```\n","section":"ts"},{"title":"What does TypeScript map file do?","content":"\n`.map` files are source map files that let tools map between the emitted JavaScript code and the TypeScript source files that created it. Many debuggers (e.g. Visual Studio or Chrome's dev tools) can consume these files so you can debug the TypeScript file instead of the JavaScript file.\n","section":"ts","source":"https://stackoverflow.com/questions/17493738/what-is-a-typescript-map-file"},{"title":"How to call base class constructor from child class in TypeScript?","content":"\nWe can call base class constructor using `super()`.\n","section":"ts","source":"https://stackoverflow.com"},{"title":"What is getters setters in TypeScript?","content":"\nTypeScript has getters and setters. Getters and setters as a way of intercepting and modifying the value of a property. This gives us the ability to do things like enforce data types, or to make sure that a property is never null.\n\n**Example**\n\n```typescript\nclass Employee {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n    set fullName(newName: string) {\n        this._fullName = newName;\n    }\n}\n\nlet employee = new Employee();\nemployee.fullName = \"Bob Smith\";\nemployee.fullName; // \"Bob Smith\"\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"What are conditional types in TypeScript?","content":"\nTaking a decision makes function useful for a different type of input. Conditional types, as the name suggests, define the types of value on the basis of conditions. Now, Conditional types seem like a conditional statement, although, it is same in the way that the conditional statement is used to choose the flow of code based on certain conditions and conditional  types used for choosing different types for values.\n","section":"ts","source":"https://www.geeksforgeeks.org"},{"title":"How do you make an array read-only?","content":"Using the typescript utility. The `ReadonlyArray<T>` type is a read-only array type. It is a subtype of the `Array<T>` type. This type is useful when you want to ensure that the array is read-only.\n\n**Example**\n\n```typescript\nconst arr: ReadonlyArray<number> = [1, 2, 3];\narr[0] = 4; // Error!\narr.push(4); // Error!\narr.length = 0; // Error!\narr.splice(0, 1); // Error!\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"What is public and private in TypeScript?","content":"\nTypescript provide us three access modifiers: public, private and protected.\n\n**Public**\nThe public access modifier is used to declare a property or method as public. It is the default access modifier.\n\n```typescript\nclass Employee {\n    public name: string;\n    public getName(): string {\n        return this.name;\n    }\n}\nconst emp = new Employee();\nemp.name = 'John'; \nconsole.log(emp.getName()); // John\n```\n\n**Private**\nThe private access modifier is used to declare a property or method as private. It is used to hide the property or method from outside the class.\n\n```typescript\nclass Employee {\n    private name: string;\n    private getName(): string {\n        return this.name;\n    }\n}\nconst emp = new Employee();\nemp.name = 'John';\nconsole.log(emp.getName()); // Error: Property 'getName' is private and only accessible within class 'Employee'.\n```\n\n**Protected**\nThe protected access modifier is used to declare a property or method as protected. It is used to hide the property or method from outside the class and its subclasses.\n\n```typescript\nclass Employee {\n    protected name: string;\n    protected getName(): string {\n        return this.name;\n    }\n}\nclass Manager extends Employee {\n    constructor() {\n        super();\n        this.name = 'John';\n    }\n    getName(): string {\n        return super.getName();\n    }\n}\nconst emp = new Employee();\nemp.name = 'John';\nconsole.log(emp.getName()); // Error: Property 'getName' is protected and only accessible within class 'Employee' and its subclasses.\nconst mgr = new Manager();\nconsole.log(mgr.getName()); // John\n```\n\n**Difference between private and protected**\nPrivate access modifier is used to hide the property or method from outside the class. Protected access modifier is used to hide the property or method from outside the class and its subclasses.\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"What is override in TypeScript?","content":"\nMethod Overriding is a process of overthrowing a method of super class by method of same name and parameters in sub class. Method Overriding is useful when sub class wants to modify the behavior of super class for certain tasks.\n\n**Example WithOut Overriding**\n\n```typescript\nclass Base {\n public name: string = ''\n public getName(): string {\n  return `${this.name} Base`\n }\n}\nclass Sub extends Base {\n constructor() {\n  super()\n  this.name = 'John'\n }\n}\n\nconst sub = new Sub()\nconsole.log(sub.getName()) // John Base\n```\n\n**Example With Overriding**\n\n```typescript\nclass Base {\n public name: string = ''\n public getName(): string {\n  return `${this.name} Base`\n }\n}\nclass Sub extends Base {\n constructor() {\n  super()\n  this.name = 'John'\n }\n public getName(): string {\n  return `${this.name} Sub`\n }\n}\n\nconst sub = new Sub()\nconsole.log(sub.getName()) // John Sub\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"Does TypeScript have overloading?","content":"\nTypeScript provides the concept of function overloading. You can have multiple functions with the same name but different parameter types and return type. However, the number of parameters should be the same.\n\n```typescript\nfunction add(a: number, b: number): number;\nfunction add(a: string, b: string): string;\nfunction add(a: number, b: string): string;\n\nfunction add(a: any, b: any): any {\n  return a + b;\n}\n\nadd(1, 2); // 3\n\nadd(\"1\", \"2\"); // \"12\"\n\nadd(1, \"2\"); // \"12\"\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"Why do we use abstract class in TypeScript?","content":"\nAbstract classes are base classes from which other classes may be derived. They may not be instantiated directly. Unlike an interface, an abstract class may contain implementation details for its members. The abstract keyword is used to define abstract classes as well as abstract methods within an abstract class.\n\n```ts\nabstract class Animal {\n    abstract makeSound(): void;\n    move(): void {\n        console.log('roaming the earth...');\n    }\n}\n \n\nclass Dog extends Animal {\n    makeSound(): void {\n        console.log('woof');\n    }\n}\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"What is the declare keyword in TypeScript?","content":"The declare keyword in TypeScript is used for declaring a variable or a function as a type. It is used for declaring a variable or a function as a type.\n\n## Example\n\n```typescript\ndeclare var x: number;\ndeclare function add(x: number, y: number): number;\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"What are decorators in TypeScript?","content":"A Decorator is a special kind of declaration that can be attached to a class declaration, method, accessor, property, or parameter. Decorators use the form @expression , where expression must evaluate to a function that will be called at runtime with information about the decorated declaration.\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"Should I use type or interface TypeScript?","content":"nterfaces are most recommended for defining new objects or methods or properties of an object where it will receive a specific component. Hence interface works better when using objects and method objects. Therefore it is our choice to choose between types or interface according to the program needs.\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"List the built-in types in Typescript ?","content":"\nNumber type: it is used to represent number type values and represents double precision floating point values.\n\n```typescript\nvar variable_name: number;\n```\n\n**String type:** it represents a sequence of characters stored as Unicode UTF-16 code. It is the same as JavaScript primitive type.\n\n```typescript\nvar variable_name: string;\n```\n\n**Boolean type:** in Typescript, it is used to represent a logical value. When we use the Boolean type, we get output only in true or false. It is also the same as JavaScript primitive type.\n\n```typescript\nvariable_name\n```\n\n**Null type:** it represents a null literal and it is not possible to directly reference the null type value itself.\n\n```typescript\nvar variable_name:number = null;\n\n```\n\n**Undefined type:** it is the type of undefined literal. This type of built-in type is the sub-type of all the types.\n\n```typescript\nvar variable_name:number = undefined;\n\n```\n","section":"ts"},{"title":"How do I combine two TypeScript interfaces?","content":"\nTo merge two interfaces with TypeScript, we can use extends to extend multiple interfaces. to create the IFooBar that extends IFoo and IBar . This means IFooBar has all the members from both interfaces inside.\n\n**Example**\n\n```typescript\ninterface IFoo {\n    foo(): void;\n}\ninterface IBar {\n    bar(): void;\n}\n\ninterface IFooBar extends IFoo, IBar {\n}\n```\n","section":"ts","source":"https://www.typescriptlang.org/"},{"title":"What are the benefits of TypeScript?","content":"\nThe main benefit of TypeScript is that it can highlight unexpected behavior in your code, lowering the chance of bugs.\n\n- It helps in code structuring.\n- Use class based object oriented programming.\n- Impose coding guidelines.\n- Offers type checking.\n- Compile time error checking.\n- Intellisense\n","section":"ts","source":"https://stackoverflow.com"},{"title":"What is interface in typescript?","content":"\nInterface is a blueprint of an object which is used to define the properties and methods of an object. It is used to define the structure of an object. and helpfull in type checking.\n\nYou can explicitly describe this object’s shape using an interface declaration:\n\n```typescript\ninterface Person {\n firstName: string\n lastName: string\n}\n\nvar person: Person = {\n firstName: 'John',\n lastName: 'Doe',\n}\n\n```\n","section":"ts"},{"title":"What is static type checking in TypeScript?","content":"\nIt is a type system that is used to check the type of variables and functions at compile time. Used to prevent runtime errors and improve the readability of the code. Static type checking is helpful in debugging and also in writing clean and readable code and IDE intellisense features.\n\n```typescript\nconst message = \"hello!\";\nmessage()\n//ERROR:  This expression is not callable.\n```\n","section":"ts","source":"https://www.typescriptlang.org/docs/handbook/2/basic-types.html"},{"title":"What is Typescript?","content":"\nTypeScript is a free and open-source programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript, and adds optional static typing and class-based object-oriented programming to the language.\n","section":"ts","source":"https://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript"},{"title":"What is Unions in typescript?","content":"\nUnions are a way to combine multiple types into a single type.\n\n**Variable Example**\n\n```typescript\nlet isDone: boolean | number = false\n```\n\n**Function Example**\n\n```typescript\nfunction add(x: number, y: number): number | boolean {\n return x + y\n}\n```\n","section":"ts","source":"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html#next-steps"}],"webrtc":[{"title":"What is WebRTC used for?","content":"\nWebRTC (Web Real-Time Communication) is an open source project that enables real-time peer-to-peer communications between browsers and other devices without frameworks or plugins.\n\nIt used to exchange any kind of media through the web (video, audio, data, etc.) and is now used for real-time gaming, voice and video chat, and for peer-to-peer applications.\n\n**Note**: Google Meet, Google Hangouts, and Google Duo are all examples of applications that use WebRTC.\n","section":"webrtc","source":"https://webrtc.org/"},{"title":"What is signaling server","content":"\nSignaling server does not do anything with WebRTC, it just provides a way to exchange messages between two peers. Help to exchange necessary information which is needed to establish a connection.\n\n**Note:** For signaling we can use WebSocket or even HTTP.\n","section":"webrtc","source":"https://webrtc.org/"}],"websocket":[{"title":"What is WebSocket?","content":"\nWebSocket is an advanced technology that makes it possible to open an interactive communication session between the user's browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply.\n","section":"websocket"},{"title":"How can we secure socket connection?","content":"\n- Enable CORS\n- Implement rate limiting (Without it server can be easily DoSed)\n- Authenticate users before WS connection establishes\n","section":"websocket"},{"title":"How is websocket different than http ?","content":"\nWebsocket is a protocol that allows for a persistent connection between the client and the server. This means that the client and the server can send messages to each other without having to re-establish the connection. This is different from HTTP, where the client and the server have to re-establish the connection for every request.\n","section":"websocket"},{"title":"What is Socket.IO ?","content":"\nSocket.IO is a library that enables real-time, bidirectional and event-based communication between the browser and the server. It's built on top of the WebSocket protocol, which makes it compatible with almost every browser. It's also compatible with older browsers that don't support WebSocket, through the use of long-polling.\n","section":"websocket"},{"title":"What is HTTP Long Polling?","content":"\nHTTP long polling is a technique that allows a server to send data to a client at any time, without the client having to request it. It's a technique that's often used in conjunction with websockets, but it can also be used on its own.\n\nTo overcome this deficiency, Web app developers can implement a technique called HTTP long polling, where the client polls the server requesting new information. The server holds the request open until new data is available. Once available, the server responds and sends the new information. When the client receives the new information, it immediately sends another request, and the operation is repeated. This effectively emulates a server push feature.\n","section":"websocket"},{"title":"WebSocket vs Socket.io","content":"\n| Socket.io                                   | WebSocket                                             |\n| ------------------------------------------- | ----------------------------------------------------- |\n| Has a fallback mechanism for older browsers | Does not have a fallback mechanism for older browsers |\n| Has auto-reconnect mechanism                | Does not have auto-reconnect mechanism                |\n| Has namespaces                              | Does not have namespaces                              |\n| Has rooms                                   | Does not have rooms                                   |\n","section":"websocket"},{"title":"What is namespace in socket.io?","content":"\nA Namespace is a communication channel that allows you to split the logic of your application over a single shared connection. Possible use cases: you want to create an admin namespace that only authorized users have access to, so the logic related to those users is separated from the rest of the application.\n\n## Example\n\n```js\nvar io = require('socket.io')(80)\n\n// on connection to namespace \"/admin\", execute this logic\nio.of('/admin').on('connection', function (socket) {\n\t// do something with socket\n})\n\n// on connection to namespace \"/test\", execute this logic\nio.of('/test').on('connection', function (socket) {\n\t// do something with socket\n})\n```\n","section":"websocket"},{"title":"Difference between Server-Sent-Event(SSE) and websockets ?","content":"\n| SSE                                                     | Websockets                                                    |\n| ------------------------------------------------------- | ------------------------------------------------------------- |\n| SSE connection can only push data from server to client | Websockets can push data from server to client and vice versa |\n| SSE is a one-way communication                          | Websockets is a two-way communication                         |\n| SSE is a simple protocol                                | Websockets is a complex protocol                              |\n","section":"websocket"},{"title":"what is the benefit of socket io ?","content":"\n- Reliability (if the connection is lost, the server will try to reconnect).\n- Automatic reconnection.\n- Packet buffering.\n- Broadcasting.\n- Namespaces.\n","section":"websocket"},{"title":"What is the difference between WebRTC and WebSockets?","content":"\nWhile both are part of the HTML5 specification, WebSockets are meant to enable bidirectional communication between a browser and a web server and WebRTC is meant to offer real time communication between browsers (predominantly voice and video communications).\n","section":"websocket"}]}